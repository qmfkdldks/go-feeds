// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feeds.proto

package main

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Describes how a Price should be interpreted and displayed to the user.
type PriceInterpretation int32

const (
	// Price interpretation unspecified, defaults to EXACT_AMOUNT.
	PriceInterpretation_PRICE_INTERPRETATION_UNSPECIFIED PriceInterpretation = 0
	// When the price should be interpreted as a specific value.
	//
	// Examples:
	//   $20 for a yoga class; $15 for a child haircut
	PriceInterpretation_EXACT_AMOUNT PriceInterpretation = 1
	// When the price of a service is variable but a minimum price is known and
	// displayed to consumers. Consumers may make choices which increase the
	// price.
	//
	// Note that any service that uses this PriceInterpretation must use
	// PrepaymentType NOT_SUPPORTED.
	//
	// Examples:
	//   $30 for dog grooming, but additional consumer choices may increase the
	//   price
	PriceInterpretation_STARTS_AT PriceInterpretation = 2
)

var PriceInterpretation_name = map[int32]string{
	0: "PRICE_INTERPRETATION_UNSPECIFIED",
	1: "EXACT_AMOUNT",
	2: "STARTS_AT",
}

var PriceInterpretation_value = map[string]int32{
	"PRICE_INTERPRETATION_UNSPECIFIED": 0,
	"EXACT_AMOUNT":                     1,
	"STARTS_AT":                        2,
}

func (x PriceInterpretation) String() string {
	return proto.EnumName(PriceInterpretation_name, int32(x))
}

func (PriceInterpretation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{0}
}

// Defines how a total price is determined from an availability.
type PriceType int32

const (
	// The price is for a fixed amount. This is the default value if the field is
	// not set.
	//
	// Examples:
	//   $50 deposit to reserve a table; $20 no show fee for a yoga class
	PriceType_FIXED_RATE_DEFAULT PriceType = 0
	// The price specified is per person, and the total price is calculated
	// according to the party size specified in Resources as price_micros *
	// party_size. A PER_PERSON price must be accompanied by a party size in the
	// availability resources. If it is not, a party size of one is used.
	//
	// Examples:
	//   $10 each for tickets to a museum
	PriceType_PER_PERSON PriceType = 1
)

var PriceType_name = map[int32]string{
	0: "FIXED_RATE_DEFAULT",
	1: "PER_PERSON",
}

var PriceType_value = map[string]int32{
	"FIXED_RATE_DEFAULT": 0,
	"PER_PERSON":         1,
}

func (x PriceType) String() string {
	return proto.EnumName(PriceType_name, int32(x))
}

func (PriceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{1}
}

// Defines whether a credit card is required in order to book an appointment.
type RequireCreditCard int32

const (
	// The credit card requirement is not explicitly specified and the
	// behaviour is identical to the one specified for CONDITIONAL.
	RequireCreditCard_REQUIRE_CREDIT_CARD_UNSPECIFIED RequireCreditCard = 0
	// Google will require a credit card for the booking if any of the following
	// conditions are met:
	// * the availability has a price and the prepayment_type is REQUIRED
	// * the no_show_fee is set
	// * the deposit field is set.
	RequireCreditCard_REQUIRE_CREDIT_CARD_CONDITIONAL RequireCreditCard = 1
	// A credit card is always required in order to book this availability
	// regardless of other field values.
	RequireCreditCard_REQUIRE_CREDIT_CARD_ALWAYS RequireCreditCard = 2
)

var RequireCreditCard_name = map[int32]string{
	0: "REQUIRE_CREDIT_CARD_UNSPECIFIED",
	1: "REQUIRE_CREDIT_CARD_CONDITIONAL",
	2: "REQUIRE_CREDIT_CARD_ALWAYS",
}

var RequireCreditCard_value = map[string]int32{
	"REQUIRE_CREDIT_CARD_UNSPECIFIED": 0,
	"REQUIRE_CREDIT_CARD_CONDITIONAL": 1,
	"REQUIRE_CREDIT_CARD_ALWAYS":      2,
}

func (x RequireCreditCard) String() string {
	return proto.EnumName(RequireCreditCard_name, int32(x))
}

func (RequireCreditCard) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{2}
}

// The platform that the action is performed on. Web application is the general
// fallback. It is recommended to have at least one ActionLink with
// ACTION_PLATFORM_WEB_APPLICATION. Links with Android and iOS as platform are
// only used on the respective system.
type ActionPlatform int32

const (
	// The platform is unspecified.
	ActionPlatform_ACTION_PLATFORM_UNSPECIFIED ActionPlatform = 0
	// The action platform is web in general.
	ActionPlatform_ACTION_PLATFORM_WEB_APPLICATION ActionPlatform = 1
	// The action platform is web on mobile devices.
	ActionPlatform_ACTION_PLATFORM_MOBILE_WEB ActionPlatform = 2
	// The action platform is Android OS.
	ActionPlatform_ACTION_PLATFORM_ANDROID ActionPlatform = 3
	// The action platform is iOS.
	ActionPlatform_ACTION_PLATFORM_IOS ActionPlatform = 4
)

var ActionPlatform_name = map[int32]string{
	0: "ACTION_PLATFORM_UNSPECIFIED",
	1: "ACTION_PLATFORM_WEB_APPLICATION",
	2: "ACTION_PLATFORM_MOBILE_WEB",
	3: "ACTION_PLATFORM_ANDROID",
	4: "ACTION_PLATFORM_IOS",
}

var ActionPlatform_value = map[string]int32{
	"ACTION_PLATFORM_UNSPECIFIED":     0,
	"ACTION_PLATFORM_WEB_APPLICATION": 1,
	"ACTION_PLATFORM_MOBILE_WEB":      2,
	"ACTION_PLATFORM_ANDROID":         3,
	"ACTION_PLATFORM_IOS":             4,
}

func (x ActionPlatform) String() string {
	return proto.EnumName(ActionPlatform_name, int32(x))
}

func (ActionPlatform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{3}
}

type LocationType int32

const (
	// Location type unspecified.
	LocationType_LOCATION_TYPE_UNSPECIFIED LocationType = 0
	// The location where this service visits.
	LocationType_VISITED_LOCATION LocationType = 1
	// The location where this service starts, also serves as MEETING_LOCATION
	// or START_LOCATION.
	LocationType_START_LOCATION LocationType = 2
	// The location where this service ends.
	LocationType_END_LOCATION LocationType = 3
)

var LocationType_name = map[int32]string{
	0: "LOCATION_TYPE_UNSPECIFIED",
	1: "VISITED_LOCATION",
	2: "START_LOCATION",
	3: "END_LOCATION",
}

var LocationType_value = map[string]int32{
	"LOCATION_TYPE_UNSPECIFIED": 0,
	"VISITED_LOCATION":          1,
	"START_LOCATION":            2,
	"END_LOCATION":              3,
}

func (x LocationType) String() string {
	return proto.EnumName(LocationType_name, int32(x))
}

func (LocationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{4}
}

// Depth of integration supported.
type IntegrationType int32

const (
	// Defaults to END_TO_END.
	IntegrationType_INTEGRATION_TYPE_UNSPECIFIED IntegrationType = 0
	// Complete integration that allows end to end booking through Google.
	IntegrationType_INTEGRATION_TYPE_END_TO_END IntegrationType = 1
	// Booking server doesn’t need to support this service. Only merchants,
	// services, and (optionally) availability data need to be sent.
	IntegrationType_INTEGRATION_TYPE_INVENTORY_ONLY IntegrationType = 2
)

var IntegrationType_name = map[int32]string{
	0: "INTEGRATION_TYPE_UNSPECIFIED",
	1: "INTEGRATION_TYPE_END_TO_END",
	2: "INTEGRATION_TYPE_INVENTORY_ONLY",
}

var IntegrationType_value = map[string]int32{
	"INTEGRATION_TYPE_UNSPECIFIED":    0,
	"INTEGRATION_TYPE_END_TO_END":     1,
	"INTEGRATION_TYPE_INVENTORY_ONLY": 2,
}

func (x IntegrationType) String() string {
	return proto.EnumName(IntegrationType_name, int32(x))
}

func (IntegrationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{5}
}

type FeedMetadata_ProcessingInstruction int32

const (
	// Do not use. Processing instructions need to be set to one of the values
	// below.
	FeedMetadata_PROCESS_UNKNOWN FeedMetadata_ProcessingInstruction = 0
	// This Feed message is one shard of a complete feed. Anything previously
	// supplied by this partner will be deleted; the contents of this feed
	// represent the entire state of the world.
	FeedMetadata_PROCESS_AS_COMPLETE FeedMetadata_ProcessingInstruction = 1
	// This Feed message is one shard of an incremental feed. Existing entities
	// will be left untouched except as modified in this feed.
	FeedMetadata_PROCESS_AS_INCREMENTAL FeedMetadata_ProcessingInstruction = 2
)

var FeedMetadata_ProcessingInstruction_name = map[int32]string{
	0: "PROCESS_UNKNOWN",
	1: "PROCESS_AS_COMPLETE",
	2: "PROCESS_AS_INCREMENTAL",
}

var FeedMetadata_ProcessingInstruction_value = map[string]int32{
	"PROCESS_UNKNOWN":        0,
	"PROCESS_AS_COMPLETE":    1,
	"PROCESS_AS_INCREMENTAL": 2,
}

func (x FeedMetadata_ProcessingInstruction) String() string {
	return proto.EnumName(FeedMetadata_ProcessingInstruction_name, int32(x))
}

func (FeedMetadata_ProcessingInstruction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{0, 0}
}

// A credit card type.
type CreditCardRestrictions_CreditCardType int32

const (
	// Unused.
	CreditCardRestrictions_CREDIT_CARD_TYPE_UNSPECIFIED CreditCardRestrictions_CreditCardType = 0
	// A Visa credit card.
	CreditCardRestrictions_VISA CreditCardRestrictions_CreditCardType = 1
	// A Mastercard credit card.
	CreditCardRestrictions_MASTERCARD CreditCardRestrictions_CreditCardType = 2
	// An American Express credit card.
	CreditCardRestrictions_AMERICAN_EXPRESS CreditCardRestrictions_CreditCardType = 3
	// A Discover credit card.
	CreditCardRestrictions_DISCOVER CreditCardRestrictions_CreditCardType = 4
	// A JCB credit card.
	CreditCardRestrictions_JCB CreditCardRestrictions_CreditCardType = 5
)

var CreditCardRestrictions_CreditCardType_name = map[int32]string{
	0: "CREDIT_CARD_TYPE_UNSPECIFIED",
	1: "VISA",
	2: "MASTERCARD",
	3: "AMERICAN_EXPRESS",
	4: "DISCOVER",
	5: "JCB",
}

var CreditCardRestrictions_CreditCardType_value = map[string]int32{
	"CREDIT_CARD_TYPE_UNSPECIFIED": 0,
	"VISA":                         1,
	"MASTERCARD":                   2,
	"AMERICAN_EXPRESS":             3,
	"DISCOVER":                     4,
	"JCB":                          5,
}

func (x CreditCardRestrictions_CreditCardType) String() string {
	return proto.EnumName(CreditCardRestrictions_CreditCardType_name, int32(x))
}

func (CreditCardRestrictions_CreditCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{6, 0}
}

// A payment option type.
type PaymentOption_PaymentOptionType int32

const (
	// Unused.
	PaymentOption_PAYMENT_OPTION_TYPE_UNSPECIFIED PaymentOption_PaymentOptionType = 0
	// Payment option can only be used once.
	PaymentOption_PAYMENT_OPTION_SINGLE_USE PaymentOption_PaymentOptionType = 1
	// Payment option can be used if its session count > 0.
	PaymentOption_PAYMENT_OPTION_MULTI_USE PaymentOption_PaymentOptionType = 2
	// Payment option can be used within its valid time range - session count
	// is inapplicable.
	PaymentOption_PAYMENT_OPTION_UNLIMITED PaymentOption_PaymentOptionType = 3
)

var PaymentOption_PaymentOptionType_name = map[int32]string{
	0: "PAYMENT_OPTION_TYPE_UNSPECIFIED",
	1: "PAYMENT_OPTION_SINGLE_USE",
	2: "PAYMENT_OPTION_MULTI_USE",
	3: "PAYMENT_OPTION_UNLIMITED",
}

var PaymentOption_PaymentOptionType_value = map[string]int32{
	"PAYMENT_OPTION_TYPE_UNSPECIFIED": 0,
	"PAYMENT_OPTION_SINGLE_USE":       1,
	"PAYMENT_OPTION_MULTI_USE":        2,
	"PAYMENT_OPTION_UNLIMITED":        3,
}

func (x PaymentOption_PaymentOptionType) String() string {
	return proto.EnumName(PaymentOption_PaymentOptionType_name, int32(x))
}

func (PaymentOption_PaymentOptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{8, 0}
}

// Defines how the validity start date is determined.
type PaymentOption_ActivationType int32

const (
	// Unused.
	PaymentOption_ACTIVATION_TYPE_UNSPECIFIED PaymentOption_ActivationType = 0
	// Validity starts at the time of purchase.
	PaymentOption_ACTIVATION_ON_PURCHASE PaymentOption_ActivationType = 1
	// Validity starts when the payment option is used for the first time.
	PaymentOption_ACTIVATION_ON_FIRST_USE PaymentOption_ActivationType = 2
)

var PaymentOption_ActivationType_name = map[int32]string{
	0: "ACTIVATION_TYPE_UNSPECIFIED",
	1: "ACTIVATION_ON_PURCHASE",
	2: "ACTIVATION_ON_FIRST_USE",
}

var PaymentOption_ActivationType_value = map[string]int32{
	"ACTIVATION_TYPE_UNSPECIFIED": 0,
	"ACTIVATION_ON_PURCHASE":      1,
	"ACTIVATION_ON_FIRST_USE":     2,
}

func (x PaymentOption_ActivationType) String() string {
	return proto.EnumName(PaymentOption_ActivationType_name, int32(x))
}

func (PaymentOption_ActivationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{8, 1}
}

// Defines a specific payment processor partner.
type PaymentProcessorConfig_Processor int32

const (
	// Unused
	PaymentProcessorConfig_PROCESSOR_UNSPECIFIED PaymentProcessorConfig_Processor = 0
	// A configuration for payments with Stripe.
	PaymentProcessorConfig_PROCESSOR_STRIPE PaymentProcessorConfig_Processor = 1
	// A configuration for payments with Braintree.
	PaymentProcessorConfig_PROCESSOR_BRAINTREE PaymentProcessorConfig_Processor = 2
)

var PaymentProcessorConfig_Processor_name = map[int32]string{
	0: "PROCESSOR_UNSPECIFIED",
	1: "PROCESSOR_STRIPE",
	2: "PROCESSOR_BRAINTREE",
}

var PaymentProcessorConfig_Processor_value = map[string]int32{
	"PROCESSOR_UNSPECIFIED": 0,
	"PROCESSOR_STRIPE":      1,
	"PROCESSOR_BRAINTREE":   2,
}

func (x PaymentProcessorConfig_Processor) String() string {
	return proto.EnumName(PaymentProcessorConfig_Processor_name, int32(x))
}

func (PaymentProcessorConfig_Processor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{11, 0}
}

// How much of the Billing Address to require of the user and include in the
// token. The enum values correspond to parameters in the Google Pay API (see
// https://developers.google.com/pay/api/web/reference/object\
//  #BillingAddressParameters).
type TokenizationConfig_BillingInformationFormat int32

const (
	TokenizationConfig_BILLING_INFORMATION_FORMAT_UNSPECIFIED TokenizationConfig_BillingInformationFormat = 0
	// name, country code, and postal code (GPay default setting).
	TokenizationConfig_MIN TokenizationConfig_BillingInformationFormat = 1
	// name, street address, locality, region, country code, and postal code
	TokenizationConfig_FULL TokenizationConfig_BillingInformationFormat = 2
)

var TokenizationConfig_BillingInformationFormat_name = map[int32]string{
	0: "BILLING_INFORMATION_FORMAT_UNSPECIFIED",
	1: "MIN",
	2: "FULL",
}

var TokenizationConfig_BillingInformationFormat_value = map[string]int32{
	"BILLING_INFORMATION_FORMAT_UNSPECIFIED": 0,
	"MIN":                                    1,
	"FULL":                                   2,
}

func (x TokenizationConfig_BillingInformationFormat) String() string {
	return proto.EnumName(TokenizationConfig_BillingInformationFormat_name, int32(x))
}

func (TokenizationConfig_BillingInformationFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{12, 0}
}

// Fields supported to authorize a card transaction.
//
// See the GPay documentation at
// https://developers.google.com/pay/api/web/reference/object#CardParameters
type TokenizationConfig_AuthMethod int32

const (
	TokenizationConfig_AUTH_METHOD_UNSPECIFIED TokenizationConfig_AuthMethod = 0
	// This authentication method is associated with payment cards stored on
	// file with the user's Google Account. Returned payment data includes
	// personal account number (PAN) with the expiration month and the
	// expiration year.
	TokenizationConfig_PAN_ONLY TokenizationConfig_AuthMethod = 1
	// This authentication method is associated with cards stored as Android
	// device tokens. Returned payment data includes a 3-D Secure (3DS)
	// cryptogram generated on the device.
	TokenizationConfig_CRYPTOGRAM_3DS TokenizationConfig_AuthMethod = 2
)

var TokenizationConfig_AuthMethod_name = map[int32]string{
	0: "AUTH_METHOD_UNSPECIFIED",
	1: "PAN_ONLY",
	2: "CRYPTOGRAM_3DS",
}

var TokenizationConfig_AuthMethod_value = map[string]int32{
	"AUTH_METHOD_UNSPECIFIED": 0,
	"PAN_ONLY":                1,
	"CRYPTOGRAM_3DS":          2,
}

func (x TokenizationConfig_AuthMethod) String() string {
	return proto.EnumName(TokenizationConfig_AuthMethod_name, int32(x))
}

func (TokenizationConfig_AuthMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{12, 1}
}

// Enum to indicate the prepayment type.
type Service_PrepaymentType int32

const (
	// By default we will assume that the prepayment is NOT_SUPPORTED.
	Service_PREPAYMENT_TYPE_UNSPECIFIED Service_PrepaymentType = 0
	// The user has to pay this service at the booking time.
	Service_REQUIRED Service_PrepaymentType = 1
	// The user can choose to pre-pay this service at the booking time or later,
	// but it is not required in order to book.
	Service_OPTIONAL Service_PrepaymentType = 2
	// The prepayment is not supported for this service.
	Service_NOT_SUPPORTED Service_PrepaymentType = 3
)

var Service_PrepaymentType_name = map[int32]string{
	0: "PREPAYMENT_TYPE_UNSPECIFIED",
	1: "REQUIRED",
	2: "OPTIONAL",
	3: "NOT_SUPPORTED",
}

var Service_PrepaymentType_value = map[string]int32{
	"PREPAYMENT_TYPE_UNSPECIFIED": 0,
	"REQUIRED":                    1,
	"OPTIONAL":                    2,
	"NOT_SUPPORTED":               3,
}

func (x Service_PrepaymentType) String() string {
	return proto.EnumName(Service_PrepaymentType_name, int32(x))
}

func (Service_PrepaymentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{17, 0}
}

type Service_ServiceType int32

const (
	Service_SERVICE_TYPE_UNSPECIFIED        Service_ServiceType = 0
	Service_SERVICE_TYPE_DINING_RESERVATION Service_ServiceType = 1
	Service_SERVICE_TYPE_FOOD_ORDERING      Service_ServiceType = 2
	Service_SERVICE_TYPE_EVENT_TICKET       Service_ServiceType = 3
	Service_SERVICE_TYPE_TRIP_TOUR          Service_ServiceType = 4
	// Service that provides appointments or classes. Recommended for (1) health
	// and fitness, (2) spa and beauty, and (3) financial consults and
	// evaluations services. Please see the supported service types:
	// https://developers.google.com/maps-booking/guides/end-to-end-integration/overview
	Service_SERVICE_TYPE_APPOINTMENT Service_ServiceType = 5
)

var Service_ServiceType_name = map[int32]string{
	0: "SERVICE_TYPE_UNSPECIFIED",
	1: "SERVICE_TYPE_DINING_RESERVATION",
	2: "SERVICE_TYPE_FOOD_ORDERING",
	3: "SERVICE_TYPE_EVENT_TICKET",
	4: "SERVICE_TYPE_TRIP_TOUR",
	5: "SERVICE_TYPE_APPOINTMENT",
}

var Service_ServiceType_value = map[string]int32{
	"SERVICE_TYPE_UNSPECIFIED":        0,
	"SERVICE_TYPE_DINING_RESERVATION": 1,
	"SERVICE_TYPE_FOOD_ORDERING":      2,
	"SERVICE_TYPE_EVENT_TICKET":       3,
	"SERVICE_TYPE_TRIP_TOUR":          4,
	"SERVICE_TYPE_APPOINTMENT":        5,
}

func (x Service_ServiceType) String() string {
	return proto.EnumName(Service_ServiceType_name, int32(x))
}

func (Service_ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{17, 1}
}

// The admission policy of this service.
type SchedulingRules_AdmissionPolicy int32

const (
	// Unused.
	SchedulingRules_ADMISSION_POLICY_UNSPECIFIED SchedulingRules_AdmissionPolicy = 0
	// Customers are required to be present at the start time of the
	// availability slot, and the service is expected to finish at the
	// end time of the slot.
	// Examples of TIME_STRICT use cases:
	//   * A tour that starts at 9am that requires all attendees to arrive
	//     at the start time, and returns at around 12pm.
	//   * A haircut reservation at 3pm on Saturday that will take approximately
	//   30 minutes.
	//   * A fitness class from 6pm to 8pm.
	SchedulingRules_TIME_STRICT SchedulingRules_AdmissionPolicy = 1
	// Customers can arrive at any time between the start and end time of the
	// availability slot to use this booking.
	//
	// Examples of TIME_FLEXIBLE use cases:
	//   * A museum ticket that can be used during any time on the purchase
	//     date.
	//   * An afternoon admission to an amusement park that can be used from
	//     12pm to 9pm.
	SchedulingRules_TIME_FLEXIBLE SchedulingRules_AdmissionPolicy = 2
	// Customers need to arrive at the merchant at the start time of the
	// availability slot but can leave any time they want.
	//
	// For example, in the museum admission scenario, a timed entry ticket
	// for 10am requires the user to be at the museum at 10am. The start time of
	// availability slots for this service represents the designated entry
	// time. The end time, however, is used solely as a key to identify the
	// availability slot for booking.
	SchedulingRules_TIMED_ENTRY_WITH_FLEXIBLE_DURATION SchedulingRules_AdmissionPolicy = 3
)

var SchedulingRules_AdmissionPolicy_name = map[int32]string{
	0: "ADMISSION_POLICY_UNSPECIFIED",
	1: "TIME_STRICT",
	2: "TIME_FLEXIBLE",
	3: "TIMED_ENTRY_WITH_FLEXIBLE_DURATION",
}

var SchedulingRules_AdmissionPolicy_value = map[string]int32{
	"ADMISSION_POLICY_UNSPECIFIED":       0,
	"TIME_STRICT":                        1,
	"TIME_FLEXIBLE":                      2,
	"TIMED_ENTRY_WITH_FLEXIBLE_DURATION": 3,
}

func (x SchedulingRules_AdmissionPolicy) String() string {
	return proto.EnumName(SchedulingRules_AdmissionPolicy_name, int32(x))
}

func (SchedulingRules_AdmissionPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{21, 0}
}

// Enum to indicate the type of field.
type ServiceIntakeFormField_FieldType int32

const (
	// Fields of unspecified or unknown type will be ignored.
	ServiceIntakeFormField_FIELD_TYPE_UNSPECIFIED ServiceIntakeFormField_FieldType = 0
	// A one-line input field for text.
	ServiceIntakeFormField_SHORT_ANSWER ServiceIntakeFormField_FieldType = 1
	// A multi-line input field for text.
	ServiceIntakeFormField_PARAGRAPH ServiceIntakeFormField_FieldType = 2
	// A set of radio buttons that requires one choice from many options.
	ServiceIntakeFormField_MULTIPLE_CHOICE ServiceIntakeFormField_FieldType = 3
	// One or more enumerated items with checkboxes.
	ServiceIntakeFormField_CHECKBOXES ServiceIntakeFormField_FieldType = 4
	// A selection from a dropdown.
	ServiceIntakeFormField_DROPDOWN ServiceIntakeFormField_FieldType = 5
	// A yes/no button.
	ServiceIntakeFormField_BOOLEAN ServiceIntakeFormField_FieldType = 6
	// A search widget that supports finding matched location given user input
	// from provided location list.
	ServiceIntakeFormField_LOCATION_SEARCH ServiceIntakeFormField_FieldType = 7
)

var ServiceIntakeFormField_FieldType_name = map[int32]string{
	0: "FIELD_TYPE_UNSPECIFIED",
	1: "SHORT_ANSWER",
	2: "PARAGRAPH",
	3: "MULTIPLE_CHOICE",
	4: "CHECKBOXES",
	5: "DROPDOWN",
	6: "BOOLEAN",
	7: "LOCATION_SEARCH",
}

var ServiceIntakeFormField_FieldType_value = map[string]int32{
	"FIELD_TYPE_UNSPECIFIED": 0,
	"SHORT_ANSWER":           1,
	"PARAGRAPH":              2,
	"MULTIPLE_CHOICE":        3,
	"CHECKBOXES":             4,
	"DROPDOWN":               5,
	"BOOLEAN":                6,
	"LOCATION_SEARCH":        7,
}

func (x ServiceIntakeFormField_FieldType) String() string {
	return proto.EnumName(ServiceIntakeFormField_FieldType_name, int32(x))
}

func (ServiceIntakeFormField_FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{22, 0}
}

// Enum to indicate the type of this media source. Only photos are supported.
// Please reach out to the Reserve with Google team if other media beyond
// photos need to be supported.
type RelatedMedia_MediaType int32

const (
	// Unused.
	RelatedMedia_TYPE_UNSPECIFIED RelatedMedia_MediaType = 0
	// Indicates the media provided by the url is a photo.
	RelatedMedia_PHOTO RelatedMedia_MediaType = 1
)

var RelatedMedia_MediaType_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "PHOTO",
}

var RelatedMedia_MediaType_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"PHOTO":            1,
}

func (x RelatedMedia_MediaType) String() string {
	return proto.EnumName(RelatedMedia_MediaType_name, int32(x))
}

func (RelatedMedia_MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{32, 0}
}

// A subset of event categories for which we customize the product experience.
// Note: not intended to be a universal ontology of events.
type TicketingVerticalSpecificData_EventCategory int32

const (
	// Not specified. Do not use.
	TicketingVerticalSpecificData_EVENT_CATEGORY_UNSPECIFIED TicketingVerticalSpecificData_EventCategory = 0
	// Concerts.
	TicketingVerticalSpecificData_EVENT_CATEGORY_CONCERT TicketingVerticalSpecificData_EventCategory = 1
	// Sports events.
	TicketingVerticalSpecificData_EVENT_CATEGORY_SPORTS TicketingVerticalSpecificData_EventCategory = 2
	// Theatre events.
	TicketingVerticalSpecificData_EVENT_CATEGORY_THEATRE TicketingVerticalSpecificData_EventCategory = 3
	// Exhibits.
	TicketingVerticalSpecificData_EVENT_CATEGORY_EXHIBITS TicketingVerticalSpecificData_EventCategory = 4
	// Workshops and Classes.
	TicketingVerticalSpecificData_EVENT_CATEGORY_WORKSHOPS_AND_CLASSES TicketingVerticalSpecificData_EventCategory = 5
)

var TicketingVerticalSpecificData_EventCategory_name = map[int32]string{
	0: "EVENT_CATEGORY_UNSPECIFIED",
	1: "EVENT_CATEGORY_CONCERT",
	2: "EVENT_CATEGORY_SPORTS",
	3: "EVENT_CATEGORY_THEATRE",
	4: "EVENT_CATEGORY_EXHIBITS",
	5: "EVENT_CATEGORY_WORKSHOPS_AND_CLASSES",
}

var TicketingVerticalSpecificData_EventCategory_value = map[string]int32{
	"EVENT_CATEGORY_UNSPECIFIED":           0,
	"EVENT_CATEGORY_CONCERT":               1,
	"EVENT_CATEGORY_SPORTS":                2,
	"EVENT_CATEGORY_THEATRE":               3,
	"EVENT_CATEGORY_EXHIBITS":              4,
	"EVENT_CATEGORY_WORKSHOPS_AND_CLASSES": 5,
}

func (x TicketingVerticalSpecificData_EventCategory) String() string {
	return proto.EnumName(TicketingVerticalSpecificData_EventCategory_name, int32(x))
}

func (TicketingVerticalSpecificData_EventCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{35, 0}
}

// The type of the entity. Note: not intended to be a universal ontology.
type TicketingVerticalSpecificData_Entity_EntityType int32

const (
	// Not specified. Do not use.
	TicketingVerticalSpecificData_Entity_ENTITY_TYPE_UNSPECIFIED TicketingVerticalSpecificData_Entity_EntityType = 0
	// The entity represents the artist or group performing at a
	// concert or a show. Only applicable when event category is CONCERT or
	// THEATRE.
	TicketingVerticalSpecificData_Entity_ENTITY_TYPE_PERFORMER TicketingVerticalSpecificData_Entity_EntityType = 1
	// The entity represents the sports team or player at the event. Only
	// applicable when event category is SPORTS.
	TicketingVerticalSpecificData_Entity_ENTITY_TYPE_PLAYER TicketingVerticalSpecificData_Entity_EntityType = 2
	// The entity represents the tour that this event belongs to. Only
	// applicable when event category is CONCERT.
	TicketingVerticalSpecificData_Entity_ENTITY_TYPE_CONCERT_TOUR TicketingVerticalSpecificData_Entity_EntityType = 3
	// The entity represents a sports tournament that this event
	// belongs to. Only applicable when event category is SPORTS.
	TicketingVerticalSpecificData_Entity_ENTITY_TYPE_SPORTS_SERIES TicketingVerticalSpecificData_Entity_EntityType = 4
	// The entity represents the type of play (e.g., musical, comedy, ballet,
	// etc.) performed at the event. Only applicable when event category is
	// THEATRE.
	TicketingVerticalSpecificData_Entity_ENTITY_TYPE_PLAY TicketingVerticalSpecificData_Entity_EntityType = 5
)

var TicketingVerticalSpecificData_Entity_EntityType_name = map[int32]string{
	0: "ENTITY_TYPE_UNSPECIFIED",
	1: "ENTITY_TYPE_PERFORMER",
	2: "ENTITY_TYPE_PLAYER",
	3: "ENTITY_TYPE_CONCERT_TOUR",
	4: "ENTITY_TYPE_SPORTS_SERIES",
	5: "ENTITY_TYPE_PLAY",
}

var TicketingVerticalSpecificData_Entity_EntityType_value = map[string]int32{
	"ENTITY_TYPE_UNSPECIFIED":   0,
	"ENTITY_TYPE_PERFORMER":     1,
	"ENTITY_TYPE_PLAYER":        2,
	"ENTITY_TYPE_CONCERT_TOUR":  3,
	"ENTITY_TYPE_SPORTS_SERIES": 4,
	"ENTITY_TYPE_PLAY":          5,
}

func (x TicketingVerticalSpecificData_Entity_EntityType) String() string {
	return proto.EnumName(TicketingVerticalSpecificData_Entity_EntityType_name, int32(x))
}

func (TicketingVerticalSpecificData_Entity_EntityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{35, 1, 0}
}

// The role of the entity in the event.
type TicketingVerticalSpecificData_Entity_EntityRole int32

const (
	// Not specified.
	TicketingVerticalSpecificData_Entity_ENTITY_ROLE_UNSPECIFIED TicketingVerticalSpecificData_Entity_EntityRole = 0
	// The entity represents a headliner or leading performer at the event.
	TicketingVerticalSpecificData_Entity_ENTITY_ROLE_HEADLINER TicketingVerticalSpecificData_Entity_EntityRole = 1
	// The entity represents a supporting performer at the event.
	TicketingVerticalSpecificData_Entity_ENTITY_ROLE_SUPPORTER TicketingVerticalSpecificData_Entity_EntityRole = 2
	// The entity represents the home team at the (sports) event.
	TicketingVerticalSpecificData_Entity_ENTITY_ROLE_HOME_TEAM TicketingVerticalSpecificData_Entity_EntityRole = 3
	// The entity represents the away team at the (sports) event.
	TicketingVerticalSpecificData_Entity_ENTITY_ROLE_AWAY_TEAM TicketingVerticalSpecificData_Entity_EntityRole = 4
)

var TicketingVerticalSpecificData_Entity_EntityRole_name = map[int32]string{
	0: "ENTITY_ROLE_UNSPECIFIED",
	1: "ENTITY_ROLE_HEADLINER",
	2: "ENTITY_ROLE_SUPPORTER",
	3: "ENTITY_ROLE_HOME_TEAM",
	4: "ENTITY_ROLE_AWAY_TEAM",
}

var TicketingVerticalSpecificData_Entity_EntityRole_value = map[string]int32{
	"ENTITY_ROLE_UNSPECIFIED": 0,
	"ENTITY_ROLE_HEADLINER":   1,
	"ENTITY_ROLE_SUPPORTER":   2,
	"ENTITY_ROLE_HOME_TEAM":   3,
	"ENTITY_ROLE_AWAY_TEAM":   4,
}

func (x TicketingVerticalSpecificData_Entity_EntityRole) String() string {
	return proto.EnumName(TicketingVerticalSpecificData_Entity_EntityRole_name, int32(x))
}

func (TicketingVerticalSpecificData_Entity_EntityRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{35, 1, 1}
}

// The confirmation modes used when booking availabilities.
type Availability_ConfirmationMode int32

const (
	// The confirmation mode was not specified.
	// Synchronous confirmation will be assumed.
	Availability_CONFIRMATION_MODE_UNSPECIFIED Availability_ConfirmationMode = 0
	// Bookings for this availability will be confirmed synchronously.
	Availability_CONFIRMATION_MODE_SYNCHRONOUS Availability_ConfirmationMode = 1
	// Bookings for this availability will be confirmed asynchronously.
	Availability_CONFIRMATION_MODE_ASYNCHRONOUS Availability_ConfirmationMode = 2
)

var Availability_ConfirmationMode_name = map[int32]string{
	0: "CONFIRMATION_MODE_UNSPECIFIED",
	1: "CONFIRMATION_MODE_SYNCHRONOUS",
	2: "CONFIRMATION_MODE_ASYNCHRONOUS",
}

var Availability_ConfirmationMode_value = map[string]int32{
	"CONFIRMATION_MODE_UNSPECIFIED":  0,
	"CONFIRMATION_MODE_SYNCHRONOUS":  1,
	"CONFIRMATION_MODE_ASYNCHRONOUS": 2,
}

func (x Availability_ConfirmationMode) String() string {
	return proto.EnumName(Availability_ConfirmationMode_name, int32(x))
}

func (Availability_ConfirmationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{40, 0}
}

type FeedMetadata struct {
	// Instructs us how to process the feed: either as a shard of a complete feed,
	// or as a shard of an incremental update. (required)
	ProcessingInstruction FeedMetadata_ProcessingInstruction `protobuf:"varint,1,opt,name=processing_instruction,json=processingInstruction,proto3,enum=main.FeedMetadata_ProcessingInstruction" json:"processing_instruction,omitempty"`
	// The current shard and total number of shards for this feed.
	//
	// Shard number is assumed to be zero-based.
	//
	// There does not need to be any relationship to the file name.
	//
	// Shards do not need to be transferred in order, and they may not be
	// processed in order. (both required)
	ShardNumber int32 `protobuf:"varint,2,opt,name=shard_number,json=shardNumber,proto3" json:"shard_number,omitempty"`
	TotalShards int32 `protobuf:"varint,3,opt,name=total_shards,json=totalShards,proto3" json:"total_shards,omitempty"`
	// An identifier that must be consistent across all shards in a feed.
	// This value must be globally unique across each feed type.
	//
	// This value ensures that complete feeds spanning multiple shards are
	// processed together correctly.
	//
	// Clients only need to set this value when the processing_instruction is set
	// to PROCESS_AS_COMPLETE and the feed spans multiple shards (defined by
	// total_shards).
	//
	// Feeds that span multiple shards must set this nonce to the same value.
	// (required if total shards > 1)
	Nonce uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The timestamp at which this feed shard was generated.
	//
	// In Unix time format (seconds since the epoch). (required)
	GenerationTimestamp  int64    `protobuf:"varint,4,opt,name=generation_timestamp,json=generationTimestamp,proto3" json:"generation_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedMetadata) Reset()         { *m = FeedMetadata{} }
func (m *FeedMetadata) String() string { return proto.CompactTextString(m) }
func (*FeedMetadata) ProtoMessage()    {}
func (*FeedMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{0}
}

func (m *FeedMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedMetadata.Unmarshal(m, b)
}
func (m *FeedMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedMetadata.Marshal(b, m, deterministic)
}
func (m *FeedMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedMetadata.Merge(m, src)
}
func (m *FeedMetadata) XXX_Size() int {
	return xxx_messageInfo_FeedMetadata.Size(m)
}
func (m *FeedMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_FeedMetadata proto.InternalMessageInfo

func (m *FeedMetadata) GetProcessingInstruction() FeedMetadata_ProcessingInstruction {
	if m != nil {
		return m.ProcessingInstruction
	}
	return FeedMetadata_PROCESS_UNKNOWN
}

func (m *FeedMetadata) GetShardNumber() int32 {
	if m != nil {
		return m.ShardNumber
	}
	return 0
}

func (m *FeedMetadata) GetTotalShards() int32 {
	if m != nil {
		return m.TotalShards
	}
	return 0
}

func (m *FeedMetadata) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *FeedMetadata) GetGenerationTimestamp() int64 {
	if m != nil {
		return m.GenerationTimestamp
	}
	return 0
}

type MerchantFeed struct {
	Metadata             *FeedMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Merchant             []*Merchant   `protobuf:"bytes,2,rep,name=merchant,proto3" json:"merchant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MerchantFeed) Reset()         { *m = MerchantFeed{} }
func (m *MerchantFeed) String() string { return proto.CompactTextString(m) }
func (*MerchantFeed) ProtoMessage()    {}
func (*MerchantFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{1}
}

func (m *MerchantFeed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerchantFeed.Unmarshal(m, b)
}
func (m *MerchantFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerchantFeed.Marshal(b, m, deterministic)
}
func (m *MerchantFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantFeed.Merge(m, src)
}
func (m *MerchantFeed) XXX_Size() int {
	return xxx_messageInfo_MerchantFeed.Size(m)
}
func (m *MerchantFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantFeed proto.InternalMessageInfo

func (m *MerchantFeed) GetMetadata() *FeedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MerchantFeed) GetMerchant() []*Merchant {
	if m != nil {
		return m.Merchant
	}
	return nil
}

// Info about a merchant that is on the aggregator's platform.
// A merchant feed should be a list of this message.
type Merchant struct {
	// An opaque string that uniquely identifies a merchant.
	// Strongly recommended to only include URL-safe characters. (required)
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// The name, telephone, url and geo are used to support matching partner
	// inventory with merchants already present on Google Maps. This information
	// will not be displayed.
	//
	// The name of the merchant. (required)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The contact telephone number of the merchant including its country and area
	// codes, e.g. +14567891234. Highly recommended. (optional)
	Telephone string `protobuf:"bytes,3,opt,name=telephone,proto3" json:"telephone,omitempty"`
	// The url of the merchant's public website. Highly recommended. (optional)
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// The Geo info of the merchant, including latitude, longitude, and address.
	// (required)
	Geo *GeoCoordinates `protobuf:"bytes,5,opt,name=geo,proto3" json:"geo,omitempty"`
	// The category of the business in aggregator's platform. (required)
	// See https://developers.google.com/places/supported_types for possible
	// categories.
	Category string `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	// This field is deprecated.
	NumBookings_30D int64 `protobuf:"varint,7,opt,name=num_bookings_30d,json=numBookings30d,proto3" json:"num_bookings_30d,omitempty"` // Deprecated: Do not use.
	// This field is deprecated, please use tax_rate instead.
	TaxRateBasisPoints uint32 `protobuf:"varint,8,opt,name=tax_rate_basis_points,json=taxRateBasisPoints,proto3" json:"tax_rate_basis_points,omitempty"` // Deprecated: Do not use.
	// The merchant's tax rate. If present this field overrides the deprecated
	// tax_rate_basis_points field. An empty message (i.e. tax_rate { }) will
	// reset the applied tax rate to zero.
	//
	// This field is required for payments integration. (optional)
	TaxRate *TaxRate `protobuf:"bytes,9,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	// Restrictions to the payment methods this merchant accepts. We assume no
	// restrictions exist if this field is not set. (optional)
	PaymentRestrictions *PaymentRestrictions `protobuf:"bytes,10,opt,name=payment_restrictions,json=paymentRestrictions,proto3" json:"payment_restrictions,omitempty"`
	// Payment options available for this merchant. Services under this merchant
	// will be able to individually limit the payment options they allow.
	// (optional)
	PaymentOption []*PaymentOption `protobuf:"bytes,11,rep,name=payment_option,json=paymentOption,proto3" json:"payment_option,omitempty"`
	// Configuration for a tokenized payment processor, if the merchant has
	// support for it. (optional)
	//
	// Deprecated. See the documentation for tokenization_config for current
	// methodology.
	PaymentProcessorConfig *PaymentProcessorConfig `protobuf:"bytes,12,opt,name=payment_processor_config,json=paymentProcessorConfig,proto3" json:"payment_processor_config,omitempty"` // Deprecated: Do not use.
	// Configuration for a tokenized payment processor, if the merchant has
	// support for it.
	TokenizationConfig *TokenizationConfig `protobuf:"bytes,15,opt,name=tokenization_config,json=tokenizationConfig,proto3" json:"tokenization_config,omitempty"`
	// The specific merchant's Terms and Conditions displayed to the user when a
	// service is being booked through Reserve with Google.
	// In addition to these the aggregator partner's Terms and Conditions are
	// always displayed to the user and must not be provided here. (optional)
	Terms *Terms `protobuf:"bytes,13,opt,name=terms,proto3" json:"terms,omitempty"`
	// An opaque string that identifies the consumer-facing brand to use when
	// displaying partner attribution. This field allows partners with multiple
	// consumer-facing brands to provide merchants for all brands within the same
	// feed.
	//
	// A brand consists of consumer-facing properties like the name, logo, Terms
	// of Service, and Privacy Policy.
	//
	// If there is only one consumer-facing partner brand, this field does not
	// need to be set and can be ignored.
	//
	// If the partner...
	//
	//   Does not have multiple consumer-facing brands?
	//     --> Ignore this field
	//
	//   Has Multiple Brands that are configured?
	//
	//       If this field is set
	//         --> Associated consumer-facing brand attribution is used
	//
	//       If this field is unset or the empty string
	//         --> Default consumer-facing brand attribution is used
	//
	// Careful Note: most partners do not need to set this field. If a partner
	// wishes to use this field, they must contact us first to configure separate
	// brands, including the default brand.
	BrandId string `protobuf:"bytes,14,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// Hints to help Google match a merchant to a place on Google Maps.
	// Note: Typically, this field does not need to be set, as Google will match
	// merchants to places on Google Maps using the information provided above.
	// (optional)
	MatchingHints *MerchantMatchingHints `protobuf:"bytes,16,opt,name=matching_hints,json=matchingHints,proto3" json:"matching_hints,omitempty"`
	// Definitions for any service attributes used to describe the Services for
	// this Merchant. (optional)
	ServiceAttribute     []*ServiceAttribute `protobuf:"bytes,17,rep,name=service_attribute,json=serviceAttribute,proto3" json:"service_attribute,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Merchant) Reset()         { *m = Merchant{} }
func (m *Merchant) String() string { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()    {}
func (*Merchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{2}
}

func (m *Merchant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Merchant.Unmarshal(m, b)
}
func (m *Merchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Merchant.Marshal(b, m, deterministic)
}
func (m *Merchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merchant.Merge(m, src)
}
func (m *Merchant) XXX_Size() int {
	return xxx_messageInfo_Merchant.Size(m)
}
func (m *Merchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Merchant.DiscardUnknown(m)
}

var xxx_messageInfo_Merchant proto.InternalMessageInfo

func (m *Merchant) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Merchant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Merchant) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *Merchant) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Merchant) GetGeo() *GeoCoordinates {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Merchant) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

// Deprecated: Do not use.
func (m *Merchant) GetNumBookings_30D() int64 {
	if m != nil {
		return m.NumBookings_30D
	}
	return 0
}

// Deprecated: Do not use.
func (m *Merchant) GetTaxRateBasisPoints() uint32 {
	if m != nil {
		return m.TaxRateBasisPoints
	}
	return 0
}

func (m *Merchant) GetTaxRate() *TaxRate {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *Merchant) GetPaymentRestrictions() *PaymentRestrictions {
	if m != nil {
		return m.PaymentRestrictions
	}
	return nil
}

func (m *Merchant) GetPaymentOption() []*PaymentOption {
	if m != nil {
		return m.PaymentOption
	}
	return nil
}

// Deprecated: Do not use.
func (m *Merchant) GetPaymentProcessorConfig() *PaymentProcessorConfig {
	if m != nil {
		return m.PaymentProcessorConfig
	}
	return nil
}

func (m *Merchant) GetTokenizationConfig() *TokenizationConfig {
	if m != nil {
		return m.TokenizationConfig
	}
	return nil
}

func (m *Merchant) GetTerms() *Terms {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *Merchant) GetBrandId() string {
	if m != nil {
		return m.BrandId
	}
	return ""
}

func (m *Merchant) GetMatchingHints() *MerchantMatchingHints {
	if m != nil {
		return m.MatchingHints
	}
	return nil
}

func (m *Merchant) GetServiceAttribute() []*ServiceAttribute {
	if m != nil {
		return m.ServiceAttribute
	}
	return nil
}

// The Geo data of a location, including latitude, longitude, and address.
// At least one of [lat/lng or address] should be provided (or both).
type GeoCoordinates struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Address for a location, could either be structured or unstructured.
	//
	// Types that are valid to be assigned to Addresses:
	//	*GeoCoordinates_Address
	//	*GeoCoordinates_UnstructuredAddress
	Addresses            isGeoCoordinates_Addresses `protobuf_oneof:"addresses"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GeoCoordinates) Reset()         { *m = GeoCoordinates{} }
func (m *GeoCoordinates) String() string { return proto.CompactTextString(m) }
func (*GeoCoordinates) ProtoMessage()    {}
func (*GeoCoordinates) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{3}
}

func (m *GeoCoordinates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoCoordinates.Unmarshal(m, b)
}
func (m *GeoCoordinates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoCoordinates.Marshal(b, m, deterministic)
}
func (m *GeoCoordinates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoCoordinates.Merge(m, src)
}
func (m *GeoCoordinates) XXX_Size() int {
	return xxx_messageInfo_GeoCoordinates.Size(m)
}
func (m *GeoCoordinates) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoCoordinates.DiscardUnknown(m)
}

var xxx_messageInfo_GeoCoordinates proto.InternalMessageInfo

func (m *GeoCoordinates) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoCoordinates) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type isGeoCoordinates_Addresses interface {
	isGeoCoordinates_Addresses()
}

type GeoCoordinates_Address struct {
	Address *PostalAddress `protobuf:"bytes,3,opt,name=address,proto3,oneof"`
}

type GeoCoordinates_UnstructuredAddress struct {
	UnstructuredAddress string `protobuf:"bytes,4,opt,name=unstructured_address,json=unstructuredAddress,proto3,oneof"`
}

func (*GeoCoordinates_Address) isGeoCoordinates_Addresses() {}

func (*GeoCoordinates_UnstructuredAddress) isGeoCoordinates_Addresses() {}

func (m *GeoCoordinates) GetAddresses() isGeoCoordinates_Addresses {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *GeoCoordinates) GetAddress() *PostalAddress {
	if x, ok := m.GetAddresses().(*GeoCoordinates_Address); ok {
		return x.Address
	}
	return nil
}

func (m *GeoCoordinates) GetUnstructuredAddress() string {
	if x, ok := m.GetAddresses().(*GeoCoordinates_UnstructuredAddress); ok {
		return x.UnstructuredAddress
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GeoCoordinates) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GeoCoordinates_Address)(nil),
		(*GeoCoordinates_UnstructuredAddress)(nil),
	}
}

// The postal address for a merchant.
type PostalAddress struct {
	// The country, e.g. "US". (required)
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// The locality/city, e.g. "Mountain View". (required)
	Locality string `protobuf:"bytes,2,opt,name=locality,proto3" json:"locality,omitempty"`
	// The region/state/province, e.g. "CA". This field is only required in
	// countries where region is commonly a part of the address. (optional)
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The postal code, e.g. "94043". (required)
	PostalCode string `protobuf:"bytes,4,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// The street address, e.g. "1600 Amphitheatre Pkwy". (required)
	StreetAddress        string   `protobuf:"bytes,5,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostalAddress) Reset()         { *m = PostalAddress{} }
func (m *PostalAddress) String() string { return proto.CompactTextString(m) }
func (*PostalAddress) ProtoMessage()    {}
func (*PostalAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{4}
}

func (m *PostalAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostalAddress.Unmarshal(m, b)
}
func (m *PostalAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostalAddress.Marshal(b, m, deterministic)
}
func (m *PostalAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostalAddress.Merge(m, src)
}
func (m *PostalAddress) XXX_Size() int {
	return xxx_messageInfo_PostalAddress.Size(m)
}
func (m *PostalAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_PostalAddress.DiscardUnknown(m)
}

var xxx_messageInfo_PostalAddress proto.InternalMessageInfo

func (m *PostalAddress) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *PostalAddress) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *PostalAddress) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PostalAddress) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *PostalAddress) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

// A tax rate applied when charging the user for a service, and which can be set
// on either a per merchant, or per service basis.
type TaxRate struct {
	// A tax rate in millionths of one percent, effectively giving 6 decimals of
	// precision. For example, if the tax rate is 7.253%, this field should be set
	// to 7253000.
	//
	// If this field is left unset or set to 0, the total price charged to a user
	// for any service provided by this merchant is the exact price specified by
	// Service.price. The service price is assumed to be exempt from or already
	// inclusive of applicable taxes. Taxes will not be shown to the user as a
	// separate line item.
	//
	// If this field is set to any nonzero value, the total price charged to a
	// user for any service provided by this merchant will include the service
	// price plus the tax assessed using the tax rate provided here. Fractions of
	// the smallest currency unit (for example, fractions of one cent) will be
	// rounded using nearest even rounding. Taxes will be shown to the user as a
	// separate line item. (required)
	MicroPercent         int32    `protobuf:"varint,1,opt,name=micro_percent,json=microPercent,proto3" json:"micro_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaxRate) Reset()         { *m = TaxRate{} }
func (m *TaxRate) String() string { return proto.CompactTextString(m) }
func (*TaxRate) ProtoMessage()    {}
func (*TaxRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{5}
}

func (m *TaxRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaxRate.Unmarshal(m, b)
}
func (m *TaxRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaxRate.Marshal(b, m, deterministic)
}
func (m *TaxRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaxRate.Merge(m, src)
}
func (m *TaxRate) XXX_Size() int {
	return xxx_messageInfo_TaxRate.Size(m)
}
func (m *TaxRate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaxRate.DiscardUnknown(m)
}

var xxx_messageInfo_TaxRate proto.InternalMessageInfo

func (m *TaxRate) GetMicroPercent() int32 {
	if m != nil {
		return m.MicroPercent
	}
	return 0
}

// Restrictions to the credit card types this merchant accepts.
type CreditCardRestrictions struct {
	// A list of supported credit cards. No credit cards are supported if empty.
	// (optional)
	CreditCardType       []CreditCardRestrictions_CreditCardType `protobuf:"varint,1,rep,packed,name=credit_card_type,json=creditCardType,proto3,enum=main.CreditCardRestrictions_CreditCardType" json:"credit_card_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CreditCardRestrictions) Reset()         { *m = CreditCardRestrictions{} }
func (m *CreditCardRestrictions) String() string { return proto.CompactTextString(m) }
func (*CreditCardRestrictions) ProtoMessage()    {}
func (*CreditCardRestrictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{6}
}

func (m *CreditCardRestrictions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditCardRestrictions.Unmarshal(m, b)
}
func (m *CreditCardRestrictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditCardRestrictions.Marshal(b, m, deterministic)
}
func (m *CreditCardRestrictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditCardRestrictions.Merge(m, src)
}
func (m *CreditCardRestrictions) XXX_Size() int {
	return xxx_messageInfo_CreditCardRestrictions.Size(m)
}
func (m *CreditCardRestrictions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditCardRestrictions.DiscardUnknown(m)
}

var xxx_messageInfo_CreditCardRestrictions proto.InternalMessageInfo

func (m *CreditCardRestrictions) GetCreditCardType() []CreditCardRestrictions_CreditCardType {
	if m != nil {
		return m.CreditCardType
	}
	return nil
}

// Restrictions to the payment methods this merchant accepts.
type PaymentRestrictions struct {
	// Restrictions to the credit cards this merchant accepts. We assume all
	// credit cards are accepted if this field is not set.
	// Note that the list of cards supported by CreditCardType will grow over
	// time, meaning that leaving this empty subjects a configuration to future
	// changes. (optional)
	CreditCardRestrictions *CreditCardRestrictions `protobuf:"bytes,1,opt,name=credit_card_restrictions,json=creditCardRestrictions,proto3" json:"credit_card_restrictions,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *PaymentRestrictions) Reset()         { *m = PaymentRestrictions{} }
func (m *PaymentRestrictions) String() string { return proto.CompactTextString(m) }
func (*PaymentRestrictions) ProtoMessage()    {}
func (*PaymentRestrictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{7}
}

func (m *PaymentRestrictions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentRestrictions.Unmarshal(m, b)
}
func (m *PaymentRestrictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentRestrictions.Marshal(b, m, deterministic)
}
func (m *PaymentRestrictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRestrictions.Merge(m, src)
}
func (m *PaymentRestrictions) XXX_Size() int {
	return xxx_messageInfo_PaymentRestrictions.Size(m)
}
func (m *PaymentRestrictions) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRestrictions.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRestrictions proto.InternalMessageInfo

func (m *PaymentRestrictions) GetCreditCardRestrictions() *CreditCardRestrictions {
	if m != nil {
		return m.CreditCardRestrictions
	}
	return nil
}

// A payment option, which can be used to pay for services provided by a
// merchant. Payment options can be shared among multiple merchants
// (e.g. merchants belonging to the same chain).
type PaymentOption struct {
	// An opaque string from an aggregator partner to identify a payment option.
	//
	// This id is global to the whole aggregator, and re-using a value across
	// multiple merchants will allow a user to pay with the corresponding payment
	// option across those merchants.
	//
	// When re-using an id across multiple merchants, updating any value for a
	// payment option under one merchant will also update any other payment option
	// with the same id, under a different merchant. As such, it's a best practice
	// to have all payment options sharing the same id, always be updated to
	// identical values, to avoid any possibility of nondeterministic behavior.
	//
	// Do NOT confuse it with the internal payment option id. (required)
	PaymentOptionId string `protobuf:"bytes,1,opt,name=payment_option_id,json=paymentOptionId,proto3" json:"payment_option_id,omitempty"`
	// The name of the payment option. This can be user visible. (required)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the payment option. This can be user visible. (optional)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The price of the payment option. (required)
	Price *Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// The tax rate for this payment option. If present this field overrides the
	// tax_rate field present in the Merchant or Service. An empty message
	// (i.e. tax_rate { }) will reset the applied tax rate to zero. (optional)
	TaxRate *TaxRate `protobuf:"bytes,5,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	// The type of this payment option. Single-use for drop-ins, multi-use for
	// packs, and unlimited for memberships. (required)
	PaymentOptionType PaymentOption_PaymentOptionType `protobuf:"varint,6,opt,name=payment_option_type,json=paymentOptionType,proto3,enum=main.PaymentOption_PaymentOptionType" json:"payment_option_type,omitempty"`
	// How many sessions this payment option can be used for. Valid only for
	// multi-session / packs, where the value should be > 1.
	// (required if payment_option_type is PAYMENT_OPTION_MULTI_USE)
	SessionCount int64 `protobuf:"varint,7,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
	// The payment option can be purchased within this interval. (optional)
	PurchaseInterval *TimeRange `protobuf:"bytes,8,opt,name=purchase_interval,json=purchaseInterval,proto3" json:"purchase_interval,omitempty"`
	// The payment option can be used within this interval (e.g. special price
	// for January 2017).
	// If present, this overrides valid_duration_sec and activation_type.
	// (optional)
	ValidInterval *TimeRange `protobuf:"bytes,9,opt,name=valid_interval,json=validInterval,proto3" json:"valid_interval,omitempty"`
	// Duration of the payment option validity (e.g. 30 day membership).
	// (optional)
	ValidDurationSec int64 `protobuf:"varint,10,opt,name=valid_duration_sec,json=validDurationSec,proto3" json:"valid_duration_sec,omitempty"`
	// Defines how the validity start date is determined for this payment option.
	// (required)
	ActivationType PaymentOption_ActivationType `protobuf:"varint,11,opt,name=activation_type,json=activationType,proto3,enum=main.PaymentOption_ActivationType" json:"activation_type,omitempty"`
	// Restricts the users eligible to purchase this payment option. Can be used
	// to restrict a promotional payment option to a subset of users. If not set,
	// all users are eligible. (optional)
	UserRestriction      *UserPurchaseRestriction `protobuf:"bytes,12,opt,name=user_restriction,json=userRestriction,proto3" json:"user_restriction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PaymentOption) Reset()         { *m = PaymentOption{} }
func (m *PaymentOption) String() string { return proto.CompactTextString(m) }
func (*PaymentOption) ProtoMessage()    {}
func (*PaymentOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{8}
}

func (m *PaymentOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentOption.Unmarshal(m, b)
}
func (m *PaymentOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentOption.Marshal(b, m, deterministic)
}
func (m *PaymentOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentOption.Merge(m, src)
}
func (m *PaymentOption) XXX_Size() int {
	return xxx_messageInfo_PaymentOption.Size(m)
}
func (m *PaymentOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentOption.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentOption proto.InternalMessageInfo

func (m *PaymentOption) GetPaymentOptionId() string {
	if m != nil {
		return m.PaymentOptionId
	}
	return ""
}

func (m *PaymentOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentOption) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PaymentOption) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *PaymentOption) GetTaxRate() *TaxRate {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *PaymentOption) GetPaymentOptionType() PaymentOption_PaymentOptionType {
	if m != nil {
		return m.PaymentOptionType
	}
	return PaymentOption_PAYMENT_OPTION_TYPE_UNSPECIFIED
}

func (m *PaymentOption) GetSessionCount() int64 {
	if m != nil {
		return m.SessionCount
	}
	return 0
}

func (m *PaymentOption) GetPurchaseInterval() *TimeRange {
	if m != nil {
		return m.PurchaseInterval
	}
	return nil
}

func (m *PaymentOption) GetValidInterval() *TimeRange {
	if m != nil {
		return m.ValidInterval
	}
	return nil
}

func (m *PaymentOption) GetValidDurationSec() int64 {
	if m != nil {
		return m.ValidDurationSec
	}
	return 0
}

func (m *PaymentOption) GetActivationType() PaymentOption_ActivationType {
	if m != nil {
		return m.ActivationType
	}
	return PaymentOption_ACTIVATION_TYPE_UNSPECIFIED
}

func (m *PaymentOption) GetUserRestriction() *UserPurchaseRestriction {
	if m != nil {
		return m.UserRestriction
	}
	return nil
}

type UserPurchaseRestriction struct {
	// A payment option that can only be purchased by users who have never
	// purchased from the same merchant before. (required if new_to_payment_option
	// is not set)
	NewToMerchant bool `protobuf:"varint,1,opt,name=new_to_merchant,json=newToMerchant,proto3" json:"new_to_merchant,omitempty"`
	// A payment option that can only be purchased by users who have never
	// purchased the same payment option before. (required if new_to_payment is
	// not set)
	NewToPaymentOption   bool     `protobuf:"varint,2,opt,name=new_to_payment_option,json=newToPaymentOption,proto3" json:"new_to_payment_option,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPurchaseRestriction) Reset()         { *m = UserPurchaseRestriction{} }
func (m *UserPurchaseRestriction) String() string { return proto.CompactTextString(m) }
func (*UserPurchaseRestriction) ProtoMessage()    {}
func (*UserPurchaseRestriction) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{9}
}

func (m *UserPurchaseRestriction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPurchaseRestriction.Unmarshal(m, b)
}
func (m *UserPurchaseRestriction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPurchaseRestriction.Marshal(b, m, deterministic)
}
func (m *UserPurchaseRestriction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPurchaseRestriction.Merge(m, src)
}
func (m *UserPurchaseRestriction) XXX_Size() int {
	return xxx_messageInfo_UserPurchaseRestriction.Size(m)
}
func (m *UserPurchaseRestriction) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPurchaseRestriction.DiscardUnknown(m)
}

var xxx_messageInfo_UserPurchaseRestriction proto.InternalMessageInfo

func (m *UserPurchaseRestriction) GetNewToMerchant() bool {
	if m != nil {
		return m.NewToMerchant
	}
	return false
}

func (m *UserPurchaseRestriction) GetNewToPaymentOption() bool {
	if m != nil {
		return m.NewToPaymentOption
	}
	return false
}

// A closed-open time range, i.e. [begin_sec, end_sec)
type TimeRange struct {
	// Seconds of UTC time since Unix epoch (required)
	BeginSec int64 `protobuf:"varint,1,opt,name=begin_sec,json=beginSec,proto3" json:"begin_sec,omitempty"`
	// Seconds of UTC time since Unix epoch (required)
	EndSec               int64    `protobuf:"varint,2,opt,name=end_sec,json=endSec,proto3" json:"end_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{10}
}

func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRange.Unmarshal(m, b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
}
func (m *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(m, src)
}
func (m *TimeRange) XXX_Size() int {
	return xxx_messageInfo_TimeRange.Size(m)
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetBeginSec() int64 {
	if m != nil {
		return m.BeginSec
	}
	return 0
}

func (m *TimeRange) GetEndSec() int64 {
	if m != nil {
		return m.EndSec
	}
	return 0
}

// A configuration for a payment processor, setup on a per Merchant basis.
type PaymentProcessorConfig struct {
	// Defines the payment processor partner this configuration applies to.
	// (required)
	Processor PaymentProcessorConfig_Processor `protobuf:"varint,1,opt,name=processor,proto3,enum=main.PaymentProcessorConfig_Processor" json:"processor,omitempty"`
	// The key used to identify this merchant with the payment processor.
	//
	// For Stripe, refer to: https://stripe.com/docs/dashboard#api-keys
	// For Braintree, refer to:
	// https://articles.braintreepayments.com/control-panel/important-gateway-credentials
	// (required)
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The API version number sent to the payment processor along with payment
	// requests. (required)
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentProcessorConfig) Reset()         { *m = PaymentProcessorConfig{} }
func (m *PaymentProcessorConfig) String() string { return proto.CompactTextString(m) }
func (*PaymentProcessorConfig) ProtoMessage()    {}
func (*PaymentProcessorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{11}
}

func (m *PaymentProcessorConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentProcessorConfig.Unmarshal(m, b)
}
func (m *PaymentProcessorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentProcessorConfig.Marshal(b, m, deterministic)
}
func (m *PaymentProcessorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentProcessorConfig.Merge(m, src)
}
func (m *PaymentProcessorConfig) XXX_Size() int {
	return xxx_messageInfo_PaymentProcessorConfig.Size(m)
}
func (m *PaymentProcessorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentProcessorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentProcessorConfig proto.InternalMessageInfo

func (m *PaymentProcessorConfig) GetProcessor() PaymentProcessorConfig_Processor {
	if m != nil {
		return m.Processor
	}
	return PaymentProcessorConfig_PROCESSOR_UNSPECIFIED
}

func (m *PaymentProcessorConfig) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *PaymentProcessorConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// A configuration for payment-processor tokenization, set up on a per-Merchant
// basis.
type TokenizationConfig struct {
	// A tokenization configuration will typically have one
	// tokenization_parameter whose key is "gateway" and whose value is the
	// name of the processor.
	//
	// The rest of the parameters are dependent on the processor.  See
	// documentation from Google Pay and your processor for further information.
	// https://developers.google.com/pay/api/web/object-reference# \
	//   PaymentMethodTokenizationSpecification
	// https://developers.google.com/pay/api/#participating-google-pay-processors
	//
	// Braintree example:
	// tokenization_parameter { key: "gateway" value: "braintree" }
	// tokenization_parameter { key: "braintree:apiVersion" value: "v1" }
	// tokenization_parameter { key: "braintree:sdkVersion" value: "2.30.0" }
	// tokenization_parameter { key: "braintree:merchantId" value: "abcdef" }
	// tokenization_parameter { key: "braintree:clientKey"
	//                          value: "production_xxx_yyy" }
	//
	// Stripe example:
	// tokenization_parameter { key: "gateway" value: "stripe" }
	// tokenization_parameter { key: "stripe:version" value: "2018-02-28" }
	// tokenization_parameter { key: "stripe:publishableKey" value: "pk_1234" }
	//
	// Adyen example:
	// tokenization_parameter { key: "gateway" value: "adyen" }
	// tokenization_parameter { key: "gatewayMerchantId" value: "yourId" }
	TokenizationParameter map[string]string `protobuf:"bytes,1,rep,name=tokenization_parameter,json=tokenizationParameter,proto3" json:"tokenization_parameter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Include in the payment token the user's billing information as entered into
	// Google Pay with their FOP (see above).
	BillingInformationFormat TokenizationConfig_BillingInformationFormat `protobuf:"varint,2,opt,name=billing_information_format,json=billingInformationFormat,proto3,enum=main.TokenizationConfig_BillingInformationFormat" json:"billing_information_format,omitempty"`
	// Name of the Merchant Of Record (MOR).  This user-visible name will be shown
	// in 3DS2 challenges.  In some cases, this is the Merchant, in others this is
	// the Aggregator.
	MerchantOfRecordName string `protobuf:"bytes,3,opt,name=merchant_of_record_name,json=merchantOfRecordName,proto3" json:"merchant_of_record_name,omitempty"`
	// Country where transaction will be processed, in ISO 3166-1 alpha-2 form.
	PaymentCountryCode string `protobuf:"bytes,4,opt,name=payment_country_code,json=paymentCountryCode,proto3" json:"payment_country_code,omitempty"`
	// Per-Card Network processing parameters.
	//
	// These are currently only required for PSD2
	// (https://en.wikipedia.org/wiki/Payment_Services_Directive)
	// processing when payment_country_code is a European country where PSD2 is in
	// effect.  They are also only currently required for VISA and
	// AMERICAN_EXPRESS.
	CardNetworkParameters []*TokenizationConfig_CardNetworkParameters `protobuf:"bytes,5,rep,name=card_network_parameters,json=cardNetworkParameters,proto3" json:"card_network_parameters,omitempty"`
	// Defines types of cardholder data that are accepted by the gateway.
	// If not specified, no restrictions are applied.
	//
	// Note that partners who use commercial gateways should leave this
	// empty unless their gateway provider has specified otherwise.  Restricting
	// allowed_auth_methods is most useful in the scenario that a partner
	// integrates with GPay as a gateway themselves.
	AllowedAuthMethods   []TokenizationConfig_AuthMethod `protobuf:"varint,6,rep,packed,name=allowed_auth_methods,json=allowedAuthMethods,proto3,enum=main.TokenizationConfig_AuthMethod" json:"allowed_auth_methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TokenizationConfig) Reset()         { *m = TokenizationConfig{} }
func (m *TokenizationConfig) String() string { return proto.CompactTextString(m) }
func (*TokenizationConfig) ProtoMessage()    {}
func (*TokenizationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{12}
}

func (m *TokenizationConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenizationConfig.Unmarshal(m, b)
}
func (m *TokenizationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenizationConfig.Marshal(b, m, deterministic)
}
func (m *TokenizationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizationConfig.Merge(m, src)
}
func (m *TokenizationConfig) XXX_Size() int {
	return xxx_messageInfo_TokenizationConfig.Size(m)
}
func (m *TokenizationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizationConfig proto.InternalMessageInfo

func (m *TokenizationConfig) GetTokenizationParameter() map[string]string {
	if m != nil {
		return m.TokenizationParameter
	}
	return nil
}

func (m *TokenizationConfig) GetBillingInformationFormat() TokenizationConfig_BillingInformationFormat {
	if m != nil {
		return m.BillingInformationFormat
	}
	return TokenizationConfig_BILLING_INFORMATION_FORMAT_UNSPECIFIED
}

func (m *TokenizationConfig) GetMerchantOfRecordName() string {
	if m != nil {
		return m.MerchantOfRecordName
	}
	return ""
}

func (m *TokenizationConfig) GetPaymentCountryCode() string {
	if m != nil {
		return m.PaymentCountryCode
	}
	return ""
}

func (m *TokenizationConfig) GetCardNetworkParameters() []*TokenizationConfig_CardNetworkParameters {
	if m != nil {
		return m.CardNetworkParameters
	}
	return nil
}

func (m *TokenizationConfig) GetAllowedAuthMethods() []TokenizationConfig_AuthMethod {
	if m != nil {
		return m.AllowedAuthMethods
	}
	return nil
}

// Per CardNetwork Processing information.
type TokenizationConfig_CardNetworkParameters struct {
	// The Card Network that these parameters are about
	CardNetwork CreditCardRestrictions_CreditCardType `protobuf:"varint,1,opt,name=card_network,json=cardNetwork,proto3,enum=main.CreditCardRestrictions_CreditCardType" json:"card_network,omitempty"`
	// The Bank Identification Number of the acquiring bank used for processing
	// of the card.
	//
	// If this value is not known to you, you should ask your acquirer or
	// merchant processor representative.
	AcquirerBin string `protobuf:"bytes,2,opt,name=acquirer_bin,json=acquirerBin,proto3" json:"acquirer_bin,omitempty"`
	// The merchant identifier assigned by the acquirer to the merchant for use
	// in transaction authorization (for Visa and American Express
	// transactions).
	//
	// If this value is not known to you, you should ask their acquirer or
	// merchant processor representative.
	AcquirerMerchantId   string   `protobuf:"bytes,3,opt,name=acquirer_merchant_id,json=acquirerMerchantId,proto3" json:"acquirer_merchant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenizationConfig_CardNetworkParameters) Reset() {
	*m = TokenizationConfig_CardNetworkParameters{}
}
func (m *TokenizationConfig_CardNetworkParameters) String() string { return proto.CompactTextString(m) }
func (*TokenizationConfig_CardNetworkParameters) ProtoMessage()    {}
func (*TokenizationConfig_CardNetworkParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{12, 1}
}

func (m *TokenizationConfig_CardNetworkParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenizationConfig_CardNetworkParameters.Unmarshal(m, b)
}
func (m *TokenizationConfig_CardNetworkParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenizationConfig_CardNetworkParameters.Marshal(b, m, deterministic)
}
func (m *TokenizationConfig_CardNetworkParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizationConfig_CardNetworkParameters.Merge(m, src)
}
func (m *TokenizationConfig_CardNetworkParameters) XXX_Size() int {
	return xxx_messageInfo_TokenizationConfig_CardNetworkParameters.Size(m)
}
func (m *TokenizationConfig_CardNetworkParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizationConfig_CardNetworkParameters.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizationConfig_CardNetworkParameters proto.InternalMessageInfo

func (m *TokenizationConfig_CardNetworkParameters) GetCardNetwork() CreditCardRestrictions_CreditCardType {
	if m != nil {
		return m.CardNetwork
	}
	return CreditCardRestrictions_CREDIT_CARD_TYPE_UNSPECIFIED
}

func (m *TokenizationConfig_CardNetworkParameters) GetAcquirerBin() string {
	if m != nil {
		return m.AcquirerBin
	}
	return ""
}

func (m *TokenizationConfig_CardNetworkParameters) GetAcquirerMerchantId() string {
	if m != nil {
		return m.AcquirerMerchantId
	}
	return ""
}

// A set of rules and guidelines that are displayed to the
// user in order to make a booking through Reserve with Google.
type Terms struct {
	// The URL to the Terms and Conditions. (optional)
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The text to be displayed to the user.
	// Use localized_text below for new integrations.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// The localized text to be displayed to the user. (required)
	LocalizedText        *Text    `protobuf:"bytes,3,opt,name=localized_text,json=localizedText,proto3" json:"localized_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Terms) Reset()         { *m = Terms{} }
func (m *Terms) String() string { return proto.CompactTextString(m) }
func (*Terms) ProtoMessage()    {}
func (*Terms) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{13}
}

func (m *Terms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Terms.Unmarshal(m, b)
}
func (m *Terms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Terms.Marshal(b, m, deterministic)
}
func (m *Terms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Terms.Merge(m, src)
}
func (m *Terms) XXX_Size() int {
	return xxx_messageInfo_Terms.Size(m)
}
func (m *Terms) XXX_DiscardUnknown() {
	xxx_messageInfo_Terms.DiscardUnknown(m)
}

var xxx_messageInfo_Terms proto.InternalMessageInfo

func (m *Terms) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Terms) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Terms) GetLocalizedText() *Text {
	if m != nil {
		return m.LocalizedText
	}
	return nil
}

// Hints used to help Google match a merchant to a place on Google Maps.
type MerchantMatchingHints struct {
	// The Place ID for a place in the Google Places database and on Google Maps.
	// See https://developers.google.com/places/place-id for more about Place IDs.
	// If this is provided, Google will use it as a hint when matching, and
	// prioritize the hint over other candidates.
	PlaceId              string   `protobuf:"bytes,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerchantMatchingHints) Reset()         { *m = MerchantMatchingHints{} }
func (m *MerchantMatchingHints) String() string { return proto.CompactTextString(m) }
func (*MerchantMatchingHints) ProtoMessage()    {}
func (*MerchantMatchingHints) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{14}
}

func (m *MerchantMatchingHints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerchantMatchingHints.Unmarshal(m, b)
}
func (m *MerchantMatchingHints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerchantMatchingHints.Marshal(b, m, deterministic)
}
func (m *MerchantMatchingHints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantMatchingHints.Merge(m, src)
}
func (m *MerchantMatchingHints) XXX_Size() int {
	return xxx_messageInfo_MerchantMatchingHints.Size(m)
}
func (m *MerchantMatchingHints) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantMatchingHints.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantMatchingHints proto.InternalMessageInfo

func (m *MerchantMatchingHints) GetPlaceId() string {
	if m != nil {
		return m.PlaceId
	}
	return ""
}

// Service attributes are partner-defined categories that describe the Services
// for a Merchant. For example, a bank may define an "Account Type"
// service attribute with possible values of "Personal" and "Business", while a
// hair salon may define a "Service Type" service attribute with possible
// values of "Haircut", "Color", and "Style".
type ServiceAttribute struct {
	// An identifier that uniquely identifies this service attribute among others
	// for the same merchant, e.g. "account-type".
	AttributeId string `protobuf:"bytes,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	// A user-visible name for this attribute, e.g. "Account Type".
	AttributeName string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	// All possible values for this service attribute.
	Value                []*ServiceAttribute_Value `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ServiceAttribute) Reset()         { *m = ServiceAttribute{} }
func (m *ServiceAttribute) String() string { return proto.CompactTextString(m) }
func (*ServiceAttribute) ProtoMessage()    {}
func (*ServiceAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{15}
}

func (m *ServiceAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAttribute.Unmarshal(m, b)
}
func (m *ServiceAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAttribute.Marshal(b, m, deterministic)
}
func (m *ServiceAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAttribute.Merge(m, src)
}
func (m *ServiceAttribute) XXX_Size() int {
	return xxx_messageInfo_ServiceAttribute.Size(m)
}
func (m *ServiceAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAttribute proto.InternalMessageInfo

func (m *ServiceAttribute) GetAttributeId() string {
	if m != nil {
		return m.AttributeId
	}
	return ""
}

func (m *ServiceAttribute) GetAttributeName() string {
	if m != nil {
		return m.AttributeName
	}
	return ""
}

func (m *ServiceAttribute) GetValue() []*ServiceAttribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Represents a possible value for a particular service attribute.
type ServiceAttribute_Value struct {
	// An identifier that uniquely identifies this value among others for
	// this service attribute, e.g. "personal".
	ValueId string `protobuf:"bytes,1,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	// A user-visible name for the value, e.g. "Personal".
	ValueName            string   `protobuf:"bytes,2,opt,name=value_name,json=valueName,proto3" json:"value_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAttribute_Value) Reset()         { *m = ServiceAttribute_Value{} }
func (m *ServiceAttribute_Value) String() string { return proto.CompactTextString(m) }
func (*ServiceAttribute_Value) ProtoMessage()    {}
func (*ServiceAttribute_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{15, 0}
}

func (m *ServiceAttribute_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAttribute_Value.Unmarshal(m, b)
}
func (m *ServiceAttribute_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAttribute_Value.Marshal(b, m, deterministic)
}
func (m *ServiceAttribute_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAttribute_Value.Merge(m, src)
}
func (m *ServiceAttribute_Value) XXX_Size() int {
	return xxx_messageInfo_ServiceAttribute_Value.Size(m)
}
func (m *ServiceAttribute_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAttribute_Value.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAttribute_Value proto.InternalMessageInfo

func (m *ServiceAttribute_Value) GetValueId() string {
	if m != nil {
		return m.ValueId
	}
	return ""
}

func (m *ServiceAttribute_Value) GetValueName() string {
	if m != nil {
		return m.ValueName
	}
	return ""
}

type ServiceFeed struct {
	Metadata             *FeedMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Service              []*Service    `protobuf:"bytes,2,rep,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServiceFeed) Reset()         { *m = ServiceFeed{} }
func (m *ServiceFeed) String() string { return proto.CompactTextString(m) }
func (*ServiceFeed) ProtoMessage()    {}
func (*ServiceFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{16}
}

func (m *ServiceFeed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceFeed.Unmarshal(m, b)
}
func (m *ServiceFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceFeed.Marshal(b, m, deterministic)
}
func (m *ServiceFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceFeed.Merge(m, src)
}
func (m *ServiceFeed) XXX_Size() int {
	return xxx_messageInfo_ServiceFeed.Size(m)
}
func (m *ServiceFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceFeed.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceFeed proto.InternalMessageInfo

func (m *ServiceFeed) GetMetadata() *FeedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ServiceFeed) GetService() []*Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// The definition of a service provided by a merchant.
type Service struct {
	// An opaque string from an aggregator partner which uniquely identifies a
	// merchant. (required)
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// An opaque string from an aggregator partner which uniquely identifies the
	// service. (required)
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The name of the service. Deprecated. Please use localized_service_name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // Deprecated: Do not use.
	// The name of the service, e.g. "Men's haircut". Possibly in several locales.
	// (required)
	LocalizedServiceName *Text `protobuf:"bytes,26,opt,name=localized_service_name,json=localizedServiceName,proto3" json:"localized_service_name,omitempty"`
	// The description of the service.
	// Deprecated. Please use localized_description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"` // Deprecated: Do not use.
	// The user-visible description of the service, possibly in several locales.
	// Populating service description is strongly recommended, but not strictly
	// required.
	//
	// This field now supports both plain-text and HTML-like formatting rules to
	// display structural contents to end-users. Unlike plain text sections,
	// customized layouts can be created here using headings, paragraphs, lists
	// and some phrase tags. Please read the following instructions and notes
	// carefully to ensure you create the best user-experience.
	//
	// Supported HTML-like formatting tags:
	//
	// Heading tags: <h1>, <h2>, <h3>, <h4>, <h5>, <h6>
	//   Heading tags can be used to display titles and sub-titles. For example,
	//   <h1>Itinerary</h1> will display the inline text as the most important
	//   heading of the section. Note that any inner HTML tags, styles or
	//   attributes will be ignored. For example, <h1 style=".."> will be treated
	//   the same as <h1>. Only pure text wil be preserved.
	//
	// Paragraph tag: <p>:
	//   The paragraph tag can be used to highlight a detailed introduction or
	//   contents. Any inner tags, styles or attributes will be ignored, with a
	//   few exceptions: <br>, <strong> and <em>. Please see the phrase tag
	//   section below for more details.
	//
	// List tags: <ul>, <ol>, <li>
	//   The <ul> tag can be used with the <li> tag to display unordered lists,
	//   and the <ol> tag can be used with <li> to display ordered lists. This is
	//   a good way to display checklists, highlights, or any other lists that fit
	//   your use-cases.
	// Example: To show a list of features of a cruise trip:
	//   <ol>
	//     <li>Wonderful ocean view and chances to play with wildlife.</li>
	//     <li>Carefully designed travel arrangements and services.</li>
	//     <li>Gauranteed lowest price.</li>
	//   </ol>
	// Note that only <li> children under <ul> or <ol> tags will be converted. All
	// other children will be dropped. Also, any inner tags, attributes and styles
	// will be ignored; we only preserve pure text contents.
	//
	// Division tag: <div>
	//   All supported inner tags of the <div> tag will be parsed with the rules
	//   stated above, imply <div> tag itself does not mean any grouping or
	//   indenting here. Also, any inner attributes and styles will be ignored.
	//
	// Phrase tags: <br>, <strong>, <em>:
	//   Only the three tags mentioned above are supported. <br> can be used to
	//   break lines in paragraphs, and <strong>/<em> can be used to highlight
	//   important text. Any other phrase tags will be ignored.
	//
	// Unsupported tags:
	//   * <html>, <header>, and <body> tags are not allowed.
	//   * Any other tags not mentioned above are not supported (for example
	//     <table>, <td> ...).
	// Any URLs, anchors, and links will be stripped, and will never be displayed
	// to end-users. If you want to use photos to create a rich user experience,
	// please use the "related_media" field below to send your photo URLs.
	//
	// Important notes:
	//   * Try not to use other tags except for the supported ones mentioned
	//     above, because the contents within unsupported tags will be stripped,
	//     and may lead to an undesirable user experience.
	//   * Try avoid deep nested structures like more than 3 different heading
	//     levels or nested lists. Keeping the structure flat, simple, and
	//     straightforward, helps to create a better user experience.
	//   * If the currently supported layouts are not sufficient for your use
	//     cases, please reach out to the Reserve with Google team.
	//   * The recommended maximum size is 32,000 characters.
	//
	// (optional)
	LocalizedDescription *Text `protobuf:"bytes,27,opt,name=localized_description,json=localizedDescription,proto3" json:"localized_description,omitempty"`
	// The price of the service. (optional, overridden when payment options or
	// ticket types present)
	Price *Price `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	// Describes how the price is interpreted and displayed to the user. Can be
	// used by any vertical except Dining and Things To Do to configure display of
	// the service price. (optional)
	PriceInterpretation PriceInterpretation `protobuf:"varint,23,opt,name=price_interpretation,json=priceInterpretation,proto3,enum=main.PriceInterpretation" json:"price_interpretation,omitempty"`
	// Rules to book/cancel an appointment. (optional)
	Rules *SchedulingRules `protobuf:"bytes,6,opt,name=rules,proto3" json:"rules,omitempty"`
	// Intake forms to customize the service. (optional)
	//
	// Deprecated. Please see intake_form and per_ticket_intake_form.
	Form []*ServiceIntakeForm `protobuf:"bytes,7,rep,name=form,proto3" json:"form,omitempty"` // Deprecated: Do not use.
	// A form requesting additional information from the user when they book this
	// service. (optional)
	IntakeForm *ServiceIntakeForm `protobuf:"bytes,20,opt,name=intake_form,json=intakeForm,proto3" json:"intake_form,omitempty"`
	// A form requesting additional information from the user when they book this
	// service. This form must be filled out once for each ticket the user is
	// booking. (optional)
	PerTicketIntakeForm *ServiceIntakeForm `protobuf:"bytes,21,opt,name=per_ticket_intake_form,json=perTicketIntakeForm,proto3" json:"per_ticket_intake_form,omitempty"`
	// Whether a prepayment is required, optional or not supported. (optional)
	PrepaymentType Service_PrepaymentType `protobuf:"varint,8,opt,name=prepayment_type,json=prepaymentType,proto3,enum=main.Service_PrepaymentType" json:"prepayment_type,omitempty"`
	// The service's tax rate. If present this field overrides any tax_rate set at
	// the merchant level. An empty message (i.e. tax_rate { }) will reset the
	// applied tax rate to zero. (optional)
	TaxRate *TaxRate `protobuf:"bytes,9,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	// A list of ids referencing the payment options which can be used to pay
	// for this service. The actual payment options are defined at the Merchant
	// level, and can also be shared among multiple Merchants. (optional)
	PaymentOptionId []string `protobuf:"bytes,10,rep,name=payment_option_id,json=paymentOptionId,proto3" json:"payment_option_id,omitempty"`
	// Defines how a deposit may be charged to the user. Can be overridden at the
	// availability level. (optional)
	Deposit *Deposit `protobuf:"bytes,11,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// Defines a no show fee that may be charged to the user. Can be overridden
	// at the availability level. (optional)
	NoShowFee *NoShowFee `protobuf:"bytes,12,opt,name=no_show_fee,json=noShowFee,proto3" json:"no_show_fee,omitempty"`
	// Indicates whether the user must provide a credit card in order to book this
	// service.
	// This value can be overridden at the availability level. (optional)
	RequireCreditCard RequireCreditCard `protobuf:"varint,13,opt,name=require_credit_card,json=requireCreditCard,proto3,enum=main.RequireCreditCard" json:"require_credit_card,omitempty"`
	// An action link related to this service. If action link exists, type (see
	// below) must be set in the Service.
	ActionLink []*ActionLink `protobuf:"bytes,14,rep,name=action_link,json=actionLink,proto3" json:"action_link,omitempty"`
	// The predefined type of this service. (optional)
	Type Service_ServiceType `protobuf:"varint,15,opt,name=type,proto3,enum=main.Service_ServiceType" json:"type,omitempty"`
	// Types of tickets that can be booked/purchased for this service. Only
	// supported in order based booking API, see
	// https://developers.google.com/maps-booking/guides/partner-implementing-booking-server-1a
	// (optional)
	TicketType []*TicketType `protobuf:"bytes,16,rep,name=ticket_type,json=ticketType,proto3" json:"ticket_type,omitempty"`
	// Photos related to this service. Google will crawl these media to ensure
	// that they are displayed correctly to end-users. (optional)
	RelatedMedia []*RelatedMedia `protobuf:"bytes,17,rep,name=related_media,json=relatedMedia,proto3" json:"related_media,omitempty"`
	// Service attribute values that apply to this service (optional).
	// Each Service may have zero or more values for each service attribute
	// defined in the corresponding Merchant.
	ServiceAttributeValueId []*ServiceAttributeValueId `protobuf:"bytes,18,rep,name=service_attribute_value_id,json=serviceAttributeValueId,proto3" json:"service_attribute_value_id,omitempty"`
	// Rules related to joining the waitlist. Should be populated if the service
	// and merchant support waitlist functionality. Should not be populated
	// otherwise.
	WaitlistRules *WaitlistRules `protobuf:"bytes,19,opt,name=waitlist_rules,json=waitlistRules,proto3" json:"waitlist_rules,omitempty"`
	// Additional information unique to the event ticketing vertical. (optional)
	TicketingVerticalSpecificData *TicketingVerticalSpecificData `protobuf:"bytes,22,opt,name=ticketing_vertical_specific_data,json=ticketingVerticalSpecificData,proto3" json:"ticketing_vertical_specific_data,omitempty"`
	// Depth of integration we support for this service. (optional)
	// Irrelevant for partners with the starter integration. End to end will
	// always be disabled for these partners.
	IntegrationType IntegrationType `protobuf:"varint,24,opt,name=integration_type,json=integrationType,proto3,enum=main.IntegrationType" json:"integration_type,omitempty"`
	// Order level fees for purchasing this service. (optional)
	PerOrderFee *PerOrderFee `protobuf:"bytes,25,opt,name=per_order_fee,json=perOrderFee,proto3" json:"per_order_fee,omitempty"`
	// Content fields specific to Tours and Activities.
	ToursAndActivitiesContent *ToursAndActivitiesContent `protobuf:"bytes,28,opt,name=tours_and_activities_content,json=toursAndActivitiesContent,proto3" json:"tours_and_activities_content,omitempty"`
	// Locations related to this service. (optional)
	// IMPORTANT NOTES:
	// 1. The Location.LocationType must be supplied when using this field.
	// 2. If there are multiple visited locations related to this service, or the
	// START_LOCATION is different from the VISITED_LOCATION, the
	// START_LOCATION must be specified.
	// Example:
	//  - A guided biking tour visiting three venues, the start venue needs to be
	//  specified.
	//  - A bus tour meeting at a hotel lobby and then head to the visited venue.
	//  The meeting location needs to be specified.
	Location []*Location `protobuf:"bytes,29,rep,name=location,proto3" json:"location,omitempty"`
	// User rating for this service as an aggregate metric over all reviews.
	Rating               *Rating  `protobuf:"bytes,30,opt,name=rating,proto3" json:"rating,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{17}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Service) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

// Deprecated: Do not use.
func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetLocalizedServiceName() *Text {
	if m != nil {
		return m.LocalizedServiceName
	}
	return nil
}

// Deprecated: Do not use.
func (m *Service) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Service) GetLocalizedDescription() *Text {
	if m != nil {
		return m.LocalizedDescription
	}
	return nil
}

func (m *Service) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Service) GetPriceInterpretation() PriceInterpretation {
	if m != nil {
		return m.PriceInterpretation
	}
	return PriceInterpretation_PRICE_INTERPRETATION_UNSPECIFIED
}

func (m *Service) GetRules() *SchedulingRules {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Deprecated: Do not use.
func (m *Service) GetForm() []*ServiceIntakeForm {
	if m != nil {
		return m.Form
	}
	return nil
}

func (m *Service) GetIntakeForm() *ServiceIntakeForm {
	if m != nil {
		return m.IntakeForm
	}
	return nil
}

func (m *Service) GetPerTicketIntakeForm() *ServiceIntakeForm {
	if m != nil {
		return m.PerTicketIntakeForm
	}
	return nil
}

func (m *Service) GetPrepaymentType() Service_PrepaymentType {
	if m != nil {
		return m.PrepaymentType
	}
	return Service_PREPAYMENT_TYPE_UNSPECIFIED
}

func (m *Service) GetTaxRate() *TaxRate {
	if m != nil {
		return m.TaxRate
	}
	return nil
}

func (m *Service) GetPaymentOptionId() []string {
	if m != nil {
		return m.PaymentOptionId
	}
	return nil
}

func (m *Service) GetDeposit() *Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *Service) GetNoShowFee() *NoShowFee {
	if m != nil {
		return m.NoShowFee
	}
	return nil
}

func (m *Service) GetRequireCreditCard() RequireCreditCard {
	if m != nil {
		return m.RequireCreditCard
	}
	return RequireCreditCard_REQUIRE_CREDIT_CARD_UNSPECIFIED
}

func (m *Service) GetActionLink() []*ActionLink {
	if m != nil {
		return m.ActionLink
	}
	return nil
}

func (m *Service) GetType() Service_ServiceType {
	if m != nil {
		return m.Type
	}
	return Service_SERVICE_TYPE_UNSPECIFIED
}

func (m *Service) GetTicketType() []*TicketType {
	if m != nil {
		return m.TicketType
	}
	return nil
}

func (m *Service) GetRelatedMedia() []*RelatedMedia {
	if m != nil {
		return m.RelatedMedia
	}
	return nil
}

func (m *Service) GetServiceAttributeValueId() []*ServiceAttributeValueId {
	if m != nil {
		return m.ServiceAttributeValueId
	}
	return nil
}

func (m *Service) GetWaitlistRules() *WaitlistRules {
	if m != nil {
		return m.WaitlistRules
	}
	return nil
}

func (m *Service) GetTicketingVerticalSpecificData() *TicketingVerticalSpecificData {
	if m != nil {
		return m.TicketingVerticalSpecificData
	}
	return nil
}

func (m *Service) GetIntegrationType() IntegrationType {
	if m != nil {
		return m.IntegrationType
	}
	return IntegrationType_INTEGRATION_TYPE_UNSPECIFIED
}

func (m *Service) GetPerOrderFee() *PerOrderFee {
	if m != nil {
		return m.PerOrderFee
	}
	return nil
}

func (m *Service) GetToursAndActivitiesContent() *ToursAndActivitiesContent {
	if m != nil {
		return m.ToursAndActivitiesContent
	}
	return nil
}

func (m *Service) GetLocation() []*Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Service) GetRating() *Rating {
	if m != nil {
		return m.Rating
	}
	return nil
}

// The price of a service or a fee.
type Price struct {
	// The price in micro-units of the currency.
	// For example: 1.95 USD is 1950000 in micro-units.
	// If your price contains fractions of the smallest currency unit, then it
	// will be rounded using nearest even rounding (e.g. 2.5 cents rounded
	// to 2 cents, 3.5 cents rounded to 4 cents, 0.5 cents rounded to 0 cents,
	// 2.51 cents rounded to 3 cents). (required)
	PriceMicros int64 `protobuf:"varint,1,opt,name=price_micros,json=priceMicros,proto3" json:"price_micros,omitempty"`
	// The currency of the price that is defined in ISO 4217. (required)
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// An optional and opaque string that identifies the pricing option that is
	// associated with the extended price. (optional)
	PricingOptionTag     string   `protobuf:"bytes,3,opt,name=pricing_option_tag,json=pricingOptionTag,proto3" json:"pricing_option_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{18}
}

func (m *Price) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Price.Unmarshal(m, b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Price.Marshal(b, m, deterministic)
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return xxx_messageInfo_Price.Size(m)
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetPriceMicros() int64 {
	if m != nil {
		return m.PriceMicros
	}
	return 0
}

func (m *Price) GetCurrencyCode() string {
	if m != nil {
		return m.CurrencyCode
	}
	return ""
}

func (m *Price) GetPricingOptionTag() string {
	if m != nil {
		return m.PricingOptionTag
	}
	return ""
}

// A possibly-localized text payload. Some Text fields may contain marked-up
// content.
type Text struct {
	// Text value in an unknown locale. Required if and only if `localized_value`
	// is empty. The locale for this value may depend on the partner or service
	// provider -- it should not be assumed to be any specific language.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Per-locale text values. Optional.
	LocalizedValue       []*LocalizedString `protobuf:"bytes,2,rep,name=localized_value,json=localizedValue,proto3" json:"localized_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{19}
}

func (m *Text) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Text.Unmarshal(m, b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Text.Marshal(b, m, deterministic)
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return xxx_messageInfo_Text.Size(m)
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Text) GetLocalizedValue() []*LocalizedString {
	if m != nil {
		return m.LocalizedValue
	}
	return nil
}

// Instance of a string in one locale.
type LocalizedString struct {
	// IETF BCP 47 language code, such as "en", "mas", "zh-Hant", "de-CH-1901".
	// See http://www.w3.org/International/articles/language-tags/.
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
	// Message in the locale above (UTF-8).
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalizedString) Reset()         { *m = LocalizedString{} }
func (m *LocalizedString) String() string { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()    {}
func (*LocalizedString) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{20}
}

func (m *LocalizedString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalizedString.Unmarshal(m, b)
}
func (m *LocalizedString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalizedString.Marshal(b, m, deterministic)
}
func (m *LocalizedString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalizedString.Merge(m, src)
}
func (m *LocalizedString) XXX_Size() int {
	return xxx_messageInfo_LocalizedString.Size(m)
}
func (m *LocalizedString) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalizedString.DiscardUnknown(m)
}

var xxx_messageInfo_LocalizedString proto.InternalMessageInfo

func (m *LocalizedString) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *LocalizedString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The scheduling rules for a service.
type SchedulingRules struct {
	// The duration (in seconds) from when the last booking can be made to
	// when the availability slot starts or ends.
	//
	// If "min_advance_booking" is set, the last bookable time is calculated as
	// (<slot start time> - "min_advance_booking").
	// If "min_booking_buffer_before_end_time" is set, the last bookable time is
	// calculated as (<slot end time> - "min_booking_buffer_before_end_time").
	// Note that the value of "min_booking_buffer_before_end_time" must be
	// positive if set.
	// If both are unset, the slot is bookable until the slot begin time.
	//
	// Examples:
	//  * A haircut that needs to be booked at least 1 hour before the start time.
	//      'scheduling_rules{ min_advance_booking: 3600 ...}`
	//
	//  * A museum where the last ticket can be purchased 30 mins before closing:
	//     'scheduling_rules{ min_booking_buffer_before_end_time: 1800 ...}'
	//
	//  * A movie ticket that needs to be purchased before the start time.
	//        'scheduling_rules{ ...}' (leave this field empty)
	// (optional)
	//
	// Types that are valid to be assigned to MinBookingBuffer:
	//	*SchedulingRules_MinAdvanceBooking
	//	*SchedulingRules_MinBookingBufferBeforeEndTime
	MinBookingBuffer isSchedulingRules_MinBookingBuffer `protobuf_oneof:"min_booking_buffer"`
	// The minimum advance notice in seconds required to cancel a booked
	// appointment online. (optional)
	MinAdvanceOnlineCanceling int64 `protobuf:"varint,2,opt,name=min_advance_online_canceling,json=minAdvanceOnlineCanceling,proto3" json:"min_advance_online_canceling,omitempty"`
	// The fee for canceling within the minimum advance notice period.
	LateCancellationFee *Price `protobuf:"bytes,3,opt,name=late_cancellation_fee,json=lateCancellationFee,proto3" json:"late_cancellation_fee,omitempty"` // Deprecated: Do not use.
	// The fee for no-show without canceling.
	NoshowFee *Price `protobuf:"bytes,4,opt,name=noshow_fee,json=noshowFee,proto3" json:"noshow_fee,omitempty"` // Deprecated: Do not use.
	// The admission policy that applied to this service. If unset, defaults to
	// TIME_STRICT. (optional)
	AdmissionPolicy SchedulingRules_AdmissionPolicy `protobuf:"varint,5,opt,name=admission_policy,json=admissionPolicy,proto3,enum=main.SchedulingRules_AdmissionPolicy" json:"admission_policy,omitempty"`
	// Scheduling rules cancellation policy (required for Things-to-do).
	// Defaults to non-refundable.
	CancellationPolicy   *CancellationPolicy `protobuf:"bytes,7,opt,name=cancellation_policy,json=cancellationPolicy,proto3" json:"cancellation_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SchedulingRules) Reset()         { *m = SchedulingRules{} }
func (m *SchedulingRules) String() string { return proto.CompactTextString(m) }
func (*SchedulingRules) ProtoMessage()    {}
func (*SchedulingRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{21}
}

func (m *SchedulingRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingRules.Unmarshal(m, b)
}
func (m *SchedulingRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingRules.Marshal(b, m, deterministic)
}
func (m *SchedulingRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingRules.Merge(m, src)
}
func (m *SchedulingRules) XXX_Size() int {
	return xxx_messageInfo_SchedulingRules.Size(m)
}
func (m *SchedulingRules) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingRules.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingRules proto.InternalMessageInfo

type isSchedulingRules_MinBookingBuffer interface {
	isSchedulingRules_MinBookingBuffer()
}

type SchedulingRules_MinAdvanceBooking struct {
	MinAdvanceBooking int64 `protobuf:"varint,1,opt,name=min_advance_booking,json=minAdvanceBooking,proto3,oneof"`
}

type SchedulingRules_MinBookingBufferBeforeEndTime struct {
	MinBookingBufferBeforeEndTime int64 `protobuf:"varint,6,opt,name=min_booking_buffer_before_end_time,json=minBookingBufferBeforeEndTime,proto3,oneof"`
}

func (*SchedulingRules_MinAdvanceBooking) isSchedulingRules_MinBookingBuffer() {}

func (*SchedulingRules_MinBookingBufferBeforeEndTime) isSchedulingRules_MinBookingBuffer() {}

func (m *SchedulingRules) GetMinBookingBuffer() isSchedulingRules_MinBookingBuffer {
	if m != nil {
		return m.MinBookingBuffer
	}
	return nil
}

func (m *SchedulingRules) GetMinAdvanceBooking() int64 {
	if x, ok := m.GetMinBookingBuffer().(*SchedulingRules_MinAdvanceBooking); ok {
		return x.MinAdvanceBooking
	}
	return 0
}

func (m *SchedulingRules) GetMinBookingBufferBeforeEndTime() int64 {
	if x, ok := m.GetMinBookingBuffer().(*SchedulingRules_MinBookingBufferBeforeEndTime); ok {
		return x.MinBookingBufferBeforeEndTime
	}
	return 0
}

func (m *SchedulingRules) GetMinAdvanceOnlineCanceling() int64 {
	if m != nil {
		return m.MinAdvanceOnlineCanceling
	}
	return 0
}

// Deprecated: Do not use.
func (m *SchedulingRules) GetLateCancellationFee() *Price {
	if m != nil {
		return m.LateCancellationFee
	}
	return nil
}

// Deprecated: Do not use.
func (m *SchedulingRules) GetNoshowFee() *Price {
	if m != nil {
		return m.NoshowFee
	}
	return nil
}

func (m *SchedulingRules) GetAdmissionPolicy() SchedulingRules_AdmissionPolicy {
	if m != nil {
		return m.AdmissionPolicy
	}
	return SchedulingRules_ADMISSION_POLICY_UNSPECIFIED
}

func (m *SchedulingRules) GetCancellationPolicy() *CancellationPolicy {
	if m != nil {
		return m.CancellationPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchedulingRules) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchedulingRules_MinAdvanceBooking)(nil),
		(*SchedulingRules_MinBookingBufferBeforeEndTime)(nil),
	}
}

// Defines a field that is included in a ServiceIntakeForm.
type ServiceIntakeFormField struct {
	// A string from an aggregator partner which uniquely identifies a form field.
	// This id should be the same as the id in the corresponding form field
	// answer and must be unique across both the service level and per ticket
	// intake forms. (required)
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// The type of this field. (required)
	Type ServiceIntakeFormField_FieldType `protobuf:"varint,1,opt,name=type,proto3,enum=main.ServiceIntakeFormField_FieldType" json:"type,omitempty"`
	// The text shown to the user for this field. Deprecated, please use
	// `localized_label` instead.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"` // Deprecated: Do not use.
	// The text shown to the user for this field. The field can be supplied in
	// multiple locales. (required)
	LocalizedLabel *Text `protobuf:"bytes,7,opt,name=localized_label,json=localizedLabel,proto3" json:"localized_label,omitempty"`
	// Set if and only if the field type is LOCATION_SEARCH. Please use the
	// "location_id" in the "location" field to specify the location value.
	Value []string `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	// Set if and only if the field type is MULTIPLE_CHOICE, CHECKBOXES, or
	// DROPDOWN. Used to enumerate possible choices.
	ChoiceText []*Text `protobuf:"bytes,8,rep,name=choice_text,json=choiceText,proto3" json:"choice_text,omitempty"`
	// Indicates whether an answer to this field is required by a user. (optional)
	IsRequired bool `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// Indicates whether a custom value is allowed in additional to predefined
	// answers. This is only applicable when the field type is LOCATION_SEARCH.
	// (optional)
	AllowCustomAnswer bool `protobuf:"varint,9,opt,name=allow_custom_answer,json=allowCustomAnswer,proto3" json:"allow_custom_answer,omitempty"`
	// Additional options provided in addition to the provided values. Only
	// applicable when the field type is LOCATION_SEARCH.
	// E.g. in addition to the provided location list, another available option
	// can be "I will contact supplier later". (optional)
	AdditionalOption []*Text `protobuf:"bytes,10,rep,name=additional_option,json=additionalOption,proto3" json:"additional_option,omitempty"`
	// If this question should only be shown when the user books certain ticket
	// types, this field should be set as the set of applicable ticket type ids.
	// Leave the field empty if the question is always applicable.
	// (optional)
	TicketTypeRestrict   []string `protobuf:"bytes,6,rep,name=ticket_type_restrict,json=ticketTypeRestrict,proto3" json:"ticket_type_restrict,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceIntakeFormField) Reset()         { *m = ServiceIntakeFormField{} }
func (m *ServiceIntakeFormField) String() string { return proto.CompactTextString(m) }
func (*ServiceIntakeFormField) ProtoMessage()    {}
func (*ServiceIntakeFormField) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{22}
}

func (m *ServiceIntakeFormField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceIntakeFormField.Unmarshal(m, b)
}
func (m *ServiceIntakeFormField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceIntakeFormField.Marshal(b, m, deterministic)
}
func (m *ServiceIntakeFormField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceIntakeFormField.Merge(m, src)
}
func (m *ServiceIntakeFormField) XXX_Size() int {
	return xxx_messageInfo_ServiceIntakeFormField.Size(m)
}
func (m *ServiceIntakeFormField) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceIntakeFormField.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceIntakeFormField proto.InternalMessageInfo

func (m *ServiceIntakeFormField) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServiceIntakeFormField) GetType() ServiceIntakeFormField_FieldType {
	if m != nil {
		return m.Type
	}
	return ServiceIntakeFormField_FIELD_TYPE_UNSPECIFIED
}

// Deprecated: Do not use.
func (m *ServiceIntakeFormField) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ServiceIntakeFormField) GetLocalizedLabel() *Text {
	if m != nil {
		return m.LocalizedLabel
	}
	return nil
}

func (m *ServiceIntakeFormField) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ServiceIntakeFormField) GetChoiceText() []*Text {
	if m != nil {
		return m.ChoiceText
	}
	return nil
}

func (m *ServiceIntakeFormField) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *ServiceIntakeFormField) GetAllowCustomAnswer() bool {
	if m != nil {
		return m.AllowCustomAnswer
	}
	return false
}

func (m *ServiceIntakeFormField) GetAdditionalOption() []*Text {
	if m != nil {
		return m.AdditionalOption
	}
	return nil
}

func (m *ServiceIntakeFormField) GetTicketTypeRestrict() []string {
	if m != nil {
		return m.TicketTypeRestrict
	}
	return nil
}

// Defines an intake form that customizes the service provided by a merchant.
type ServiceIntakeForm struct {
	// Fields that will be displayed to the user. (required)
	Field []*ServiceIntakeFormField `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
	// If true, this form will be shown to first time customers.
	// Deprecated. This functionality is not supported for intake forms.
	FirstTimeCustomers bool `protobuf:"varint,2,opt,name=first_time_customers,json=firstTimeCustomers,proto3" json:"first_time_customers,omitempty"` // Deprecated: Do not use.
	// If true, this form will be shown to repeat customers.
	// Deprecated. This functionality is not supported for intake forms.
	ReturningCustomers   bool     `protobuf:"varint,3,opt,name=returning_customers,json=returningCustomers,proto3" json:"returning_customers,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceIntakeForm) Reset()         { *m = ServiceIntakeForm{} }
func (m *ServiceIntakeForm) String() string { return proto.CompactTextString(m) }
func (*ServiceIntakeForm) ProtoMessage()    {}
func (*ServiceIntakeForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{23}
}

func (m *ServiceIntakeForm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceIntakeForm.Unmarshal(m, b)
}
func (m *ServiceIntakeForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceIntakeForm.Marshal(b, m, deterministic)
}
func (m *ServiceIntakeForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceIntakeForm.Merge(m, src)
}
func (m *ServiceIntakeForm) XXX_Size() int {
	return xxx_messageInfo_ServiceIntakeForm.Size(m)
}
func (m *ServiceIntakeForm) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceIntakeForm.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceIntakeForm proto.InternalMessageInfo

func (m *ServiceIntakeForm) GetField() []*ServiceIntakeFormField {
	if m != nil {
		return m.Field
	}
	return nil
}

// Deprecated: Do not use.
func (m *ServiceIntakeForm) GetFirstTimeCustomers() bool {
	if m != nil {
		return m.FirstTimeCustomers
	}
	return false
}

// Deprecated: Do not use.
func (m *ServiceIntakeForm) GetReturningCustomers() bool {
	if m != nil {
		return m.ReturningCustomers
	}
	return false
}

// A deposit that the user may be charged or have a hold on their credit card
// for.
type Deposit struct {
	// Deposit amount.
	Deposit *Price `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// Minimum advance cancellation for the deposit.
	MinAdvanceCancellationSec int64 `protobuf:"varint,2,opt,name=min_advance_cancellation_sec,json=minAdvanceCancellationSec,proto3" json:"min_advance_cancellation_sec,omitempty"`
	// Defines how the deposit is determined from the availability.
	DepositType          PriceType `protobuf:"varint,3,opt,name=deposit_type,json=depositType,proto3,enum=main.PriceType" json:"deposit_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{24}
}

func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deposit.Unmarshal(m, b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return xxx_messageInfo_Deposit.Size(m)
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetDeposit() *Price {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *Deposit) GetMinAdvanceCancellationSec() int64 {
	if m != nil {
		return m.MinAdvanceCancellationSec
	}
	return 0
}

func (m *Deposit) GetDepositType() PriceType {
	if m != nil {
		return m.DepositType
	}
	return PriceType_FIXED_RATE_DEFAULT
}

// A fee that a user may be charged if they have made a booking but do not
// show up.
type NoShowFee struct {
	// The amount the user may be charged if they do not show up for their
	// reservation.
	Fee *Price `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	// Defines how the fee is determined from the availability.
	FeeType              PriceType `protobuf:"varint,3,opt,name=fee_type,json=feeType,proto3,enum=main.PriceType" json:"fee_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NoShowFee) Reset()         { *m = NoShowFee{} }
func (m *NoShowFee) String() string { return proto.CompactTextString(m) }
func (*NoShowFee) ProtoMessage()    {}
func (*NoShowFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{25}
}

func (m *NoShowFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoShowFee.Unmarshal(m, b)
}
func (m *NoShowFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoShowFee.Marshal(b, m, deterministic)
}
func (m *NoShowFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoShowFee.Merge(m, src)
}
func (m *NoShowFee) XXX_Size() int {
	return xxx_messageInfo_NoShowFee.Size(m)
}
func (m *NoShowFee) XXX_DiscardUnknown() {
	xxx_messageInfo_NoShowFee.DiscardUnknown(m)
}

var xxx_messageInfo_NoShowFee proto.InternalMessageInfo

func (m *NoShowFee) GetFee() *Price {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *NoShowFee) GetFeeType() PriceType {
	if m != nil {
		return m.FeeType
	}
	return PriceType_FIXED_RATE_DEFAULT
}

// An action URL with associated language, list of countries restricted to, and
// optional platform that indicates which platform this action should be
// performed on.
type ActionLink struct {
	// The entry point URL for this action link.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The BCP-47 language tag identifying the language in which the content
	// from this URI is available.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// An unordered list of ISO 3166-1 alpha-2 country codes. Leave empty for
	// unrestricted visibility.
	RestrictedCountry []string `protobuf:"bytes,3,rep,name=restricted_country,json=restrictedCountry,proto3" json:"restricted_country,omitempty"`
	// The platform that this action should be performed on. If this field is
	// unset, ACTION_PLATFORM_WEB_APPLICATION will be used as fallback.
	Platform             ActionPlatform `protobuf:"varint,4,opt,name=platform,proto3,enum=main.ActionPlatform" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ActionLink) Reset()         { *m = ActionLink{} }
func (m *ActionLink) String() string { return proto.CompactTextString(m) }
func (*ActionLink) ProtoMessage()    {}
func (*ActionLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{26}
}

func (m *ActionLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionLink.Unmarshal(m, b)
}
func (m *ActionLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionLink.Marshal(b, m, deterministic)
}
func (m *ActionLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionLink.Merge(m, src)
}
func (m *ActionLink) XXX_Size() int {
	return xxx_messageInfo_ActionLink.Size(m)
}
func (m *ActionLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionLink.DiscardUnknown(m)
}

var xxx_messageInfo_ActionLink proto.InternalMessageInfo

func (m *ActionLink) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ActionLink) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ActionLink) GetRestrictedCountry() []string {
	if m != nil {
		return m.RestrictedCountry
	}
	return nil
}

func (m *ActionLink) GetPlatform() ActionPlatform {
	if m != nil {
		return m.Platform
	}
	return ActionPlatform_ACTION_PLATFORM_UNSPECIFIED
}

// Fees that must be paid once per order, regardless of number of tickets. These
// fields must add up to the total per order fee.
type PerOrderFee struct {
	// A fee that can vary by delivery method.
	DeliveryFee *Price `protobuf:"bytes,1,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	// A fee to process the user's payment method.
	ProcessingFee        *Price   `protobuf:"bytes,2,opt,name=processing_fee,json=processingFee,proto3" json:"processing_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PerOrderFee) Reset()         { *m = PerOrderFee{} }
func (m *PerOrderFee) String() string { return proto.CompactTextString(m) }
func (*PerOrderFee) ProtoMessage()    {}
func (*PerOrderFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{27}
}

func (m *PerOrderFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerOrderFee.Unmarshal(m, b)
}
func (m *PerOrderFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerOrderFee.Marshal(b, m, deterministic)
}
func (m *PerOrderFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerOrderFee.Merge(m, src)
}
func (m *PerOrderFee) XXX_Size() int {
	return xxx_messageInfo_PerOrderFee.Size(m)
}
func (m *PerOrderFee) XXX_DiscardUnknown() {
	xxx_messageInfo_PerOrderFee.DiscardUnknown(m)
}

var xxx_messageInfo_PerOrderFee proto.InternalMessageInfo

func (m *PerOrderFee) GetDeliveryFee() *Price {
	if m != nil {
		return m.DeliveryFee
	}
	return nil
}

func (m *PerOrderFee) GetProcessingFee() *Price {
	if m != nil {
		return m.ProcessingFee
	}
	return nil
}

// Fees that must be paid for each ticket the user purchases. These fields
// must add up to the total per ticket fee.
type PerTicketFee struct {
	// An extra charge assessed for a service.
	ServiceCharge *Price `protobuf:"bytes,1,opt,name=service_charge,json=serviceCharge,proto3" json:"service_charge,omitempty"`
	// A fee that goes to the venue/facility.
	FacilityFee *Price `protobuf:"bytes,2,opt,name=facility_fee,json=facilityFee,proto3" json:"facility_fee,omitempty"`
	// Per ticket taxes.
	Taxes                *Price   `protobuf:"bytes,3,opt,name=taxes,proto3" json:"taxes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PerTicketFee) Reset()         { *m = PerTicketFee{} }
func (m *PerTicketFee) String() string { return proto.CompactTextString(m) }
func (*PerTicketFee) ProtoMessage()    {}
func (*PerTicketFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{28}
}

func (m *PerTicketFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerTicketFee.Unmarshal(m, b)
}
func (m *PerTicketFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerTicketFee.Marshal(b, m, deterministic)
}
func (m *PerTicketFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerTicketFee.Merge(m, src)
}
func (m *PerTicketFee) XXX_Size() int {
	return xxx_messageInfo_PerTicketFee.Size(m)
}
func (m *PerTicketFee) XXX_DiscardUnknown() {
	xxx_messageInfo_PerTicketFee.DiscardUnknown(m)
}

var xxx_messageInfo_PerTicketFee proto.InternalMessageInfo

func (m *PerTicketFee) GetServiceCharge() *Price {
	if m != nil {
		return m.ServiceCharge
	}
	return nil
}

func (m *PerTicketFee) GetFacilityFee() *Price {
	if m != nil {
		return m.FacilityFee
	}
	return nil
}

func (m *PerTicketFee) GetTaxes() *Price {
	if m != nil {
		return m.Taxes
	}
	return nil
}

// TicketType is used to differentiate among tickets (where a ticket can be a
// spot on a raft trip, an admission to a museum, etc.) with different prices
// and/or availabilities due to different user types or different service
// attributes.
// Only add new ticket types when at least one of the following differs:
//    (1) short_description (2) option_description (3) price
type TicketType struct {
	// The ticket id is used to differentiate among different ticket types of the
	// same service, and is only expected to be unique within a service.
	TicketTypeId string `protobuf:"bytes,1,opt,name=ticket_type_id,json=ticketTypeId,proto3" json:"ticket_type_id,omitempty"`
	// This can be user visible, e.g., “adult”, "child", “veteran”, “Row J”, etc.
	// Deprecated, use `localized_short_description` instead.
	ShortDescription string `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"` // Deprecated: Do not use.
	// This can be user visible, e.g., “adult”, "child", “veteran”, “Row J”, etc.
	// The field can be supplied in multiple locales.
	LocalizedShortDescription *Text `protobuf:"bytes,6,opt,name=localized_short_description,json=localizedShortDescription,proto3" json:"localized_short_description,omitempty"`
	// The price of a single ticket of this type, exclusive of any taxes. The tax
	// rate of Service is applied to its tickets.
	Price *Price `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// Additional fees for purchasing this ticket. (optional)
	PerTicketFee *PerTicketFee `protobuf:"bytes,5,opt,name=per_ticket_fee,json=perTicketFee,proto3" json:"per_ticket_fee,omitempty"`
	// Description of any additional option which this ticket type represents, if
	// any. Deprecated, use `localized_option_description` instead.
	OptionDescription string `protobuf:"bytes,4,opt,name=option_description,json=optionDescription,proto3" json:"option_description,omitempty"` // Deprecated: Do not use.
	// Description of any additional option which this ticket type represents, if
	// any. The field can be supplied in multiple locales.
	//
	// This is useful when the ticket type represents multiple dimensions.
	//
	// Example: an admission ticket with different types 'adult', 'child' and
	// language as an additional option, the expected TicketType list would be:
	//     - { ticket_type_id: "ticket_type_1"
	//         localized_short_description { value: "adult" }
	//         localized_option_description { value: "english" }
	//       }
	//     - { ticket_type_id: "ticket_type_2"
	//         localized_short_description { value: "adult" }
	//         localized_option_description { value: "spanish" }
	//       }
	//     - { ticket_type_id: "ticket_type_3"
	//         localized_short_description { value: "child" }
	//         localized_option_description { value: "english" }
	//       }
	//     - { ticket_type_id: "ticket_type_4"
	//         localized_short_description { value: "child" }
	//         localized_option_description { value: "spanish" }
	//       }
	//
	// Optional, but if any ticket type within the service has this field set, we
	// expect all other ticket types to have this field set as well (a default
	// option_description could be used). E.g.
	// [{ticket_type_1, adult, english}, {ticket_type_1, adult, ''}] is not a
	// valid list.
	//
	// Only two HTML formatting tags are supported: <em> and <br>. They are
	// intended to be used for specifying options with both a title and
	// detailed description, for example: "<em>Premium Seating</em><br>This option
	// offers seating at the private boxes including fully cushioned seats,
	// private TVs, in-seat food and beverage service. These seats provide
	// picturesque views of the field."
	LocalizedOptionDescription *Text    `protobuf:"bytes,7,opt,name=localized_option_description,json=localizedOptionDescription,proto3" json:"localized_option_description,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *TicketType) Reset()         { *m = TicketType{} }
func (m *TicketType) String() string { return proto.CompactTextString(m) }
func (*TicketType) ProtoMessage()    {}
func (*TicketType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{29}
}

func (m *TicketType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketType.Unmarshal(m, b)
}
func (m *TicketType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketType.Marshal(b, m, deterministic)
}
func (m *TicketType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketType.Merge(m, src)
}
func (m *TicketType) XXX_Size() int {
	return xxx_messageInfo_TicketType.Size(m)
}
func (m *TicketType) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketType.DiscardUnknown(m)
}

var xxx_messageInfo_TicketType proto.InternalMessageInfo

func (m *TicketType) GetTicketTypeId() string {
	if m != nil {
		return m.TicketTypeId
	}
	return ""
}

// Deprecated: Do not use.
func (m *TicketType) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *TicketType) GetLocalizedShortDescription() *Text {
	if m != nil {
		return m.LocalizedShortDescription
	}
	return nil
}

func (m *TicketType) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *TicketType) GetPerTicketFee() *PerTicketFee {
	if m != nil {
		return m.PerTicketFee
	}
	return nil
}

// Deprecated: Do not use.
func (m *TicketType) GetOptionDescription() string {
	if m != nil {
		return m.OptionDescription
	}
	return ""
}

func (m *TicketType) GetLocalizedOptionDescription() *Text {
	if m != nil {
		return m.LocalizedOptionDescription
	}
	return nil
}

// Geographic information about a location.
type Location struct {
	// The Place ID for a place in the Google Places database and on Google Maps.
	// See https://developers.google.com/places/place-id for more about Place IDs.
	// If this is provided, Google will match the location to this place.
	// (optional)
	PlaceId string `protobuf:"bytes,1,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	// The location's name, telephone, url and geo are used to support matching
	// the location with places already present on Google Maps. It is recommended
	// to provide the location name if possible. (optional)
	//
	// The name of the location. (optional)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The public telephone number of the location including its country and area
	// codes, e.g. +14567891234. (optional)
	Telephone string `protobuf:"bytes,3,opt,name=telephone,proto3" json:"telephone,omitempty"`
	// The url of the location's public website. (optional)
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// The Geo info of the location, including latitude, longitude, and address.
	// (optional)
	Geo *GeoCoordinates `protobuf:"bytes,5,opt,name=geo,proto3" json:"geo,omitempty"`
	// Optional text to provide more precise description of the location, or
	// instructions assisting locating the place. E.g. "Front entrance of the
	// library", "meet at the intersect of Road A and Street B". (optional)
	Description *Text `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The type of the location. Note that this field may be required when
	// attached to a Service, see comments in Service.location for more details.
	// (optional)
	LocationType LocationType `protobuf:"varint,7,opt,name=location_type,json=locationType,proto3,enum=main.LocationType" json:"location_type,omitempty"`
	// Unique reference of the location within the service. This id can be used to
	// refer to this location in other service fields. E.g in the custom intake
	// form, a set of location ids can be used to specify pick up location
	// options. If set, this id should be unique within the same service.
	// Note this is only applicable for Service.
	// (optional)
	LocationId           string   `protobuf:"bytes,8,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{30}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetPlaceId() string {
	if m != nil {
		return m.PlaceId
	}
	return ""
}

func (m *Location) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Location) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

func (m *Location) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Location) GetGeo() *GeoCoordinates {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Location) GetDescription() *Text {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Location) GetLocationType() LocationType {
	if m != nil {
		return m.LocationType
	}
	return LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (m *Location) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

// Cancellation policy for a service.
type CancellationPolicy struct {
	// Zero or more refund conditions applicable to the policy.
	RefundCondition      []*CancellationPolicy_RefundCondition `protobuf:"bytes,1,rep,name=refund_condition,json=refundCondition,proto3" json:"refund_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CancellationPolicy) Reset()         { *m = CancellationPolicy{} }
func (m *CancellationPolicy) String() string { return proto.CompactTextString(m) }
func (*CancellationPolicy) ProtoMessage()    {}
func (*CancellationPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{31}
}

func (m *CancellationPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancellationPolicy.Unmarshal(m, b)
}
func (m *CancellationPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancellationPolicy.Marshal(b, m, deterministic)
}
func (m *CancellationPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationPolicy.Merge(m, src)
}
func (m *CancellationPolicy) XXX_Size() int {
	return xxx_messageInfo_CancellationPolicy.Size(m)
}
func (m *CancellationPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationPolicy proto.InternalMessageInfo

func (m *CancellationPolicy) GetRefundCondition() []*CancellationPolicy_RefundCondition {
	if m != nil {
		return m.RefundCondition
	}
	return nil
}

// Defines a single refund condition. Multiple refund conditions could be
// used together to describe "refund steps" as various durations before the
// service start time.
type CancellationPolicy_RefundCondition struct {
	// Duration in seconds before the start time, until when the customer can
	// receive a refund for part of the service's cost specified in
	// `refund_percent`.
	// When set to 0 (default), the service can be cancelled at any time.
	MinDurationBeforeStartTimeSec int64 `protobuf:"varint,1,opt,name=min_duration_before_start_time_sec,json=minDurationBeforeStartTimeSec,proto3" json:"min_duration_before_start_time_sec,omitempty"`
	// The percent that can be refunded, as long as the service booking is
	// cancelled at least `min_duration_before_start_time` before the service
	// start time, in the range of [0, 100]. When set to 0 (default), the
	// service is not refundable. When set to 100 this service is fully
	// refundable.
	RefundPercent        uint32   `protobuf:"varint,2,opt,name=refund_percent,json=refundPercent,proto3" json:"refund_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancellationPolicy_RefundCondition) Reset()         { *m = CancellationPolicy_RefundCondition{} }
func (m *CancellationPolicy_RefundCondition) String() string { return proto.CompactTextString(m) }
func (*CancellationPolicy_RefundCondition) ProtoMessage()    {}
func (*CancellationPolicy_RefundCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{31, 0}
}

func (m *CancellationPolicy_RefundCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancellationPolicy_RefundCondition.Unmarshal(m, b)
}
func (m *CancellationPolicy_RefundCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancellationPolicy_RefundCondition.Marshal(b, m, deterministic)
}
func (m *CancellationPolicy_RefundCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationPolicy_RefundCondition.Merge(m, src)
}
func (m *CancellationPolicy_RefundCondition) XXX_Size() int {
	return xxx_messageInfo_CancellationPolicy_RefundCondition.Size(m)
}
func (m *CancellationPolicy_RefundCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationPolicy_RefundCondition.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationPolicy_RefundCondition proto.InternalMessageInfo

func (m *CancellationPolicy_RefundCondition) GetMinDurationBeforeStartTimeSec() int64 {
	if m != nil {
		return m.MinDurationBeforeStartTimeSec
	}
	return 0
}

func (m *CancellationPolicy_RefundCondition) GetRefundPercent() uint32 {
	if m != nil {
		return m.RefundPercent
	}
	return 0
}

// Photos related to this service. Google will crawl these media to ensure
// that they are displayed correctly to end-users. (optional)
type RelatedMedia struct {
	// URL of this media source. Google will crawl the media hosted at this URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Type of this media source.
	Type RelatedMedia_MediaType `protobuf:"varint,2,opt,name=type,proto3,enum=main.RelatedMedia_MediaType" json:"type,omitempty"`
	// Caption of the media that supports i18n, only plain text is supported. Any
	// HTML components will be stripped. (optional)
	LocalizedCaption *Text `protobuf:"bytes,5,opt,name=localized_caption,json=localizedCaption,proto3" json:"localized_caption,omitempty"`
	// Attribution information about the source of the media. Note that if
	// the attribution is required to display with the media to give credit to
	// photographer or agency, this field must be set. (optional)
	Attribution *RelatedMedia_Attribution `protobuf:"bytes,4,opt,name=attribution,proto3" json:"attribution,omitempty"`
	// Deprecated, prefer to use localized_caption.
	Caption              string   `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelatedMedia) Reset()         { *m = RelatedMedia{} }
func (m *RelatedMedia) String() string { return proto.CompactTextString(m) }
func (*RelatedMedia) ProtoMessage()    {}
func (*RelatedMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{32}
}

func (m *RelatedMedia) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelatedMedia.Unmarshal(m, b)
}
func (m *RelatedMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelatedMedia.Marshal(b, m, deterministic)
}
func (m *RelatedMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelatedMedia.Merge(m, src)
}
func (m *RelatedMedia) XXX_Size() int {
	return xxx_messageInfo_RelatedMedia.Size(m)
}
func (m *RelatedMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_RelatedMedia.DiscardUnknown(m)
}

var xxx_messageInfo_RelatedMedia proto.InternalMessageInfo

func (m *RelatedMedia) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RelatedMedia) GetType() RelatedMedia_MediaType {
	if m != nil {
		return m.Type
	}
	return RelatedMedia_TYPE_UNSPECIFIED
}

func (m *RelatedMedia) GetLocalizedCaption() *Text {
	if m != nil {
		return m.LocalizedCaption
	}
	return nil
}

func (m *RelatedMedia) GetAttribution() *RelatedMedia_Attribution {
	if m != nil {
		return m.Attribution
	}
	return nil
}

// Deprecated: Do not use.
func (m *RelatedMedia) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

// Attribution information for this media.
type RelatedMedia_Attribution struct {
	// The text to give credit to the photographer or agency supporting i18n.
	// This text will be displayed together with the source media. Note that
	// only plain text is supported for this field, any HTML components will be
	// stripped (hyperlink based attribution is not supported).
	LocalizedText *Text `protobuf:"bytes,2,opt,name=localized_text,json=localizedText,proto3" json:"localized_text,omitempty"`
	// Deprecated, prefer to use localized_text.
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelatedMedia_Attribution) Reset()         { *m = RelatedMedia_Attribution{} }
func (m *RelatedMedia_Attribution) String() string { return proto.CompactTextString(m) }
func (*RelatedMedia_Attribution) ProtoMessage()    {}
func (*RelatedMedia_Attribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{32, 0}
}

func (m *RelatedMedia_Attribution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelatedMedia_Attribution.Unmarshal(m, b)
}
func (m *RelatedMedia_Attribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelatedMedia_Attribution.Marshal(b, m, deterministic)
}
func (m *RelatedMedia_Attribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelatedMedia_Attribution.Merge(m, src)
}
func (m *RelatedMedia_Attribution) XXX_Size() int {
	return xxx_messageInfo_RelatedMedia_Attribution.Size(m)
}
func (m *RelatedMedia_Attribution) XXX_DiscardUnknown() {
	xxx_messageInfo_RelatedMedia_Attribution.DiscardUnknown(m)
}

var xxx_messageInfo_RelatedMedia_Attribution proto.InternalMessageInfo

func (m *RelatedMedia_Attribution) GetLocalizedText() *Text {
	if m != nil {
		return m.LocalizedText
	}
	return nil
}

// Deprecated: Do not use.
func (m *RelatedMedia_Attribution) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Identifies a particular value of a service attribute to be applied to a
// Service.
type ServiceAttributeValueId struct {
	// ID of an attribute as defined in Merchant.service_attribute, e.g.
	// "service-type".
	AttributeId string `protobuf:"bytes,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	// ID of the value for this attribute, e.g. "haircut". Must match a value_id
	// in the service attribute definition.
	ValueId              string   `protobuf:"bytes,2,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAttributeValueId) Reset()         { *m = ServiceAttributeValueId{} }
func (m *ServiceAttributeValueId) String() string { return proto.CompactTextString(m) }
func (*ServiceAttributeValueId) ProtoMessage()    {}
func (*ServiceAttributeValueId) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{33}
}

func (m *ServiceAttributeValueId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAttributeValueId.Unmarshal(m, b)
}
func (m *ServiceAttributeValueId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAttributeValueId.Marshal(b, m, deterministic)
}
func (m *ServiceAttributeValueId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAttributeValueId.Merge(m, src)
}
func (m *ServiceAttributeValueId) XXX_Size() int {
	return xxx_messageInfo_ServiceAttributeValueId.Size(m)
}
func (m *ServiceAttributeValueId) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAttributeValueId.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAttributeValueId proto.InternalMessageInfo

func (m *ServiceAttributeValueId) GetAttributeId() string {
	if m != nil {
		return m.AttributeId
	}
	return ""
}

func (m *ServiceAttributeValueId) GetValueId() string {
	if m != nil {
		return m.ValueId
	}
	return ""
}

// Rules related to joining the waitlist.
type WaitlistRules struct {
	// Required. Must be a positive integer for services providing waitlist
	// functionality. If the service or merchant does not provide waitlist
	// functionality, this must not be populated.
	MinPartySize int32 `protobuf:"varint,1,opt,name=min_party_size,json=minPartySize,proto3" json:"min_party_size,omitempty"`
	// Required. Must be a positive integer for services providing waitlist
	// functionality. If the service or merchant does not provide waitlist
	// functionality, this must not be populated.
	MaxPartySize int32 `protobuf:"varint,2,opt,name=max_party_size,json=maxPartySize,proto3" json:"max_party_size,omitempty"`
	// If true, the user will be able to send a free-form additional text request
	// when joining the waitlist for this service.
	SupportsAdditionalRequest bool     `protobuf:"varint,3,opt,name=supports_additional_request,json=supportsAdditionalRequest,proto3" json:"supports_additional_request,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *WaitlistRules) Reset()         { *m = WaitlistRules{} }
func (m *WaitlistRules) String() string { return proto.CompactTextString(m) }
func (*WaitlistRules) ProtoMessage()    {}
func (*WaitlistRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{34}
}

func (m *WaitlistRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitlistRules.Unmarshal(m, b)
}
func (m *WaitlistRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitlistRules.Marshal(b, m, deterministic)
}
func (m *WaitlistRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitlistRules.Merge(m, src)
}
func (m *WaitlistRules) XXX_Size() int {
	return xxx_messageInfo_WaitlistRules.Size(m)
}
func (m *WaitlistRules) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitlistRules.DiscardUnknown(m)
}

var xxx_messageInfo_WaitlistRules proto.InternalMessageInfo

func (m *WaitlistRules) GetMinPartySize() int32 {
	if m != nil {
		return m.MinPartySize
	}
	return 0
}

func (m *WaitlistRules) GetMaxPartySize() int32 {
	if m != nil {
		return m.MaxPartySize
	}
	return 0
}

func (m *WaitlistRules) GetSupportsAdditionalRequest() bool {
	if m != nil {
		return m.SupportsAdditionalRequest
	}
	return false
}

// Additional information unique to the event ticketing vertical.
type TicketingVerticalSpecificData struct {
	// The category of the event. Set only when event falls into one of the
	// predefined categories. (optional)
	EventCategory TicketingVerticalSpecificData_EventCategory `protobuf:"varint,1,opt,name=event_category,json=eventCategory,proto3,enum=main.TicketingVerticalSpecificData_EventCategory" json:"event_category,omitempty"`
	// The URL of the event on the partner's website. (optional)
	EventUrl string `protobuf:"bytes,2,opt,name=event_url,json=eventUrl,proto3" json:"event_url,omitempty"`
	// A list of entities related to the event. (optional)
	Entity               []*TicketingVerticalSpecificData_Entity `protobuf:"bytes,3,rep,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *TicketingVerticalSpecificData) Reset()         { *m = TicketingVerticalSpecificData{} }
func (m *TicketingVerticalSpecificData) String() string { return proto.CompactTextString(m) }
func (*TicketingVerticalSpecificData) ProtoMessage()    {}
func (*TicketingVerticalSpecificData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{35}
}

func (m *TicketingVerticalSpecificData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketingVerticalSpecificData.Unmarshal(m, b)
}
func (m *TicketingVerticalSpecificData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketingVerticalSpecificData.Marshal(b, m, deterministic)
}
func (m *TicketingVerticalSpecificData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketingVerticalSpecificData.Merge(m, src)
}
func (m *TicketingVerticalSpecificData) XXX_Size() int {
	return xxx_messageInfo_TicketingVerticalSpecificData.Size(m)
}
func (m *TicketingVerticalSpecificData) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketingVerticalSpecificData.DiscardUnknown(m)
}

var xxx_messageInfo_TicketingVerticalSpecificData proto.InternalMessageInfo

func (m *TicketingVerticalSpecificData) GetEventCategory() TicketingVerticalSpecificData_EventCategory {
	if m != nil {
		return m.EventCategory
	}
	return TicketingVerticalSpecificData_EVENT_CATEGORY_UNSPECIFIED
}

func (m *TicketingVerticalSpecificData) GetEventUrl() string {
	if m != nil {
		return m.EventUrl
	}
	return ""
}

func (m *TicketingVerticalSpecificData) GetEntity() []*TicketingVerticalSpecificData_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

// Identifiers, webpages, or any other public sources that refernece an
// entity.
type TicketingVerticalSpecificData_PublicIdentificationData struct {
	// Public URL of any webpage that is dedicated to only the topic. This could
	// include official websites, discogs, social media platforms, wikipedia or
	// imdb pages, e.g. https://www.discogs.com/artist/1124645-Taylor-Swift,
	// https://www.wikidata.org/wiki/Q19320959, https://twitter.com/acmilan.
	// (optional)
	RelevantUrl []string `protobuf:"bytes,1,rep,name=relevant_url,json=relevantUrl,proto3" json:"relevant_url,omitempty"`
	// The 36-character musicbrainz identifier of the artist or other music
	// entities, if applicable. See
	// https://musicbrainz.org/doc/MusicBrainz_Identifier.
	// (optional)
	MusicbrainzId        string   `protobuf:"bytes,2,opt,name=musicbrainz_id,json=musicbrainzId,proto3" json:"musicbrainz_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TicketingVerticalSpecificData_PublicIdentificationData) Reset() {
	*m = TicketingVerticalSpecificData_PublicIdentificationData{}
}
func (m *TicketingVerticalSpecificData_PublicIdentificationData) String() string {
	return proto.CompactTextString(m)
}
func (*TicketingVerticalSpecificData_PublicIdentificationData) ProtoMessage() {}
func (*TicketingVerticalSpecificData_PublicIdentificationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{35, 0}
}

func (m *TicketingVerticalSpecificData_PublicIdentificationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketingVerticalSpecificData_PublicIdentificationData.Unmarshal(m, b)
}
func (m *TicketingVerticalSpecificData_PublicIdentificationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketingVerticalSpecificData_PublicIdentificationData.Marshal(b, m, deterministic)
}
func (m *TicketingVerticalSpecificData_PublicIdentificationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketingVerticalSpecificData_PublicIdentificationData.Merge(m, src)
}
func (m *TicketingVerticalSpecificData_PublicIdentificationData) XXX_Size() int {
	return xxx_messageInfo_TicketingVerticalSpecificData_PublicIdentificationData.Size(m)
}
func (m *TicketingVerticalSpecificData_PublicIdentificationData) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketingVerticalSpecificData_PublicIdentificationData.DiscardUnknown(m)
}

var xxx_messageInfo_TicketingVerticalSpecificData_PublicIdentificationData proto.InternalMessageInfo

func (m *TicketingVerticalSpecificData_PublicIdentificationData) GetRelevantUrl() []string {
	if m != nil {
		return m.RelevantUrl
	}
	return nil
}

func (m *TicketingVerticalSpecificData_PublicIdentificationData) GetMusicbrainzId() string {
	if m != nil {
		return m.MusicbrainzId
	}
	return ""
}

// Represents an entity related to the event.
type TicketingVerticalSpecificData_Entity struct {
	// Unique identifier of the entity in the partner's database. (optional)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the entity. (required)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Url of the webpage that unambiguously describes the entity.
	// This is the webpage on the partner's website for the entity if any; for
	// other public URLs of the entity, use relevant_url in
	// public_identification_data. (optional)
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// The type of the entity. (optional)
	EntityType TicketingVerticalSpecificData_Entity_EntityType `protobuf:"varint,4,opt,name=entity_type,json=entityType,proto3,enum=main.TicketingVerticalSpecificData_Entity_EntityType" json:"entity_type,omitempty"`
	// The role of the entity in the event. (optional)
	EntityRole TicketingVerticalSpecificData_Entity_EntityRole `protobuf:"varint,5,opt,name=entity_role,json=entityRole,proto3,enum=main.TicketingVerticalSpecificData_Entity_EntityRole" json:"entity_role,omitempty"`
	// Public references of the entity. (optional)
	PublicIdentificationData *TicketingVerticalSpecificData_PublicIdentificationData `protobuf:"bytes,6,opt,name=public_identification_data,json=publicIdentificationData,proto3" json:"public_identification_data,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                                `json:"-"`
	XXX_unrecognized         []byte                                                  `json:"-"`
	XXX_sizecache            int32                                                   `json:"-"`
}

func (m *TicketingVerticalSpecificData_Entity) Reset()         { *m = TicketingVerticalSpecificData_Entity{} }
func (m *TicketingVerticalSpecificData_Entity) String() string { return proto.CompactTextString(m) }
func (*TicketingVerticalSpecificData_Entity) ProtoMessage()    {}
func (*TicketingVerticalSpecificData_Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{35, 1}
}

func (m *TicketingVerticalSpecificData_Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketingVerticalSpecificData_Entity.Unmarshal(m, b)
}
func (m *TicketingVerticalSpecificData_Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketingVerticalSpecificData_Entity.Marshal(b, m, deterministic)
}
func (m *TicketingVerticalSpecificData_Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketingVerticalSpecificData_Entity.Merge(m, src)
}
func (m *TicketingVerticalSpecificData_Entity) XXX_Size() int {
	return xxx_messageInfo_TicketingVerticalSpecificData_Entity.Size(m)
}
func (m *TicketingVerticalSpecificData_Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketingVerticalSpecificData_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_TicketingVerticalSpecificData_Entity proto.InternalMessageInfo

func (m *TicketingVerticalSpecificData_Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TicketingVerticalSpecificData_Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TicketingVerticalSpecificData_Entity) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TicketingVerticalSpecificData_Entity) GetEntityType() TicketingVerticalSpecificData_Entity_EntityType {
	if m != nil {
		return m.EntityType
	}
	return TicketingVerticalSpecificData_Entity_ENTITY_TYPE_UNSPECIFIED
}

func (m *TicketingVerticalSpecificData_Entity) GetEntityRole() TicketingVerticalSpecificData_Entity_EntityRole {
	if m != nil {
		return m.EntityRole
	}
	return TicketingVerticalSpecificData_Entity_ENTITY_ROLE_UNSPECIFIED
}

func (m *TicketingVerticalSpecificData_Entity) GetPublicIdentificationData() *TicketingVerticalSpecificData_PublicIdentificationData {
	if m != nil {
		return m.PublicIdentificationData
	}
	return nil
}

// Content fields specific to Tours and Activities. Each element in the repeated
// field should be independent to allow separate rendering (e.g. as a bullet
// point).
//
// Populating ToursAndActivitiesContent is strongly recommended for tours and
// activities, but not strictly required. All fields support both plain-text
// and HTML-like text for basic formatting. Supported HTML-like formatting tags:
//
// Phrase tags: <br>, <strong>, <em>, <i>:
//   Only the three tags mentioned above are supported. <br> can be used to
//   break lines in paragraphs, and <strong>/<em> can be used to highlight
//   important text. Any other phrase tags will be ignored.
//
// All other tags and custom styles are not allowed and will be removed. Any
// URLs, anchors, and links will be stripped, and will never be displayed to
// end-users.
//
// Important notes:
//   * Don't duplicate data already supplied in `highlights`, `exclusion` and
//     other, more specific, fields in service description.
//   * Avoid using other tags except for the supported ones mentioned above,
//     because the contents within unsupported tags will be stripped, and may
//     lead to an undesirable user experience.
type ToursAndActivitiesContent struct {
	// The user-visible list of highlights.
	Highlights []*Text `protobuf:"bytes,1,rep,name=highlights,proto3" json:"highlights,omitempty"`
	// The user-visible list of inclusions.
	Inclusions []*Text `protobuf:"bytes,2,rep,name=inclusions,proto3" json:"inclusions,omitempty"`
	// The user-visible list of exclusions.
	Exclusions []*Text `protobuf:"bytes,3,rep,name=exclusions,proto3" json:"exclusions,omitempty"`
	// The user-visible list of important notes, use for details such as age
	// restrictions or other conditions that make this service unsuitable.
	MustKnow             []*Text  `protobuf:"bytes,4,rep,name=must_know,json=mustKnow,proto3" json:"must_know,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToursAndActivitiesContent) Reset()         { *m = ToursAndActivitiesContent{} }
func (m *ToursAndActivitiesContent) String() string { return proto.CompactTextString(m) }
func (*ToursAndActivitiesContent) ProtoMessage()    {}
func (*ToursAndActivitiesContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{36}
}

func (m *ToursAndActivitiesContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToursAndActivitiesContent.Unmarshal(m, b)
}
func (m *ToursAndActivitiesContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToursAndActivitiesContent.Marshal(b, m, deterministic)
}
func (m *ToursAndActivitiesContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToursAndActivitiesContent.Merge(m, src)
}
func (m *ToursAndActivitiesContent) XXX_Size() int {
	return xxx_messageInfo_ToursAndActivitiesContent.Size(m)
}
func (m *ToursAndActivitiesContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ToursAndActivitiesContent.DiscardUnknown(m)
}

var xxx_messageInfo_ToursAndActivitiesContent proto.InternalMessageInfo

func (m *ToursAndActivitiesContent) GetHighlights() []*Text {
	if m != nil {
		return m.Highlights
	}
	return nil
}

func (m *ToursAndActivitiesContent) GetInclusions() []*Text {
	if m != nil {
		return m.Inclusions
	}
	return nil
}

func (m *ToursAndActivitiesContent) GetExclusions() []*Text {
	if m != nil {
		return m.Exclusions
	}
	return nil
}

func (m *ToursAndActivitiesContent) GetMustKnow() []*Text {
	if m != nil {
		return m.MustKnow
	}
	return nil
}

// Defines Rating for an entity.
type Rating struct {
	// Average rating value (required when number_of_ratings > 0).
	// The value must be in the range of [1, 5] and can be omitted if and only if
	// the number_of_ratings is zero.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Number of ratings used in calculating the value (required).
	NumberOfRatings      uint64   `protobuf:"varint,2,opt,name=number_of_ratings,json=numberOfRatings,proto3" json:"number_of_ratings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rating) Reset()         { *m = Rating{} }
func (m *Rating) String() string { return proto.CompactTextString(m) }
func (*Rating) ProtoMessage()    {}
func (*Rating) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{37}
}

func (m *Rating) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rating.Unmarshal(m, b)
}
func (m *Rating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rating.Marshal(b, m, deterministic)
}
func (m *Rating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rating.Merge(m, src)
}
func (m *Rating) XXX_Size() int {
	return xxx_messageInfo_Rating.Size(m)
}
func (m *Rating) XXX_DiscardUnknown() {
	xxx_messageInfo_Rating.DiscardUnknown(m)
}

var xxx_messageInfo_Rating proto.InternalMessageInfo

func (m *Rating) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Rating) GetNumberOfRatings() uint64 {
	if m != nil {
		return m.NumberOfRatings
	}
	return 0
}

type AvailabilityFeed struct {
	Metadata             *FeedMetadata          `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ServiceAvailability  []*ServiceAvailability `protobuf:"bytes,2,rep,name=service_availability,json=serviceAvailability,proto3" json:"service_availability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AvailabilityFeed) Reset()         { *m = AvailabilityFeed{} }
func (m *AvailabilityFeed) String() string { return proto.CompactTextString(m) }
func (*AvailabilityFeed) ProtoMessage()    {}
func (*AvailabilityFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{38}
}

func (m *AvailabilityFeed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailabilityFeed.Unmarshal(m, b)
}
func (m *AvailabilityFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailabilityFeed.Marshal(b, m, deterministic)
}
func (m *AvailabilityFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailabilityFeed.Merge(m, src)
}
func (m *AvailabilityFeed) XXX_Size() int {
	return xxx_messageInfo_AvailabilityFeed.Size(m)
}
func (m *AvailabilityFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailabilityFeed.DiscardUnknown(m)
}

var xxx_messageInfo_AvailabilityFeed proto.InternalMessageInfo

func (m *AvailabilityFeed) GetMetadata() *FeedMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AvailabilityFeed) GetServiceAvailability() []*ServiceAvailability {
	if m != nil {
		return m.ServiceAvailability
	}
	return nil
}

type ServiceAvailability struct {
	// If provided, we will consider the Availability entities provided to be a
	// complete snapshot from [start_timestamp_restrict, end_timestamp_restrict).
	// That is, all existing availability will be deleted if the following
	// condition holds true:
	//
	//    start_timestamp_restrict <= Availability.start_sec &&
	//    Availability.start_sec < end_timestamp_restrict
	//
	// If a duration message is set, the condition is further restricted:
	//   Availability.duration == duration_restrict_sec
	//
	// If a resource_restrict message is set, the condition is further restricted:
	//
	//    Availability.resource.staff_id == resource_restrict.staff_id &&
	//    Availability.resource.room_id == resource_restrict.room_id
	//
	// These fields are typically used to provide a complete update of
	// availability in a given time range.
	//
	// Setting start_timestamp_restrict while leaving end_timestamp_restrict unset
	// is interpreted to mean all time beginning at start_timestamp_restrict.
	//
	// Setting end_timestamp_restrict while leaving start_timestamp_restrict unset
	// is interpreted to mean all time up to the end_timestamp_restrict.
	//
	// In Unix time format (seconds since the epoch) from UTC. (both optional)
	StartTimestampRestrict int64 `protobuf:"varint,1,opt,name=start_timestamp_restrict,json=startTimestampRestrict,proto3" json:"start_timestamp_restrict,omitempty"`
	EndTimestampRestrict   int64 `protobuf:"varint,2,opt,name=end_timestamp_restrict,json=endTimestampRestrict,proto3" json:"end_timestamp_restrict,omitempty"`
	// If provided, the timestamp restricts will be applied only to the given
	// merchant or service.
	//
	// These fields are typically used to provide complete snapshot of
	// availability in a given range (defined above) for a specific merchant or
	// service.
	//
	// Leaving these fields unset, or setting these to the empty string or null,
	// is interpreted to mean that no restrict is intended. (both optional)
	MerchantIdRestrict string `protobuf:"bytes,3,opt,name=merchant_id_restrict,json=merchantIdRestrict,proto3" json:"merchant_id_restrict,omitempty"`
	ServiceIdRestrict  string `protobuf:"bytes,4,opt,name=service_id_restrict,json=serviceIdRestrict,proto3" json:"service_id_restrict,omitempty"`
	// Setting duration further restricts the scope of the update to just the
	// availability with matching duration.
	//
	// In seconds. (optional)
	DurationRestrictSec int64 `protobuf:"varint,7,opt,name=duration_restrict_sec,json=durationRestrictSec,proto3" json:"duration_restrict_sec,omitempty"`
	// Setting resources_restrict further restricts the scope of the update to
	// just this set of resources. All id fields of the resources must match
	// exactly. (optional)
	ResourcesRestrict *Resources `protobuf:"bytes,6,opt,name=resources_restrict,json=resourcesRestrict,proto3" json:"resources_restrict,omitempty"`
	// All Availability Slots included in this Service Availability (required)
	Availability         []*Availability `protobuf:"bytes,5,rep,name=availability,proto3" json:"availability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServiceAvailability) Reset()         { *m = ServiceAvailability{} }
func (m *ServiceAvailability) String() string { return proto.CompactTextString(m) }
func (*ServiceAvailability) ProtoMessage()    {}
func (*ServiceAvailability) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{39}
}

func (m *ServiceAvailability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAvailability.Unmarshal(m, b)
}
func (m *ServiceAvailability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAvailability.Marshal(b, m, deterministic)
}
func (m *ServiceAvailability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAvailability.Merge(m, src)
}
func (m *ServiceAvailability) XXX_Size() int {
	return xxx_messageInfo_ServiceAvailability.Size(m)
}
func (m *ServiceAvailability) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAvailability.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAvailability proto.InternalMessageInfo

func (m *ServiceAvailability) GetStartTimestampRestrict() int64 {
	if m != nil {
		return m.StartTimestampRestrict
	}
	return 0
}

func (m *ServiceAvailability) GetEndTimestampRestrict() int64 {
	if m != nil {
		return m.EndTimestampRestrict
	}
	return 0
}

func (m *ServiceAvailability) GetMerchantIdRestrict() string {
	if m != nil {
		return m.MerchantIdRestrict
	}
	return ""
}

func (m *ServiceAvailability) GetServiceIdRestrict() string {
	if m != nil {
		return m.ServiceIdRestrict
	}
	return ""
}

func (m *ServiceAvailability) GetDurationRestrictSec() int64 {
	if m != nil {
		return m.DurationRestrictSec
	}
	return 0
}

func (m *ServiceAvailability) GetResourcesRestrict() *Resources {
	if m != nil {
		return m.ResourcesRestrict
	}
	return nil
}

func (m *ServiceAvailability) GetAvailability() []*Availability {
	if m != nil {
		return m.Availability
	}
	return nil
}

// An availability of the merchant's service, indicating time and number
// of spots.
// The availability feed should be a list of this message.
// Please note that it's up to the partner to call out all the possible
// availabilities.
// If a massage therapist is available 9am-12pm, and they provide
// one-hour massage sessions, the aggregator should provide the feed as
//   availability {start_sec: 9am, duration: 60 minutes, ...}
//   availability {start_sec: 10am, duration: 60 minutes, ...}
//   availability {start_sec: 11am, duration: 60 minutes, ...}
// instead of
//   availability {start_sec: 9am, duration: 180 minutes, ...}
//
type Availability struct {
	// An opaque string from an aggregator to identify a merchant. (required)
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// An opaque string from aggregator to identify a service of the
	// merchant. (required)
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Start time of this availability, using epoch time in seconds in UTC.
	//(required)
	StartSec int64 `protobuf:"varint,3,opt,name=start_sec,json=startSec,proto3" json:"start_sec,omitempty"`
	// Duration of the service in seconds, e.g. 30 minutes for a chair massage.
	// (required)
	DurationSec int64 `protobuf:"varint,4,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"`
	// Number of total spots and open spots of this availability.
	// E.g. a Yoga class of 10 spots with 3 booked.
	//   availability {spots_total: 10, spots_open: 7 ...}
	// E.g. a chair massage session which was already booked.
	//   availability {spots_total: 1, spots_open: 0 ...}
	//
	// Note: If sending requests using the availability compression format defined
	//       below, these two fields will be inferred. A Recurrence
	//       implies spots_total=1 and spots_open=1. A ScheduleException implies
	//       spots_total=1 and spots_open=0.
	// (both required if recurrence not set)
	SpotsTotal int64 `protobuf:"varint,5,opt,name=spots_total,json=spotsTotal,proto3" json:"spots_total,omitempty"`
	SpotsOpen  int64 `protobuf:"varint,6,opt,name=spots_open,json=spotsOpen,proto3" json:"spots_open,omitempty"`
	// An optional opaque string to identify this availability slot. If set, it
	// will be included in the requests that book/update/cancel appointments.
	// (optional)
	AvailabilityTag string `protobuf:"bytes,7,opt,name=availability_tag,json=availabilityTag,proto3" json:"availability_tag,omitempty"`
	// Optional resources used to disambiguate this availability slot from
	// others when different staff, room, or party_size values are part
	// of the service.
	//
	// E.g. the same Yoga class with two 2 instructors.
	//  availability { resources { staff_id: "1" staff_name: "Amy" }
	//                 spots_total: 10 spots_open: 7 }
	//  availability { resources { staff_id: "2" staff_name: "John" }
	//                 spots_total: 5 spots_open: 2 }
	// (optional)
	Resources *Resources `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"`
	// A list of IDs referencing the payment options which can be used to pay
	// for this slot. The actual payment options are defined at the Merchant
	// level, and can also be shared among multiple Merchants.
	//
	// This field overrides any payment_option_ids specified in the service
	// message. Similarly payment_option_ids specified here do NOT have to be
	// present in the service message, though must be defined at the
	// Merchant level.
	// Our current implementation limits the number of entries in this array to
	// one element. Multiple payment_option_id are still allowed at the Service
	// level, but an override at the availability slot level, is limited to a
	// single payment_option_id. (optional)
	PaymentOptionId []string `protobuf:"bytes,9,rep,name=payment_option_id,json=paymentOptionId,proto3" json:"payment_option_id,omitempty"`
	// The recurrence information for the availability, representing more than one
	// start time. A recurrence should contain appointments for one working day.
	// (optional)
	Recurrence *Availability_Recurrence `protobuf:"bytes,10,opt,name=recurrence,proto3" json:"recurrence,omitempty"`
	// Times when this service cannot be scheduled. To limit the number of
	// schedule_exception messages, consider joining adjacent exceptions.
	// (optional)
	ScheduleException []*Availability_ScheduleException `protobuf:"bytes,11,rep,name=schedule_exception,json=scheduleException,proto3" json:"schedule_exception,omitempty"`
	// Defines how a deposit may be charged to the user. Overrides the service
	// deposit if one was specified. Setting this to an empty Deposit message
	// removes any service-level deposit. (optional)
	Deposit *Deposit `protobuf:"bytes,12,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// Defines a no show fee that may be charged to the user. Overrides the
	// service no show fee if one was specified. Setting this to an empty
	// NoShowFee message removes any service-level no show fee. (optional)
	NoShowFee *NoShowFee `protobuf:"bytes,13,opt,name=no_show_fee,json=noShowFee,proto3" json:"no_show_fee,omitempty"`
	// Indicates whether the user must provide a credit card in order to book this
	// availability slot.
	// If the value is not set, it is inherited from the service level if it's set
	// there. (optional)
	RequireCreditCard RequireCreditCard `protobuf:"varint,14,opt,name=require_credit_card,json=requireCreditCard,proto3,enum=main.RequireCreditCard" json:"require_credit_card,omitempty"`
	// Indicates a list of supported ticket types for this availability slot. If
	// unset, all ticket types in the parent service are available for this slot.
	// Note that the values of this field must be defined in the parent service.
	// Examples:
	//
	// * Service with four ticket types:
	// TicketType {ticket_type_id: "adult_1" short_description: "Adult weekdays"}
	// TicketType {ticket_type_id: "adult_2" short_description: "Adult weekends"}
	// TicketType {ticket_type_id: "youth_1" short_description: "Youth weekdays"}
	// TicketType {ticket_type_id: "youth_2" short_description: "Youth weekends"}
	//
	// To represent the inventory during the weekdays:
	//   `availability {ticket_type_id: "adult_1" ticket_type_id: "youth_1"...}`.
	// To represent the inventory during the holidays:
	//   `availability {ticket_type_id: "adult_2" ticket_type_id: "youth_2"...}`.
	//
	// * Service with three ticket types:
	// TicketType {ticket_type_id: "adult" short_description: "Adult"}
	// TicketType {ticket_type_id: "youth" short_description: "Youth"}
	// TicketType {ticket_type_id: "senior" short_description: "Senior"}
	//
	// To indicate that all three ticket types are available for this time
	// slot, use either
	//   `availability {ticket_type_id: "adult" ticket_type_id: "youth"
	//   ticket_type_id: "senior" ...}`
	// or
	//   `availability {...}' (do not set ticket_type_id in this slot).
	//
	//  (optional)
	TicketTypeId []string `protobuf:"bytes,15,rep,name=ticket_type_id,json=ticketTypeId,proto3" json:"ticket_type_id,omitempty"`
	// Availability scheduling rules. If fields are populated, they will override
	// any corresponding scheduling rules on the service-level SchedulingRules.
	SchedulingRuleOverrides *Availability_SchedulingRuleOverrides `protobuf:"bytes,16,opt,name=scheduling_rule_overrides,json=schedulingRuleOverrides,proto3" json:"scheduling_rule_overrides,omitempty"`
	// The confirmation mode that will be used when booking this availability.
	// Attempts to create bookings for availabilities with a confirmation mode
	// of CONFIRMATION_MODE_SYNCHRONOUS must be immediatlely confirmed or denied.
	// Attempts to create bookings for availabilities with confirmation mode
	// of CONFIRMATION_MODE_ASYNCHRONOUS must be either immediately denied
	// or created with status PENDING. Populating confirmation_mode is strongly
	// recommended, but not strictly required. (optional)
	ConfirmationMode     Availability_ConfirmationMode `protobuf:"varint,17,opt,name=confirmation_mode,json=confirmationMode,proto3,enum=main.Availability_ConfirmationMode" json:"confirmation_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Availability) Reset()         { *m = Availability{} }
func (m *Availability) String() string { return proto.CompactTextString(m) }
func (*Availability) ProtoMessage()    {}
func (*Availability) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{40}
}

func (m *Availability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Availability.Unmarshal(m, b)
}
func (m *Availability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Availability.Marshal(b, m, deterministic)
}
func (m *Availability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Availability.Merge(m, src)
}
func (m *Availability) XXX_Size() int {
	return xxx_messageInfo_Availability.Size(m)
}
func (m *Availability) XXX_DiscardUnknown() {
	xxx_messageInfo_Availability.DiscardUnknown(m)
}

var xxx_messageInfo_Availability proto.InternalMessageInfo

func (m *Availability) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Availability) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *Availability) GetStartSec() int64 {
	if m != nil {
		return m.StartSec
	}
	return 0
}

func (m *Availability) GetDurationSec() int64 {
	if m != nil {
		return m.DurationSec
	}
	return 0
}

func (m *Availability) GetSpotsTotal() int64 {
	if m != nil {
		return m.SpotsTotal
	}
	return 0
}

func (m *Availability) GetSpotsOpen() int64 {
	if m != nil {
		return m.SpotsOpen
	}
	return 0
}

func (m *Availability) GetAvailabilityTag() string {
	if m != nil {
		return m.AvailabilityTag
	}
	return ""
}

func (m *Availability) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Availability) GetPaymentOptionId() []string {
	if m != nil {
		return m.PaymentOptionId
	}
	return nil
}

func (m *Availability) GetRecurrence() *Availability_Recurrence {
	if m != nil {
		return m.Recurrence
	}
	return nil
}

func (m *Availability) GetScheduleException() []*Availability_ScheduleException {
	if m != nil {
		return m.ScheduleException
	}
	return nil
}

func (m *Availability) GetDeposit() *Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *Availability) GetNoShowFee() *NoShowFee {
	if m != nil {
		return m.NoShowFee
	}
	return nil
}

func (m *Availability) GetRequireCreditCard() RequireCreditCard {
	if m != nil {
		return m.RequireCreditCard
	}
	return RequireCreditCard_REQUIRE_CREDIT_CARD_UNSPECIFIED
}

func (m *Availability) GetTicketTypeId() []string {
	if m != nil {
		return m.TicketTypeId
	}
	return nil
}

func (m *Availability) GetSchedulingRuleOverrides() *Availability_SchedulingRuleOverrides {
	if m != nil {
		return m.SchedulingRuleOverrides
	}
	return nil
}

func (m *Availability) GetConfirmationMode() Availability_ConfirmationMode {
	if m != nil {
		return m.ConfirmationMode
	}
	return Availability_CONFIRMATION_MODE_UNSPECIFIED
}

// Recurrence messages are optional, but allow for a more compact
// representation of consistently repeating availability slots. They typically
// represent a day's working schedule.
// ScheduleException messages are then used to represent booked/unavailable
// time ranges within the work day.
//
// Requirements:
//   1. The expansion of availability slots or recurrences must NOT create
//      identical slots. If the ids, start_sec, duration_sec, and resources
//      match, slots are considered identical.
//   2. Do NOT mix the standard availability format and recurrence within the
//      slots of a single service. Recurrence benefits merchants/services that
//      offer appointments. The standard format is geared towards
//      merchants/services with regularly scheduled classes.
type Availability_Recurrence struct {
	// The inclusive maximum UTC timestamp the availability repeats until.
	// (required)
	RepeatUntilSec int64 `protobuf:"varint,1,opt,name=repeat_until_sec,json=repeatUntilSec,proto3" json:"repeat_until_sec,omitempty"`
	// Defines the time between successive availability slots.
	//
	// Example: An availability with a duration of 20 min, a repeat_every_sec of
	// 30 min, a start_sec of 9:00am, and a repeat_until_sec of 11:00am will
	// yield slots at 9-9:20am, 9:30-9:50am, 10-10:20am, 10:30-10:50am,
	// 11-11:20am. (required)
	RepeatEverySec       int32    `protobuf:"varint,2,opt,name=repeat_every_sec,json=repeatEverySec,proto3" json:"repeat_every_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Availability_Recurrence) Reset()         { *m = Availability_Recurrence{} }
func (m *Availability_Recurrence) String() string { return proto.CompactTextString(m) }
func (*Availability_Recurrence) ProtoMessage()    {}
func (*Availability_Recurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{40, 0}
}

func (m *Availability_Recurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Availability_Recurrence.Unmarshal(m, b)
}
func (m *Availability_Recurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Availability_Recurrence.Marshal(b, m, deterministic)
}
func (m *Availability_Recurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Availability_Recurrence.Merge(m, src)
}
func (m *Availability_Recurrence) XXX_Size() int {
	return xxx_messageInfo_Availability_Recurrence.Size(m)
}
func (m *Availability_Recurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_Availability_Recurrence.DiscardUnknown(m)
}

var xxx_messageInfo_Availability_Recurrence proto.InternalMessageInfo

func (m *Availability_Recurrence) GetRepeatUntilSec() int64 {
	if m != nil {
		return m.RepeatUntilSec
	}
	return 0
}

func (m *Availability_Recurrence) GetRepeatEverySec() int32 {
	if m != nil {
		return m.RepeatEverySec
	}
	return 0
}

// ScheduleException messages represent booked/unavailable time ranges within
// the workday, which are exceptions to the recurrence described above. As
// time slots are booked, the list of exceptions should be updated to reflect
// the newly unavailable time ranges. The recurrence itself shouldn't be
// modified.
type Availability_ScheduleException struct {
	// The time range of the exception. Any slots described by the recurrence
	// which overlap this closed-open time range will be considered unavailable.
	//
	// Example: If the recurrence specifies a duration of 20 min, a
	// repeat_every_sec of 30 min, a start_time of 9:00am, and a
	// repeat_until_sec of 11:00am, then a ScheduleException with a time_range
	// of 9:45am-11:00am would make unavailable the slots at 9:30-9:50am,
	// 10-10:20am, and 10:30-10:50am.
	//
	// Note that because the time range is closed-open, the slot beginning at
	// 11am slot would not be impacted.
	TimeRange            *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Availability_ScheduleException) Reset()         { *m = Availability_ScheduleException{} }
func (m *Availability_ScheduleException) String() string { return proto.CompactTextString(m) }
func (*Availability_ScheduleException) ProtoMessage()    {}
func (*Availability_ScheduleException) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{40, 1}
}

func (m *Availability_ScheduleException) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Availability_ScheduleException.Unmarshal(m, b)
}
func (m *Availability_ScheduleException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Availability_ScheduleException.Marshal(b, m, deterministic)
}
func (m *Availability_ScheduleException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Availability_ScheduleException.Merge(m, src)
}
func (m *Availability_ScheduleException) XXX_Size() int {
	return xxx_messageInfo_Availability_ScheduleException.Size(m)
}
func (m *Availability_ScheduleException) XXX_DiscardUnknown() {
	xxx_messageInfo_Availability_ScheduleException.DiscardUnknown(m)
}

var xxx_messageInfo_Availability_ScheduleException proto.InternalMessageInfo

func (m *Availability_ScheduleException) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

// Availability level scheduling rules.
type Availability_SchedulingRuleOverrides struct {
	// The last time (in seconds) that this slot is able to be booked. This
	// timestamp must be before the start_sec of the slot to be respected
	// (if users should be able to book after the start time, use service level
	// SchedulingRules.min_booking_buffer_before_end_time). If present, will
	// override anything specified in the min_booking_buffer of the
	// corresponding Service's SchedulingRules.
	LastBookableSec int64 `protobuf:"varint,1,opt,name=last_bookable_sec,json=lastBookableSec,proto3" json:"last_bookable_sec,omitempty"`
	// The first time (in seconds) that this slot is able to be booked.
	FirstBookableSec     int64    `protobuf:"varint,2,opt,name=first_bookable_sec,json=firstBookableSec,proto3" json:"first_bookable_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Availability_SchedulingRuleOverrides) Reset()         { *m = Availability_SchedulingRuleOverrides{} }
func (m *Availability_SchedulingRuleOverrides) String() string { return proto.CompactTextString(m) }
func (*Availability_SchedulingRuleOverrides) ProtoMessage()    {}
func (*Availability_SchedulingRuleOverrides) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{40, 2}
}

func (m *Availability_SchedulingRuleOverrides) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Availability_SchedulingRuleOverrides.Unmarshal(m, b)
}
func (m *Availability_SchedulingRuleOverrides) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Availability_SchedulingRuleOverrides.Marshal(b, m, deterministic)
}
func (m *Availability_SchedulingRuleOverrides) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Availability_SchedulingRuleOverrides.Merge(m, src)
}
func (m *Availability_SchedulingRuleOverrides) XXX_Size() int {
	return xxx_messageInfo_Availability_SchedulingRuleOverrides.Size(m)
}
func (m *Availability_SchedulingRuleOverrides) XXX_DiscardUnknown() {
	xxx_messageInfo_Availability_SchedulingRuleOverrides.DiscardUnknown(m)
}

var xxx_messageInfo_Availability_SchedulingRuleOverrides proto.InternalMessageInfo

func (m *Availability_SchedulingRuleOverrides) GetLastBookableSec() int64 {
	if m != nil {
		return m.LastBookableSec
	}
	return 0
}

func (m *Availability_SchedulingRuleOverrides) GetFirstBookableSec() int64 {
	if m != nil {
		return m.FirstBookableSec
	}
	return 0
}

// A resource is used to disambiguate availability slots from one another when
// different staff, room or party_size values are part of the service.
// Multiple slots for the same service and time interval can co-exist when they
// have different resources.
type Resources struct {
	// Optional ID for a staff member providing the service. This field identifies
	// the staff member across all merchants, services, and availability records.
	// It also needs to be stable over time to allow correlation with past
	// bookings. (optional but required if staff_name is present)
	StaffId string `protobuf:"bytes,1,opt,name=staff_id,json=staffId,proto3" json:"staff_id,omitempty"`
	// Optional name of a staff member providing the service. This field will be
	// displayed to users making a booking, and should be human-readable, as
	// opposed to an opaque identifier. (optional but required if staff_id is
	// present)
	StaffName string `protobuf:"bytes,2,opt,name=staff_name,json=staffName,proto3" json:"staff_name,omitempty"`
	// An optional ID for the room the service is located in. This field
	// identifies the room across all merchants, services, and availability
	// records. It also needs to be stable over time to allow correlation with
	// past bookings. (optional but required if room_name is present)
	RoomId string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// An optional name for the room the service is located in. This
	// field will be displayed to users making a booking, and should be human
	// readable, as opposed to an opaque identifier. (optional but required if
	// room_id is present)
	// In dining a room name should only be used for seating areas such as the bar
	// or patio and should not be used for fixed price menus, special activities,
	// or any other non-room value (such as reservation or dinner). It is strongly
	// recommended that the default seating area not have a room associated with
	// it.
	RoomName string `protobuf:"bytes,4,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// Applicable only for Dining: The party size that can be accommodated
	// during this time slot. A restaurant can be associated with multiple Slots
	// for the same time, each specifying a different party_size, if for instance
	// 2, 3, or 4 people can be seated with a reservation. (optional)
	PartySize            int32    `protobuf:"varint,5,opt,name=party_size,json=partySize,proto3" json:"party_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resources) Reset()         { *m = Resources{} }
func (m *Resources) String() string { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()    {}
func (*Resources) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aa923a38d4cd9d3, []int{41}
}

func (m *Resources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resources.Unmarshal(m, b)
}
func (m *Resources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resources.Marshal(b, m, deterministic)
}
func (m *Resources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources.Merge(m, src)
}
func (m *Resources) XXX_Size() int {
	return xxx_messageInfo_Resources.Size(m)
}
func (m *Resources) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources.DiscardUnknown(m)
}

var xxx_messageInfo_Resources proto.InternalMessageInfo

func (m *Resources) GetStaffId() string {
	if m != nil {
		return m.StaffId
	}
	return ""
}

func (m *Resources) GetStaffName() string {
	if m != nil {
		return m.StaffName
	}
	return ""
}

func (m *Resources) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *Resources) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *Resources) GetPartySize() int32 {
	if m != nil {
		return m.PartySize
	}
	return 0
}

func init() {
	proto.RegisterEnum("main.PriceInterpretation", PriceInterpretation_name, PriceInterpretation_value)
	proto.RegisterEnum("main.PriceType", PriceType_name, PriceType_value)
	proto.RegisterEnum("main.RequireCreditCard", RequireCreditCard_name, RequireCreditCard_value)
	proto.RegisterEnum("main.ActionPlatform", ActionPlatform_name, ActionPlatform_value)
	proto.RegisterEnum("main.LocationType", LocationType_name, LocationType_value)
	proto.RegisterEnum("main.IntegrationType", IntegrationType_name, IntegrationType_value)
	proto.RegisterEnum("main.FeedMetadata_ProcessingInstruction", FeedMetadata_ProcessingInstruction_name, FeedMetadata_ProcessingInstruction_value)
	proto.RegisterEnum("main.CreditCardRestrictions_CreditCardType", CreditCardRestrictions_CreditCardType_name, CreditCardRestrictions_CreditCardType_value)
	proto.RegisterEnum("main.PaymentOption_PaymentOptionType", PaymentOption_PaymentOptionType_name, PaymentOption_PaymentOptionType_value)
	proto.RegisterEnum("main.PaymentOption_ActivationType", PaymentOption_ActivationType_name, PaymentOption_ActivationType_value)
	proto.RegisterEnum("main.PaymentProcessorConfig_Processor", PaymentProcessorConfig_Processor_name, PaymentProcessorConfig_Processor_value)
	proto.RegisterEnum("main.TokenizationConfig_BillingInformationFormat", TokenizationConfig_BillingInformationFormat_name, TokenizationConfig_BillingInformationFormat_value)
	proto.RegisterEnum("main.TokenizationConfig_AuthMethod", TokenizationConfig_AuthMethod_name, TokenizationConfig_AuthMethod_value)
	proto.RegisterEnum("main.Service_PrepaymentType", Service_PrepaymentType_name, Service_PrepaymentType_value)
	proto.RegisterEnum("main.Service_ServiceType", Service_ServiceType_name, Service_ServiceType_value)
	proto.RegisterEnum("main.SchedulingRules_AdmissionPolicy", SchedulingRules_AdmissionPolicy_name, SchedulingRules_AdmissionPolicy_value)
	proto.RegisterEnum("main.ServiceIntakeFormField_FieldType", ServiceIntakeFormField_FieldType_name, ServiceIntakeFormField_FieldType_value)
	proto.RegisterEnum("main.RelatedMedia_MediaType", RelatedMedia_MediaType_name, RelatedMedia_MediaType_value)
	proto.RegisterEnum("main.TicketingVerticalSpecificData_EventCategory", TicketingVerticalSpecificData_EventCategory_name, TicketingVerticalSpecificData_EventCategory_value)
	proto.RegisterEnum("main.TicketingVerticalSpecificData_Entity_EntityType", TicketingVerticalSpecificData_Entity_EntityType_name, TicketingVerticalSpecificData_Entity_EntityType_value)
	proto.RegisterEnum("main.TicketingVerticalSpecificData_Entity_EntityRole", TicketingVerticalSpecificData_Entity_EntityRole_name, TicketingVerticalSpecificData_Entity_EntityRole_value)
	proto.RegisterEnum("main.Availability_ConfirmationMode", Availability_ConfirmationMode_name, Availability_ConfirmationMode_value)
	proto.RegisterType((*FeedMetadata)(nil), "main.FeedMetadata")
	proto.RegisterType((*MerchantFeed)(nil), "main.MerchantFeed")
	proto.RegisterType((*Merchant)(nil), "main.Merchant")
	proto.RegisterType((*GeoCoordinates)(nil), "main.GeoCoordinates")
	proto.RegisterType((*PostalAddress)(nil), "main.PostalAddress")
	proto.RegisterType((*TaxRate)(nil), "main.TaxRate")
	proto.RegisterType((*CreditCardRestrictions)(nil), "main.CreditCardRestrictions")
	proto.RegisterType((*PaymentRestrictions)(nil), "main.PaymentRestrictions")
	proto.RegisterType((*PaymentOption)(nil), "main.PaymentOption")
	proto.RegisterType((*UserPurchaseRestriction)(nil), "main.UserPurchaseRestriction")
	proto.RegisterType((*TimeRange)(nil), "main.TimeRange")
	proto.RegisterType((*PaymentProcessorConfig)(nil), "main.PaymentProcessorConfig")
	proto.RegisterType((*TokenizationConfig)(nil), "main.TokenizationConfig")
	proto.RegisterMapType((map[string]string)(nil), "main.TokenizationConfig.TokenizationParameterEntry")
	proto.RegisterType((*TokenizationConfig_CardNetworkParameters)(nil), "main.TokenizationConfig.CardNetworkParameters")
	proto.RegisterType((*Terms)(nil), "main.Terms")
	proto.RegisterType((*MerchantMatchingHints)(nil), "main.MerchantMatchingHints")
	proto.RegisterType((*ServiceAttribute)(nil), "main.ServiceAttribute")
	proto.RegisterType((*ServiceAttribute_Value)(nil), "main.ServiceAttribute.Value")
	proto.RegisterType((*ServiceFeed)(nil), "main.ServiceFeed")
	proto.RegisterType((*Service)(nil), "main.Service")
	proto.RegisterType((*Price)(nil), "main.Price")
	proto.RegisterType((*Text)(nil), "main.Text")
	proto.RegisterType((*LocalizedString)(nil), "main.LocalizedString")
	proto.RegisterType((*SchedulingRules)(nil), "main.SchedulingRules")
	proto.RegisterType((*ServiceIntakeFormField)(nil), "main.ServiceIntakeFormField")
	proto.RegisterType((*ServiceIntakeForm)(nil), "main.ServiceIntakeForm")
	proto.RegisterType((*Deposit)(nil), "main.Deposit")
	proto.RegisterType((*NoShowFee)(nil), "main.NoShowFee")
	proto.RegisterType((*ActionLink)(nil), "main.ActionLink")
	proto.RegisterType((*PerOrderFee)(nil), "main.PerOrderFee")
	proto.RegisterType((*PerTicketFee)(nil), "main.PerTicketFee")
	proto.RegisterType((*TicketType)(nil), "main.TicketType")
	proto.RegisterType((*Location)(nil), "main.Location")
	proto.RegisterType((*CancellationPolicy)(nil), "main.CancellationPolicy")
	proto.RegisterType((*CancellationPolicy_RefundCondition)(nil), "main.CancellationPolicy.RefundCondition")
	proto.RegisterType((*RelatedMedia)(nil), "main.RelatedMedia")
	proto.RegisterType((*RelatedMedia_Attribution)(nil), "main.RelatedMedia.Attribution")
	proto.RegisterType((*ServiceAttributeValueId)(nil), "main.ServiceAttributeValueId")
	proto.RegisterType((*WaitlistRules)(nil), "main.WaitlistRules")
	proto.RegisterType((*TicketingVerticalSpecificData)(nil), "main.TicketingVerticalSpecificData")
	proto.RegisterType((*TicketingVerticalSpecificData_PublicIdentificationData)(nil), "main.TicketingVerticalSpecificData.PublicIdentificationData")
	proto.RegisterType((*TicketingVerticalSpecificData_Entity)(nil), "main.TicketingVerticalSpecificData.Entity")
	proto.RegisterType((*ToursAndActivitiesContent)(nil), "main.ToursAndActivitiesContent")
	proto.RegisterType((*Rating)(nil), "main.Rating")
	proto.RegisterType((*AvailabilityFeed)(nil), "main.AvailabilityFeed")
	proto.RegisterType((*ServiceAvailability)(nil), "main.ServiceAvailability")
	proto.RegisterType((*Availability)(nil), "main.Availability")
	proto.RegisterType((*Availability_Recurrence)(nil), "main.Availability.Recurrence")
	proto.RegisterType((*Availability_ScheduleException)(nil), "main.Availability.ScheduleException")
	proto.RegisterType((*Availability_SchedulingRuleOverrides)(nil), "main.Availability.SchedulingRuleOverrides")
	proto.RegisterType((*Resources)(nil), "main.Resources")
}

func init() { proto.RegisterFile("feeds.proto", fileDescriptor_7aa923a38d4cd9d3) }

var fileDescriptor_7aa923a38d4cd9d3 = []byte{
	// 5625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7b, 0x4b, 0x6f, 0x23, 0x49,
	0x76, 0x6e, 0x93, 0xd4, 0x8b, 0x87, 0x22, 0x95, 0x0a, 0xbd, 0x28, 0x95, 0xd4, 0x55, 0x9d, 0xfd,
	0x98, 0xba, 0x35, 0x3d, 0xea, 0x6a, 0xd5, 0xf4, 0x74, 0x63, 0x30, 0x77, 0x66, 0x52, 0x64, 0xaa,
	0x94, 0x53, 0x14, 0x93, 0x37, 0x48, 0xd5, 0x63, 0x30, 0x40, 0x76, 0x8a, 0x19, 0x92, 0x72, 0x8a,
	0xcc, 0xe4, 0x64, 0x26, 0xab, 0x4a, 0x8d, 0x3b, 0xb8, 0x8b, 0x0b, 0x2f, 0x0d, 0x18, 0x18, 0x78,
	0x61, 0x1b, 0x5e, 0xce, 0xce, 0x80, 0x01, 0xc3, 0x2b, 0xc3, 0x5e, 0x79, 0xe3, 0xf1, 0xca, 0xb0,
	0x7f, 0x81, 0xb7, 0x5e, 0xd8, 0x0b, 0x2f, 0x0c, 0x78, 0x65, 0xc4, 0x89, 0xc8, 0x17, 0x99, 0xaa,
	0xe9, 0x1e, 0x03, 0xde, 0x54, 0x31, 0xce, 0xf9, 0x4e, 0x44, 0x64, 0x3c, 0x4e, 0x7c, 0xe7, 0x44,
	0x08, 0x6a, 0x97, 0x8c, 0x39, 0xe1, 0xe1, 0x24, 0xf0, 0x23, 0x9f, 0x2c, 0x8c, 0x6d, 0xd7, 0x53,
	0xff, 0xb9, 0x0c, 0xab, 0x27, 0x8c, 0x39, 0x67, 0x2c, 0xb2, 0x1d, 0x3b, 0xb2, 0x89, 0x05, 0xdb,
	0x93, 0xc0, 0x1f, 0xb2, 0x30, 0x74, 0xbd, 0x2b, 0xcb, 0xf5, 0xc2, 0x28, 0x98, 0x0e, 0x23, 0xd7,
	0xf7, 0x9a, 0xa5, 0x7b, 0xa5, 0xfb, 0x8d, 0xa3, 0xfb, 0x87, 0xdc, 0xee, 0x30, 0x6b, 0x73, 0xd8,
	0x4b, 0x0c, 0x8c, 0x14, 0x4f, 0xb7, 0x26, 0x45, 0x62, 0xf2, 0x1e, 0xac, 0x86, 0xd7, 0x76, 0xe0,
	0x58, 0xde, 0x74, 0x7c, 0xc1, 0x82, 0x66, 0xf9, 0x5e, 0xe9, 0xfe, 0x22, 0xad, 0xa1, 0xac, 0x8b,
	0x22, 0x0e, 0x89, 0xfc, 0xc8, 0x1e, 0x59, 0x28, 0x0c, 0x9b, 0x15, 0x01, 0x41, 0x59, 0x1f, 0x45,
	0x64, 0x13, 0x16, 0x3d, 0xdf, 0x1b, 0xb2, 0xe6, 0xe2, 0xbd, 0xd2, 0xfd, 0x05, 0x2a, 0x0a, 0xe4,
	0x53, 0xd8, 0xbc, 0x62, 0x1e, 0x0b, 0x6c, 0xde, 0x92, 0x15, 0xb9, 0x63, 0x16, 0x46, 0xf6, 0x78,
	0xd2, 0x5c, 0xb8, 0x57, 0xba, 0x5f, 0xa1, 0x1b, 0xa9, 0x6e, 0x10, 0xab, 0x54, 0x1b, 0xb6, 0x0a,
	0xbb, 0x4f, 0x36, 0x60, 0xad, 0x47, 0xcd, 0x96, 0xde, 0xef, 0x5b, 0xe7, 0xdd, 0x27, 0x5d, 0xf3,
	0x59, 0x57, 0x79, 0x87, 0xec, 0xc0, 0x46, 0x2c, 0xd4, 0xfa, 0x56, 0xcb, 0x3c, 0xeb, 0x75, 0xf4,
	0x81, 0xae, 0x94, 0xc8, 0x1e, 0x6c, 0x67, 0x14, 0x46, 0xb7, 0x45, 0xf5, 0x33, 0xbd, 0x3b, 0xd0,
	0x3a, 0x4a, 0x59, 0xfd, 0x39, 0xac, 0x9e, 0xb1, 0x60, 0x78, 0x6d, 0x7b, 0x11, 0x1f, 0x36, 0x72,
	0x08, 0x2b, 0x63, 0x39, 0x74, 0x38, 0xa8, 0xb5, 0x23, 0x32, 0x3f, 0xa8, 0x34, 0xc1, 0x90, 0x07,
	0x1c, 0x2f, 0xec, 0x9b, 0xe5, 0x7b, 0x95, 0xfb, 0xb5, 0xa3, 0x86, 0xc0, 0xc7, 0xb5, 0xd2, 0x44,
	0xaf, 0xfe, 0xd5, 0x12, 0xac, 0xc4, 0x62, 0x72, 0x17, 0x6a, 0xb1, 0xc2, 0x72, 0x1d, 0x6c, 0xab,
	0x4a, 0x21, 0x16, 0x19, 0x0e, 0x21, 0xb0, 0xe0, 0xd9, 0x63, 0x86, 0x73, 0x50, 0xa5, 0xf8, 0x9b,
	0xec, 0x43, 0x35, 0x62, 0x23, 0x36, 0xb9, 0xf6, 0x3d, 0x86, 0x23, 0x5f, 0xa5, 0xa9, 0x80, 0x28,
	0x50, 0x99, 0x06, 0x23, 0x1c, 0xd0, 0x2a, 0xe5, 0x3f, 0xc9, 0x47, 0x50, 0xb9, 0x62, 0x3e, 0xce,
	0x43, 0xed, 0x68, 0x53, 0x74, 0xec, 0x31, 0xf3, 0x5b, 0xbe, 0x1f, 0x38, 0xae, 0x67, 0x47, 0x2c,
	0xa4, 0x1c, 0x40, 0xf6, 0x60, 0x65, 0x68, 0x47, 0xec, 0xca, 0x0f, 0x6e, 0x9a, 0x4b, 0x68, 0x9e,
	0x94, 0xc9, 0xc7, 0xa0, 0x78, 0xd3, 0xb1, 0x75, 0xe1, 0xfb, 0x2f, 0x5d, 0xef, 0x2a, 0xb4, 0x1e,
	0x3d, 0x74, 0x9a, 0xcb, 0x7c, 0xce, 0x8e, 0xcb, 0xcd, 0x12, 0x6d, 0x78, 0xd3, 0xf1, 0xb1, 0x54,
	0x3d, 0x7a, 0xe8, 0x90, 0xcf, 0x60, 0x2b, 0xb2, 0xdf, 0x58, 0x81, 0x1d, 0x31, 0xeb, 0xc2, 0x0e,
	0xdd, 0xd0, 0x9a, 0xf8, 0xae, 0x17, 0x85, 0xcd, 0x95, 0x7b, 0xa5, 0xfb, 0x75, 0x34, 0x21, 0x91,
	0xfd, 0x86, 0xda, 0x11, 0x3b, 0xe6, 0xea, 0x1e, 0x6a, 0xc9, 0x7d, 0x58, 0x89, 0xcd, 0x9a, 0x55,
	0xec, 0x6d, 0x5d, 0xf4, 0x76, 0x20, 0xb0, 0x74, 0x59, 0x1a, 0x91, 0x0e, 0x6c, 0x4e, 0xec, 0x9b,
	0x31, 0xf3, 0x22, 0x2b, 0x60, 0x61, 0x14, 0xb8, 0xb8, 0x22, 0xc2, 0x26, 0xa0, 0xd5, 0xae, 0xb0,
	0xea, 0x09, 0x04, 0xcd, 0x00, 0xe8, 0xc6, 0x64, 0x5e, 0x48, 0xbe, 0x0f, 0x8d, 0xb8, 0x36, 0x7f,
	0x82, 0x3b, 0xa9, 0x86, 0x93, 0xb8, 0x91, 0xab, 0xc7, 0x44, 0x15, 0xad, 0x4f, 0xb2, 0x45, 0xf2,
	0x53, 0x68, 0xc6, 0xb6, 0x72, 0x37, 0xf9, 0x81, 0x35, 0xf4, 0xbd, 0x4b, 0xf7, 0xaa, 0xb9, 0x8a,
	0xbd, 0xd9, 0xcf, 0xd5, 0xd2, 0x8b, 0x41, 0x2d, 0xc4, 0xe0, 0x58, 0x6c, 0x4f, 0x0a, 0x75, 0xc4,
	0x80, 0x8d, 0xc8, 0x7f, 0xc9, 0x3c, 0xf7, 0x2b, 0xb1, 0x5d, 0x64, 0xb5, 0x6b, 0x58, 0x6d, 0x53,
	0x0e, 0x4d, 0x06, 0x20, 0xcc, 0x28, 0x89, 0xe6, 0x64, 0xe4, 0x3d, 0x58, 0x8c, 0x58, 0x30, 0x0e,
	0x9b, 0x75, 0x34, 0xae, 0x49, 0x63, 0x2e, 0xa2, 0x42, 0x43, 0x76, 0x61, 0xe5, 0x22, 0xb0, 0x3d,
	0x87, 0x2f, 0xc4, 0x06, 0x4e, 0xff, 0x32, 0x96, 0x0d, 0x87, 0x1c, 0x43, 0x63, 0x6c, 0x47, 0xc3,
	0x6b, 0xee, 0x70, 0xae, 0x71, 0x22, 0x15, 0xac, 0xe6, 0x4e, 0x7e, 0x95, 0x9f, 0x49, 0xcc, 0x29,
	0x87, 0xd0, 0xfa, 0x38, 0x5b, 0x24, 0x2d, 0x58, 0x0f, 0x59, 0xf0, 0xca, 0x1d, 0x32, 0xcb, 0x8e,
	0xa2, 0xc0, 0xbd, 0x98, 0x46, 0xac, 0xb9, 0x8e, 0xe3, 0xbc, 0x2d, 0xaa, 0xe9, 0x0b, 0xb5, 0x16,
	0x6b, 0xa9, 0x12, 0xce, 0x48, 0xd4, 0xbf, 0x29, 0x41, 0x23, 0xbf, 0x74, 0xf9, 0xaa, 0x1d, 0xd9,
	0x91, 0x1b, 0x4d, 0x1d, 0x86, 0xfb, 0xa7, 0x44, 0x93, 0x32, 0xdf, 0x29, 0x23, 0xdf, 0xbb, 0x12,
	0xca, 0x32, 0x2a, 0x53, 0x01, 0xf9, 0x04, 0x96, 0x6d, 0xc7, 0x09, 0x58, 0x28, 0xfc, 0x57, 0x3a,
	0xdf, 0x7e, 0x18, 0xd9, 0x23, 0x4d, 0xa8, 0x4e, 0xdf, 0xa1, 0x31, 0x8a, 0x3c, 0x82, 0xcd, 0xa9,
	0xf4, 0x3f, 0xd3, 0x80, 0x39, 0x56, 0x6c, 0x8d, 0x7b, 0xed, 0xf4, 0x1d, 0xba, 0x91, 0xd5, 0x4a,
	0xfb, 0xe3, 0x1a, 0x54, 0x25, 0x8e, 0x85, 0xea, 0xaf, 0x4b, 0x50, 0xcf, 0x55, 0x4f, 0x9a, 0xb0,
	0x3c, 0xf4, 0xa7, 0x5e, 0x14, 0xdc, 0xc8, 0xdd, 0x1f, 0x17, 0xf1, 0xc3, 0xfc, 0xa1, 0x3d, 0x72,
	0xa3, 0x1b, 0xb9, 0xfd, 0x93, 0x32, 0xd9, 0x86, 0xa5, 0x80, 0x5d, 0xf1, 0x95, 0x2a, 0xf6, 0xbf,
	0x2c, 0x71, 0x7f, 0x32, 0xc1, 0xea, 0xad, 0xa1, 0xef, 0x30, 0xe9, 0x04, 0x40, 0x88, 0x5a, 0xbe,
	0xc3, 0xc8, 0x87, 0xd0, 0x08, 0xa3, 0x80, 0xb1, 0x28, 0xe9, 0xfc, 0x22, 0x62, 0xea, 0x42, 0x2a,
	0x7b, 0xa5, 0x1e, 0xc2, 0xb2, 0xdc, 0x73, 0xe4, 0x7d, 0xa8, 0x8f, 0xdd, 0x61, 0xe0, 0x5b, 0x13,
	0x16, 0x0c, 0x99, 0x17, 0x61, 0x37, 0x17, 0xe9, 0x2a, 0x0a, 0x7b, 0x42, 0xa6, 0xfe, 0x4b, 0x09,
	0xb6, 0x5b, 0x01, 0x73, 0xdc, 0xa8, 0x65, 0x07, 0x4e, 0x6e, 0x73, 0x9d, 0x83, 0x32, 0x44, 0x8d,
	0x35, 0xe4, 0x67, 0x4a, 0x74, 0x33, 0xe1, 0xf3, 0x54, 0xb9, 0xdf, 0x38, 0xfa, 0xb6, 0x18, 0xee,
	0x62, 0xbb, 0x8c, 0x78, 0x70, 0x33, 0x61, 0xb4, 0x31, 0xcc, 0x95, 0xd5, 0x1b, 0x68, 0xe4, 0x11,
	0xe4, 0x1e, 0xec, 0xb7, 0xa8, 0xde, 0x36, 0x06, 0x56, 0x4b, 0xa3, 0x6d, 0x6b, 0xf0, 0xa2, 0xa7,
	0x5b, 0xe7, 0xdd, 0x7e, 0x4f, 0x6f, 0x19, 0x27, 0x86, 0xde, 0x56, 0xde, 0x21, 0x2b, 0xb0, 0xf0,
	0xd4, 0xe8, 0x6b, 0x4a, 0x89, 0x34, 0x00, 0xce, 0xb4, 0xfe, 0x40, 0xa7, 0x1c, 0xaa, 0x94, 0xc9,
	0x26, 0x28, 0xda, 0x99, 0x4e, 0x8d, 0x96, 0xd6, 0xb5, 0xf4, 0xe7, 0x3d, 0xaa, 0xf7, 0xfb, 0x4a,
	0x85, 0xac, 0xc2, 0x4a, 0xdb, 0xe8, 0xb7, 0xcc, 0xa7, 0x3a, 0x55, 0x16, 0xc8, 0x32, 0x54, 0x7e,
	0xd2, 0x3a, 0x56, 0x16, 0xd5, 0x31, 0x6c, 0x14, 0xb8, 0x16, 0xf2, 0x14, 0x9a, 0xd9, 0x0f, 0xcd,
	0xf9, 0xa5, 0x52, 0xd6, 0x13, 0x14, 0x7f, 0x30, 0xdd, 0x1e, 0x16, 0xca, 0xd5, 0xff, 0x58, 0x82,
	0x7a, 0xce, 0x05, 0x91, 0x07, 0xb0, 0x9e, 0xf7, 0x57, 0xe9, 0xd9, 0xb1, 0x96, 0xf3, 0x4e, 0xb7,
	0x1c, 0x20, 0xf7, 0xa0, 0xe6, 0xb0, 0x70, 0x18, 0xb8, 0xc2, 0xd9, 0x89, 0x25, 0x94, 0x15, 0x71,
	0x77, 0x31, 0x09, 0xdc, 0xa1, 0x58, 0x41, 0x89, 0xbb, 0xe8, 0x71, 0x11, 0x15, 0x9a, 0x9c, 0xb3,
	0x5e, 0x7c, 0xab, 0xb3, 0x3e, 0x87, 0x8d, 0x99, 0xee, 0xe2, 0x22, 0x58, 0x42, 0xb6, 0xf2, 0x61,
	0x81, 0x8f, 0xcd, 0x97, 0x70, 0xfa, 0xd7, 0x27, 0xb3, 0x22, 0xbe, 0x30, 0x43, 0x4e, 0x0a, 0xd0,
	0x31, 0x4e, 0xbd, 0x48, 0x9c, 0x47, 0x74, 0x55, 0x0a, 0x5b, 0x5c, 0x46, 0x7e, 0x00, 0xeb, 0x93,
	0x29, 0xf7, 0x4e, 0x21, 0xb3, 0x5c, 0x2f, 0x62, 0xc1, 0x2b, 0x7b, 0x84, 0xa7, 0x50, 0xed, 0x68,
	0x4d, 0x76, 0xd7, 0x1d, 0x33, 0x6a, 0x7b, 0x57, 0x8c, 0x2a, 0x31, 0xd2, 0x90, 0x40, 0xf2, 0x3d,
	0x68, 0xbc, 0xb2, 0x47, 0xae, 0x93, 0x9a, 0x56, 0x8b, 0x4d, 0xeb, 0x08, 0x4b, 0xec, 0x3e, 0x06,
	0x22, 0xec, 0x9c, 0xa9, 0x64, 0x3a, 0x21, 0x1b, 0xe2, 0xe1, 0x54, 0xa1, 0x0a, 0x6a, 0xda, 0x52,
	0xd1, 0x67, 0x43, 0xf2, 0x04, 0xd6, 0xec, 0x61, 0xe4, 0xbe, 0xb2, 0xd3, 0xb1, 0xa9, 0xe1, 0xd8,
	0xa8, 0x45, 0x63, 0xa3, 0x25, 0x50, 0xb1, 0x2f, 0xec, 0x5c, 0x99, 0x9c, 0x82, 0x32, 0x0d, 0x59,
	0x90, 0x5d, 0x7e, 0xf2, 0x1c, 0x3a, 0x10, 0xb5, 0x9d, 0x87, 0x2c, 0xe8, 0xc9, 0x0f, 0xcd, 0xac,
	0x33, 0xba, 0xc6, 0xcd, 0x32, 0x02, 0xf5, 0x57, 0x25, 0x58, 0xef, 0x15, 0x8c, 0xfa, 0xdd, 0x9e,
	0xf6, 0x82, 0x33, 0x27, 0xcb, 0xec, 0x0d, 0x0c, 0xb3, 0x5b, 0xb4, 0xd1, 0x0e, 0x60, 0x77, 0x06,
	0xd4, 0x37, 0xba, 0x8f, 0x3b, 0xba, 0x75, 0xde, 0xe7, 0x54, 0x6c, 0x1f, 0x9a, 0x33, 0xea, 0xb3,
	0xf3, 0xce, 0xc0, 0x40, 0x6d, 0xb9, 0x40, 0x7b, 0xde, 0xed, 0x18, 0x67, 0xc6, 0x40, 0x6f, 0x2b,
	0x15, 0xf5, 0xe7, 0xd0, 0xc8, 0x8f, 0x00, 0xb9, 0x0b, 0x77, 0xb4, 0xd6, 0xc0, 0x78, 0xaa, 0xdd,
	0xd6, 0x9b, 0x3d, 0xd8, 0xce, 0x00, 0xcc, 0xae, 0xd5, 0x3b, 0xa7, 0xad, 0x53, 0x0d, 0xbb, 0x72,
	0x07, 0x76, 0xf2, 0xba, 0x13, 0x83, 0xf6, 0x07, 0xa2, 0x27, 0x6a, 0x04, 0x3b, 0xb7, 0x8c, 0x16,
	0xf9, 0x08, 0xd6, 0x3c, 0xf6, 0xda, 0x8a, 0x7c, 0x2b, 0x21, 0x7e, 0x7c, 0x03, 0xae, 0xd0, 0xba,
	0xc7, 0x5e, 0x0f, 0xfc, 0x84, 0xe0, 0x7d, 0x0a, 0x5b, 0x12, 0x37, 0xc3, 0x30, 0xca, 0x88, 0x26,
	0x88, 0xce, 0x8d, 0xb2, 0xaa, 0x41, 0x35, 0x59, 0x58, 0xe4, 0x0e, 0x54, 0x2f, 0xd8, 0x95, 0x2b,
	0x16, 0x50, 0x09, 0x17, 0xd0, 0x0a, 0x0a, 0xf8, 0xc2, 0xd9, 0x81, 0x65, 0xe6, 0x39, 0xa8, 0x2a,
	0xa3, 0x6a, 0x89, 0x79, 0x4e, 0x9f, 0x0d, 0xd5, 0x7f, 0x2d, 0xc1, 0x76, 0x31, 0xdf, 0x20, 0x6d,
	0xa8, 0x26, 0x3c, 0x45, 0x06, 0x0c, 0x1f, 0xbd, 0x8d, 0xa0, 0x1c, 0x26, 0x65, 0x9a, 0x1a, 0x92,
	0x03, 0x80, 0xc9, 0xf4, 0x62, 0xe4, 0x0e, 0xad, 0x97, 0x2c, 0x3e, 0x9d, 0xaa, 0x42, 0xf2, 0x84,
	0xdd, 0xf0, 0x43, 0xed, 0x15, 0x0b, 0xc2, 0xd4, 0xb9, 0xc4, 0x45, 0xf5, 0x1c, 0xaa, 0x49, 0x85,
	0x64, 0x17, 0xb6, 0x24, 0x25, 0x37, 0xe9, 0xcc, 0x9c, 0x6d, 0x82, 0x92, 0xaa, 0xfa, 0x03, 0x6a,
	0xf4, 0xf8, 0x6c, 0xa5, 0xe4, 0xde, 0xa4, 0xd6, 0x31, 0xd5, 0x8c, 0xee, 0x80, 0xea, 0x7c, 0xa6,
	0xfe, 0x7e, 0x19, 0xc8, 0x3c, 0x13, 0x22, 0x3f, 0x87, 0xed, 0x1c, 0x81, 0x9a, 0xd8, 0x81, 0x3d,
	0x66, 0x11, 0x0b, 0xf0, 0x04, 0xaa, 0x1d, 0x3d, 0xba, 0x8d, 0x43, 0xe5, 0x44, 0xbd, 0xd8, 0x4a,
	0xe7, 0xe7, 0x32, 0xdd, 0x8a, 0x8a, 0x74, 0xc4, 0x87, 0xbd, 0x0b, 0x77, 0x34, 0x12, 0x31, 0xd9,
	0xa5, 0x1f, 0x8c, 0x45, 0x93, 0xe2, 0x17, 0x0e, 0x51, 0xe3, 0xe8, 0xd3, 0x5b, 0xdb, 0x3b, 0x16,
	0xa6, 0x46, 0x6a, 0x79, 0x82, 0x3f, 0x68, 0xf3, 0xe2, 0x16, 0x0d, 0xf9, 0x0c, 0x76, 0x92, 0xd8,
	0xc1, 0xbf, 0xb4, 0x02, 0x36, 0xf4, 0x79, 0xcc, 0xc6, 0x9d, 0xbd, 0x18, 0xf4, 0xcd, 0x58, 0x6d,
	0x5e, 0x52, 0x54, 0x76, 0xb9, 0xf3, 0x7f, 0x98, 0x52, 0x67, 0xc9, 0x34, 0xb2, 0x5c, 0x81, 0x48,
	0x5d, 0x4b, 0xa8, 0x90, 0x33, 0x5c, 0xc2, 0x0e, 0x9e, 0x68, 0x1e, 0x8b, 0x5e, 0xfb, 0xc1, 0xcb,
	0x74, 0x14, 0x39, 0x79, 0xe0, 0xc3, 0x78, 0x78, 0xeb, 0x67, 0xf1, 0xc3, 0xac, 0x2b, 0xcc, 0x92,
	0x91, 0x0a, 0xe9, 0xd6, 0xb0, 0x48, 0x4c, 0xce, 0x61, 0xd3, 0x1e, 0x8d, 0xfc, 0xd7, 0x9c, 0x59,
	0x4d, 0xa3, 0x6b, 0x6b, 0xcc, 0xa2, 0x6b, 0xdf, 0x09, 0x9b, 0x4b, 0xc8, 0x16, 0xde, 0xbf, 0xb5,
	0x11, 0x6d, 0x1a, 0x5d, 0x9f, 0x21, 0x96, 0x12, 0x59, 0x41, 0x2a, 0x0a, 0xf7, 0x4e, 0x61, 0xef,
	0xf6, 0xd9, 0xe4, 0xe1, 0x12, 0x5f, 0xc2, 0xe2, 0xf4, 0xe4, 0x3f, 0x79, 0xe0, 0xfa, 0xca, 0x1e,
	0x4d, 0xe3, 0x23, 0x53, 0x14, 0xbe, 0x5f, 0xfe, 0xa2, 0xb4, 0xf7, 0xd7, 0x25, 0xd8, 0x2a, 0xfc,
	0x22, 0xd2, 0x85, 0xd5, 0xec, 0x10, 0xc9, 0x8d, 0xf5, 0x8d, 0x08, 0x4e, 0x2d, 0x33, 0x28, 0x3c,
	0xbe, 0xb6, 0x87, 0xbf, 0x98, 0xba, 0x01, 0x0b, 0xac, 0x0b, 0xd7, 0x93, 0x5d, 0xa9, 0xc5, 0xb2,
	0x63, 0xd7, 0xe3, 0xf3, 0x98, 0x40, 0xb2, 0x31, 0xa4, 0x98, 0x7b, 0x12, 0xeb, 0xce, 0x92, 0x58,
	0x52, 0x7d, 0x01, 0xcd, 0xdb, 0x96, 0x19, 0x79, 0x00, 0x1f, 0x1d, 0x1b, 0x9d, 0x8e, 0xd1, 0x7d,
	0x6c, 0x19, 0xdd, 0x13, 0x93, 0x9e, 0x09, 0x87, 0x28, 0x7e, 0xcd, 0xec, 0xcd, 0x65, 0xa8, 0x9c,
	0x19, 0x5d, 0xa5, 0xc4, 0xf9, 0xd4, 0xc9, 0x79, 0x87, 0x07, 0xd0, 0x4f, 0x00, 0xd2, 0x21, 0x47,
	0xa7, 0x7a, 0x3e, 0x38, 0xb5, 0xce, 0xf4, 0xc1, 0xa9, 0xd9, 0x9e, 0xb1, 0x5e, 0x85, 0x95, 0x9e,
	0xc6, 0x5d, 0x6d, 0xe7, 0x85, 0x52, 0x22, 0x04, 0x1a, 0x2d, 0xfa, 0xa2, 0x37, 0x30, 0x1f, 0x53,
	0xed, 0xcc, 0x7a, 0xd4, 0xee, 0x2b, 0x65, 0xf5, 0x4b, 0x58, 0xc4, 0xc0, 0x24, 0x0e, 0x65, 0x4b,
	0x69, 0x28, 0x4b, 0x60, 0x21, 0x62, 0x6f, 0xa2, 0x98, 0xcd, 0xf0, 0xdf, 0xe4, 0x53, 0x68, 0x08,
	0x5e, 0xfc, 0x15, 0x73, 0x2c, 0xd4, 0x0a, 0x36, 0x0f, 0x71, 0x8c, 0xf3, 0x26, 0xa2, 0xf5, 0x04,
	0xc1, 0x8b, 0xea, 0x11, 0x6c, 0x15, 0xc6, 0x2c, 0x3c, 0x06, 0x9a, 0x8c, 0xec, 0x21, 0x4b, 0x09,
	0xd5, 0x32, 0x96, 0x0d, 0x47, 0xfd, 0xa7, 0x12, 0x28, 0xb3, 0x11, 0x0a, 0xce, 0x53, 0x5c, 0x48,
	0x6d, 0x6a, 0x89, 0xcc, 0x70, 0x38, 0xe3, 0x4e, 0x21, 0x19, 0x2a, 0x56, 0x4f, 0xa4, 0xb8, 0x2d,
	0x8f, 0xe2, 0x55, 0x57, 0xc1, 0x2d, 0xb5, 0x5f, 0x1c, 0x12, 0x1d, 0x3e, 0xe5, 0x18, 0xb9, 0x26,
	0xf7, 0x34, 0x58, 0xc4, 0x32, 0xef, 0x36, 0x4a, 0x32, 0xdd, 0xc6, 0xb2, 0xe1, 0x70, 0x4f, 0x2d,
	0x54, 0x99, 0xa6, 0xab, 0x28, 0xe1, 0xcd, 0xaa, 0x97, 0x50, 0x93, 0x6d, 0xfc, 0x4e, 0x89, 0x8f,
	0x6f, 0xc1, 0xb2, 0x8c, 0xd1, 0x64, 0xde, 0xa3, 0x9e, 0xeb, 0x37, 0x8d, 0xb5, 0xea, 0x3f, 0xac,
	0xc1, 0xb2, 0x14, 0xfe, 0xf6, 0xa4, 0xc7, 0x01, 0x40, 0x1c, 0x2a, 0xba, 0x4e, 0xdc, 0x67, 0x29,
	0x31, 0x1c, 0xb2, 0x2d, 0x29, 0x2d, 0xae, 0x74, 0x0c, 0xa0, 0x05, 0xad, 0xfd, 0x31, 0x6c, 0xa7,
	0x0b, 0x21, 0xae, 0x00, 0x91, 0x7b, 0x73, 0x0b, 0x62, 0x33, 0x41, 0xca, 0x5e, 0xe1, 0x24, 0x7c,
	0x90, 0x27, 0xc6, 0x0b, 0x49, 0x03, 0x39, 0x72, 0xfc, 0x23, 0xd8, 0x4a, 0xdb, 0xc9, 0xe2, 0xef,
	0xbc, 0xa5, 0x99, 0x76, 0x11, 0xbb, 0x5e, 0xbc, 0x95, 0x5d, 0x77, 0x60, 0x13, 0x7f, 0x08, 0xe6,
	0x39, 0x09, 0x58, 0x84, 0xbb, 0xb5, 0xb9, 0x83, 0x8e, 0x65, 0x37, 0x63, 0x61, 0xe4, 0x00, 0x74,
	0x63, 0x32, 0x2f, 0x24, 0xdf, 0x86, 0xc5, 0x60, 0x3a, 0x62, 0x21, 0x72, 0xee, 0xda, 0xd1, 0x96,
	0x9c, 0xa4, 0xe1, 0x35, 0x73, 0xa6, 0xdc, 0x1f, 0x50, 0xae, 0xa4, 0x02, 0x43, 0x3e, 0x81, 0x05,
	0xee, 0x1d, 0x9a, 0xcb, 0x38, 0xa1, 0x3b, 0xb9, 0x09, 0x35, 0xbc, 0xc8, 0x7e, 0xc9, 0xb8, 0xcf,
	0x10, 0xe3, 0xce, 0x81, 0xe4, 0x0b, 0xa8, 0xb9, 0x28, 0xc7, 0xc3, 0xae, 0xb9, 0x89, 0x6d, 0xdc,
	0x66, 0x47, 0xc1, 0x4d, 0x7e, 0x93, 0x0e, 0x6c, 0x4f, 0x58, 0x60, 0x45, 0xee, 0xf0, 0x25, 0x8b,
	0xac, 0x6c, 0x25, 0x5b, 0x6f, 0xaf, 0x64, 0x63, 0xc2, 0x82, 0x01, 0x5a, 0xa5, 0x42, 0xa2, 0xc3,
	0xda, 0x24, 0x60, 0xf1, 0xe1, 0x86, 0x3c, 0x7a, 0x05, 0x87, 0x2b, 0xbf, 0x99, 0x0e, 0x7b, 0x09,
	0x48, 0x30, 0xe8, 0x49, 0xae, 0xfc, 0x0d, 0xb2, 0x50, 0x85, 0x71, 0x18, 0xdc, 0xab, 0x14, 0xc5,
	0x61, 0xdf, 0x82, 0x65, 0x87, 0x4d, 0xfc, 0xd0, 0x8d, 0x90, 0xdc, 0x27, 0x95, 0xb6, 0x85, 0x90,
	0xc6, 0x5a, 0xf2, 0x09, 0xd4, 0x3c, 0xdf, 0x0a, 0xaf, 0xfd, 0xd7, 0xd6, 0x25, 0x63, 0x92, 0xbb,
	0xcb, 0x80, 0xa3, 0xeb, 0xf7, 0xaf, 0xfd, 0xd7, 0x27, 0x8c, 0xd1, 0xaa, 0x17, 0xff, 0x24, 0x8f,
	0x61, 0x23, 0x60, 0xe8, 0xec, 0xad, 0x4c, 0xfc, 0x89, 0x89, 0x9e, 0x46, 0x3c, 0x82, 0x54, 0x00,
	0x32, 0x27, 0xd1, 0x7a, 0x30, 0x2b, 0x22, 0x9f, 0x42, 0xcd, 0xc6, 0xb3, 0xc9, 0x1a, 0xb9, 0xde,
	0xcb, 0x66, 0x03, 0xe7, 0x5f, 0x11, 0x15, 0x68, 0xa8, 0xe8, 0xb8, 0xde, 0x4b, 0x0a, 0x76, 0xf2,
	0x9b, 0x7c, 0x07, 0x16, 0x70, 0x9c, 0xd7, 0xb2, 0xcb, 0x32, 0x1e, 0x67, 0xf9, 0x3f, 0x0e, 0x32,
	0xc2, 0x78, 0x0b, 0x72, 0xae, 0xd1, 0x4a, 0xc9, 0xb6, 0x20, 0xa6, 0x13, 0xc1, 0x10, 0x25, 0xbf,
	0xc9, 0xe7, 0x50, 0x0f, 0xd8, 0xc8, 0x8e, 0x98, 0x63, 0x8d, 0x99, 0xe3, 0xda, 0x32, 0x65, 0x44,
	0xe2, 0xef, 0x42, 0xd5, 0x19, 0xd7, 0xd0, 0xd5, 0x20, 0x53, 0x22, 0x3f, 0x85, 0xbd, 0xb9, 0x7c,
	0x93, 0x95, 0x78, 0x49, 0x82, 0xb5, 0x1c, 0x14, 0x7b, 0xd9, 0xa7, 0xc2, 0x77, 0xd2, 0x9d, 0xb0,
	0x58, 0x41, 0xbe, 0x0f, 0x8d, 0xd7, 0xb6, 0x1b, 0x8d, 0xdc, 0x30, 0xb2, 0xc4, 0xc6, 0xda, 0xc8,
	0x26, 0x90, 0x9e, 0x49, 0x9d, 0xd8, 0x56, 0xf5, 0xd7, 0xd9, 0x22, 0x19, 0xc1, 0x3d, 0xf1, 0x79,
	0x9c, 0x29, 0xbe, 0x62, 0x41, 0xe4, 0x0e, 0xed, 0x91, 0x15, 0x4e, 0xd8, 0xd0, 0xbd, 0x74, 0x87,
	0x16, 0xba, 0xde, 0x6d, 0xac, 0xed, 0xfd, 0xec, 0xc0, 0xb8, 0xde, 0xd5, 0x53, 0x09, 0xee, 0x4b,
	0x6c, 0x9b, 0xfb, 0xe2, 0x83, 0xe8, 0x6d, 0x6a, 0xf2, 0x63, 0x50, 0xb8, 0x07, 0xb9, 0x0a, 0x32,
	0xc1, 0x65, 0x13, 0x27, 0x4b, 0x3a, 0x01, 0x23, 0xd5, 0xe2, 0xd8, 0xaf, 0xb9, 0x79, 0x01, 0xf9,
	0x0c, 0xea, 0x7c, 0x8f, 0xfa, 0x81, 0xc3, 0x02, 0x5c, 0x91, 0xbb, 0xd8, 0xb9, 0x75, 0xe9, 0x82,
	0x58, 0x60, 0x72, 0x0d, 0x5f, 0x93, 0xb5, 0x49, 0x5a, 0x20, 0x5f, 0xc2, 0x7e, 0xe4, 0x4f, 0x83,
	0xd0, 0xb2, 0x3d, 0xc7, 0xc2, 0x18, 0xd5, 0x8d, 0x5c, 0x16, 0x5a, 0x43, 0xdf, 0x8b, 0x98, 0x17,
	0x35, 0xf7, 0xb1, 0x96, 0xbb, 0x31, 0xa9, 0x9b, 0x06, 0xa1, 0xe6, 0x39, 0x5a, 0x82, 0x6b, 0x09,
	0x18, 0xdd, 0x8d, 0x6e, 0x53, 0x91, 0x07, 0x22, 0x3f, 0x86, 0x6e, 0xf1, 0x20, 0x9b, 0x74, 0xef,
	0x48, 0x29, 0x4d, 0xf4, 0xe4, 0x03, 0x58, 0xe2, 0x9f, 0xe4, 0x5d, 0x35, 0xdf, 0xc5, 0x76, 0x57,
	0xe5, 0xf2, 0x41, 0x19, 0x95, 0x3a, 0xf5, 0x4b, 0x68, 0xe4, 0x7d, 0x03, 0x8f, 0x2d, 0x7b, 0x54,
	0x8f, 0xc3, 0xd1, 0x82, 0xd8, 0x72, 0x15, 0x56, 0xa8, 0xfe, 0x7f, 0xce, 0x0d, 0xaa, 0xb7, 0x95,
	0x12, 0x2f, 0x89, 0x90, 0x55, 0xeb, 0x28, 0x65, 0xb2, 0x0e, 0xf5, 0xae, 0x39, 0xb0, 0xfa, 0xe7,
	0xbd, 0x9e, 0x49, 0x45, 0xf4, 0xfa, 0x9b, 0x52, 0x72, 0xde, 0x62, 0xfd, 0xfb, 0xd0, 0xec, 0xeb,
	0xf4, 0xa9, 0xd1, 0xd2, 0x8b, 0x2a, 0x7f, 0x1f, 0xee, 0xe6, 0xb4, 0x6d, 0xa3, 0xcb, 0x09, 0x1a,
	0xd5, 0xb9, 0x14, 0x09, 0x9a, 0x52, 0x22, 0xef, 0xc2, 0x5e, 0x0e, 0x74, 0x62, 0x9a, 0x6d, 0xcb,
	0xa4, 0x6d, 0x9d, 0x1a, 0xdd, 0xc7, 0x4a, 0x99, 0xc7, 0xe2, 0x39, 0xbd, 0xfe, 0x14, 0x3f, 0xc5,
	0x68, 0x3d, 0xd1, 0x07, 0x4a, 0x85, 0x07, 0xc7, 0x39, 0x35, 0x0f, 0xb5, 0xac, 0x81, 0x79, 0x4e,
	0x95, 0x85, 0xb9, 0xde, 0x69, 0xbd, 0x9e, 0x69, 0x74, 0x07, 0x7c, 0x2c, 0x94, 0x45, 0xf5, 0x97,
	0xb0, 0x88, 0x07, 0x10, 0x27, 0x41, 0xe2, 0xac, 0xc2, 0x94, 0x60, 0x28, 0xc3, 0xd4, 0x1a, 0xca,
	0xce, 0x50, 0x44, 0xde, 0x87, 0xfa, 0x70, 0x1a, 0x04, 0xcc, 0x1b, 0xca, 0x68, 0x43, 0x1c, 0xea,
	0xab, 0xb1, 0x10, 0xe3, 0x8c, 0x8f, 0x81, 0x70, 0x1b, 0xbe, 0x2f, 0xe2, 0x3c, 0x91, 0x7d, 0x25,
	0xf9, 0xac, 0x22, 0x35, 0x32, 0x13, 0x61, 0x5f, 0xa9, 0x3f, 0x83, 0x05, 0x7e, 0xc4, 0xa6, 0x74,
	0xbd, 0x94, 0xa1, 0xeb, 0xe4, 0x87, 0xb0, 0x96, 0x9e, 0xd1, 0x31, 0x9d, 0xaf, 0xa4, 0x67, 0x5f,
	0x27, 0x39, 0xfe, 0xa3, 0x80, 0x2f, 0x81, 0x94, 0x42, 0xe2, 0x1e, 0x57, 0x7f, 0x04, 0x6b, 0x33,
	0x10, 0xb2, 0x0d, 0x4b, 0x08, 0x8a, 0x5b, 0x92, 0xa5, 0xe2, 0x78, 0x41, 0xfd, 0xcf, 0x05, 0x58,
	0x9b, 0x39, 0x60, 0xc9, 0x43, 0xd8, 0x18, 0xbb, 0x9e, 0x65, 0x3b, 0xaf, 0x6c, 0x6f, 0xc8, 0xe2,
	0xcb, 0x14, 0x31, 0x5e, 0xa7, 0xef, 0xd0, 0xf5, 0xb1, 0xeb, 0x69, 0x42, 0x27, 0x2f, 0x53, 0xc8,
	0x13, 0x50, 0xb9, 0x85, 0x44, 0x5a, 0x17, 0xd3, 0xcb, 0x4b, 0x1e, 0x11, 0xb0, 0x4b, 0x3f, 0x60,
	0x16, 0x8f, 0xfd, 0x23, 0x77, 0x2c, 0x32, 0x69, 0xbc, 0x82, 0x83, 0xb1, 0xeb, 0x49, 0xcb, 0x63,
	0x44, 0x1e, 0x23, 0x50, 0xf7, 0x9c, 0x81, 0x3b, 0x66, 0xe4, 0x47, 0xb0, 0x9f, 0x6d, 0xde, 0xf7,
	0x46, 0xae, 0xc7, 0xac, 0x21, 0x2f, 0xf0, 0x3e, 0xca, 0x1c, 0xc2, 0x6e, 0xda, 0x0b, 0x13, 0x11,
	0xad, 0x18, 0x40, 0x5a, 0xb0, 0xc5, 0x1d, 0xac, 0x34, 0x19, 0xc9, 0x00, 0x97, 0x31, 0x49, 0xb8,
	0xb3, 0x3c, 0x06, 0xe9, 0xc1, 0x06, 0x47, 0xb7, 0x32, 0x60, 0xee, 0x18, 0x0e, 0x01, 0x3c, 0x3f,
	0x39, 0xde, 0x16, 0x8a, 0x2d, 0xab, 0x02, 0xc2, 0xf1, 0x3d, 0x50, 0x6c, 0x67, 0xec, 0x8a, 0x44,
	0xdf, 0xc4, 0x1f, 0xb9, 0xc3, 0x1b, 0xe4, 0x4d, 0x49, 0xea, 0x70, 0x66, 0x94, 0x0f, 0xb5, 0x18,
	0xdd, 0x43, 0x30, 0x5d, 0xb3, 0xf3, 0x02, 0x62, 0xc0, 0x46, 0xee, 0x0b, 0x64, 0xa5, 0xcb, 0xd9,
	0x6b, 0x95, 0x6c, 0xaf, 0x65, 0x3d, 0x64, 0x38, 0x27, 0x53, 0xff, 0x1f, 0xac, 0xcd, 0x34, 0x47,
	0xee, 0xc1, 0xbe, 0xd6, 0x3e, 0x33, 0xfa, 0x7d, 0x1e, 0x3f, 0xf5, 0xcc, 0x8e, 0xd1, 0x7a, 0x31,
	0xb3, 0xad, 0xd7, 0xa0, 0x36, 0x30, 0xce, 0x74, 0x4c, 0x6b, 0xb4, 0x06, 0x4a, 0x89, 0x3b, 0x0a,
	0x14, 0x9c, 0x74, 0xf4, 0xe7, 0xc6, 0x71, 0x47, 0x57, 0xca, 0xe4, 0x23, 0x50, 0xb9, 0xa8, 0x6d,
	0xe9, 0xdd, 0x01, 0x7d, 0x61, 0x3d, 0x33, 0x06, 0xa7, 0x89, 0xda, 0x6a, 0x9f, 0x53, 0xb1, 0xfb,
	0x2b, 0xc7, 0x9b, 0x40, 0xe6, 0x17, 0x88, 0xfa, 0x8f, 0x0b, 0xb0, 0x3d, 0x47, 0x9a, 0x4e, 0x5c,
	0x36, 0x72, 0x48, 0x03, 0xca, 0xae, 0x23, 0x93, 0xfe, 0x65, 0x97, 0x1f, 0x65, 0x0b, 0x32, 0x25,
	0x9f, 0x49, 0x05, 0x15, 0xdb, 0x1e, 0xe2, 0xbf, 0x99, 0xe3, 0xbc, 0x09, 0x8b, 0x23, 0xfb, 0x82,
	0x8d, 0xc4, 0xca, 0xc7, 0x89, 0x13, 0x02, 0xf2, 0x28, 0xbb, 0xfd, 0x04, 0x66, 0x79, 0x8e, 0x1c,
	0xa7, 0x7b, 0xae, 0x83, 0x46, 0x9b, 0xd9, 0x10, 0x28, 0xd9, 0xc9, 0xdf, 0x86, 0xda, 0xf0, 0xda,
	0xe7, 0xee, 0x05, 0x63, 0xbb, 0x15, 0xdc, 0xc5, 0xd9, 0x6a, 0x40, 0xa8, 0xd1, 0x19, 0xdc, 0x85,
	0x9a, 0x1b, 0x5a, 0x92, 0xda, 0x38, 0xb8, 0xba, 0x56, 0x28, 0xb8, 0xa1, 0xe4, 0x3f, 0x3c, 0xc0,
	0xd9, 0xc0, 0x14, 0x81, 0x35, 0x9c, 0x86, 0x91, 0x3f, 0xb6, 0x6c, 0x2f, 0x7c, 0xcd, 0x02, 0xe4,
	0x79, 0x2b, 0x74, 0x1d, 0x55, 0x2d, 0xd4, 0x68, 0xa8, 0x20, 0x9f, 0xc3, 0xba, 0xed, 0x38, 0x2e,
	0x9f, 0x72, 0x7b, 0x14, 0xe7, 0xee, 0x60, 0xae, 0x0f, 0x4a, 0x0a, 0x92, 0x39, 0xfa, 0x87, 0xb0,
	0x99, 0xa1, 0x3a, 0x49, 0x3a, 0x16, 0x93, 0x19, 0x55, 0x4a, 0x52, 0x86, 0x13, 0xe7, 0x04, 0xd4,
	0x3f, 0x2d, 0x41, 0x35, 0x19, 0x61, 0xee, 0x97, 0x4f, 0x0c, 0xbd, 0x53, 0x78, 0x8f, 0xa1, 0xc0,
	0x6a, 0xff, 0xd4, 0xa4, 0x03, 0x4b, 0xeb, 0xf6, 0x9f, 0xe9, 0x54, 0x29, 0x91, 0x3a, 0x54, 0x7b,
	0x1a, 0xd5, 0x1e, 0x53, 0xad, 0x77, 0xaa, 0x94, 0xc9, 0x06, 0xac, 0x61, 0x46, 0xb5, 0xd7, 0xd1,
	0xad, 0xd6, 0xa9, 0x69, 0xb4, 0x74, 0xa5, 0x42, 0x1a, 0x00, 0xad, 0x53, 0xbd, 0xf5, 0xe4, 0xd8,
	0x7c, 0xae, 0xf7, 0x95, 0x05, 0xbc, 0xdd, 0xa0, 0x66, 0xaf, 0x6d, 0x3e, 0xeb, 0x2a, 0x8b, 0xa4,
	0x06, 0xcb, 0xc7, 0xa6, 0xd9, 0xd1, 0xb5, 0xae, 0xb2, 0xc4, 0xed, 0x3b, 0x66, 0x4b, 0xa4, 0x00,
	0xfa, 0xba, 0x46, 0x5b, 0xa7, 0xca, 0xb2, 0xfa, 0x17, 0x25, 0x58, 0x9f, 0x5b, 0x18, 0x3c, 0x6e,
	0xbd, 0xe4, 0x9d, 0x96, 0x19, 0xb5, 0xfd, 0xb7, 0x2d, 0x20, 0x2a, 0xa0, 0xe4, 0xbb, 0xb0, 0x79,
	0xe9, 0x06, 0x61, 0x84, 0xde, 0x4b, 0xce, 0x04, 0x0b, 0x42, 0x91, 0x13, 0x15, 0xb7, 0xc3, 0xa8,
	0xe7, 0x5e, 0xab, 0x15, 0x6b, 0xc9, 0x23, 0xce, 0x73, 0xa3, 0x69, 0xe0, 0xf1, 0x85, 0x9e, 0x1a,
	0x55, 0x52, 0xa3, 0x44, 0x9d, 0x18, 0xa9, 0xbf, 0x2e, 0xc1, 0xb2, 0xa4, 0xd8, 0xe4, 0xc3, 0x94,
	0x82, 0x97, 0xe6, 0x03, 0xaf, 0x84, 0x80, 0xcf, 0xb8, 0xc9, 0x9c, 0xab, 0x48, 0x53, 0xad, 0x19,
	0x37, 0x99, 0xf5, 0x15, 0x7d, 0x36, 0x24, 0x47, 0xb0, 0x2a, 0xeb, 0x12, 0x7c, 0xab, 0x82, 0x5b,
	0x6b, 0x2d, 0xd3, 0x98, 0x48, 0xf8, 0x48, 0x10, 0x5e, 0x67, 0x3d, 0x85, 0x6a, 0x42, 0xee, 0xc9,
	0x01, 0x54, 0xb8, 0x6f, 0x2c, 0xe8, 0x24, 0x97, 0x73, 0xe2, 0x73, 0xc9, 0xd8, 0x5b, 0xeb, 0x5e,
	0xbe, 0x64, 0xf8, 0x43, 0xfd, 0x93, 0x12, 0x40, 0xca, 0xdd, 0x0b, 0x32, 0x2a, 0x78, 0x7d, 0xea,
	0x5d, 0x4d, 0xed, 0x2b, 0x96, 0xdc, 0x32, 0xca, 0x32, 0xf9, 0x0e, 0x90, 0x78, 0xdd, 0x32, 0x27,
	0xce, 0x16, 0xca, 0xdd, 0xb9, 0x9e, 0x6a, 0x64, 0xae, 0x90, 0x3c, 0xc4, 0xe4, 0x49, 0x84, 0xf1,
	0xdb, 0x02, 0xf6, 0x6b, 0x33, 0x1b, 0x3c, 0xf4, 0xa4, 0x8e, 0x26, 0x28, 0xf5, 0x17, 0x50, 0xcb,
	0x10, 0x48, 0x72, 0xc8, 0x07, 0x6e, 0xe4, 0xbe, 0x62, 0xc1, 0x8d, 0x75, 0xcb, 0x00, 0xd4, 0x62,
	0x00, 0xc7, 0x1f, 0x41, 0x23, 0xf3, 0x12, 0x86, 0x5b, 0x94, 0xe7, 0x2d, 0xea, 0x29, 0xe4, 0x84,
	0x31, 0xf5, 0x0f, 0x4b, 0xb0, 0xda, 0x8b, 0x83, 0x47, 0x59, 0x49, 0x1c, 0x27, 0x0c, 0xaf, 0xed,
	0xe0, 0xaa, 0xb0, 0xd9, 0xba, 0x84, 0xb4, 0x10, 0xc1, 0x3b, 0x7a, 0x69, 0x0f, 0xdd, 0x91, 0x1b,
	0xdd, 0xdc, 0xd6, 0x6c, 0x2d, 0x06, 0xf0, 0x36, 0xde, 0x83, 0xc5, 0xc8, 0x7e, 0xc3, 0xc2, 0x82,
	0x83, 0x92, 0x0a, 0x8d, 0xfa, 0xfb, 0x15, 0x80, 0x34, 0x04, 0x22, 0x1f, 0x40, 0x23, 0xeb, 0x3e,
	0x92, 0x34, 0xc9, 0x6a, 0xea, 0x38, 0x0c, 0x87, 0x7c, 0x02, 0xeb, 0xe1, 0xb5, 0x1f, 0x44, 0xb9,
	0x2c, 0x44, 0xea, 0x8c, 0x15, 0x54, 0x66, 0x33, 0x0f, 0x3f, 0x81, 0x3b, 0x99, 0x14, 0xc9, 0x9c,
	0xe9, 0xd2, 0x9c, 0x8f, 0xde, 0x4d, 0xf3, 0x24, 0xb3, 0x75, 0x25, 0x59, 0x8c, 0xca, 0xad, 0x59,
	0x8c, 0x2f, 0xa0, 0x91, 0x89, 0xef, 0xf9, 0x48, 0x2d, 0x66, 0x93, 0x4a, 0xd9, 0x79, 0xa0, 0xab,
	0x93, 0xec, 0xac, 0x7c, 0x0a, 0x44, 0x72, 0xc0, 0xe2, 0x84, 0xcc, 0xba, 0xd0, 0x66, 0xfb, 0xd3,
	0x81, 0xfd, 0xf4, 0xdb, 0x0a, 0x8c, 0xe7, 0x0f, 0xa0, 0xbd, 0x04, 0x6f, 0xce, 0xd6, 0xa6, 0xfe,
	0x51, 0x19, 0x56, 0xe2, 0x40, 0xe2, 0x2d, 0x69, 0xc1, 0xff, 0xd1, 0x07, 0x3a, 0x1f, 0xe7, 0xd3,
	0x53, 0xf3, 0xb3, 0x95, 0x4b, 0x53, 0x7d, 0x0e, 0xf5, 0x38, 0xfe, 0x11, 0xbe, 0x62, 0x19, 0xf7,
	0x24, 0xc9, 0x07, 0x49, 0xe8, 0x2e, 0x56, 0x47, 0x99, 0x12, 0x3f, 0x44, 0x13, 0x43, 0xd7, 0xc1,
	0x1c, 0x4a, 0x95, 0x42, 0x2c, 0x32, 0x1c, 0xf5, 0xdf, 0x4a, 0x40, 0xe6, 0x09, 0x12, 0xe9, 0x83,
	0x12, 0xb0, 0xcb, 0xa9, 0xc7, 0x5d, 0x85, 0x27, 0x8e, 0x43, 0x79, 0x2a, 0xdc, 0xbf, 0x8d, 0x54,
	0x1d, 0x52, 0x34, 0x68, 0xc5, 0x78, 0xba, 0x16, 0xe4, 0x05, 0x7b, 0xff, 0xbf, 0x04, 0x6b, 0x33,
	0x20, 0x62, 0x08, 0x56, 0x9c, 0x5c, 0xae, 0x4a, 0x3e, 0x1c, 0x46, 0x76, 0x20, 0xcf, 0x94, 0xf4,
	0xb6, 0x8c, 0x73, 0xe2, 0xf8, 0xb2, 0x55, 0xd0, 0xe1, 0x3e, 0x87, 0xf1, 0xa3, 0x85, 0xfb, 0xea,
	0x0f, 0xa1, 0x21, 0xfb, 0x1c, 0x3f, 0x6f, 0xe0, 0x13, 0x59, 0xa7, 0x75, 0x21, 0x8d, 0xdf, 0x37,
	0xfc, 0x7b, 0x19, 0x56, 0xb3, 0xb9, 0x86, 0x02, 0x47, 0xfa, 0x50, 0x12, 0xa9, 0x72, 0x36, 0xe5,
	0x94, 0xb5, 0x39, 0xc4, 0x7f, 0x33, 0xf4, 0xe9, 0x73, 0x58, 0x4f, 0x17, 0xec, 0xd0, 0x16, 0x93,
	0xba, 0x38, 0x37, 0xa9, 0x4a, 0x02, 0x6a, 0x09, 0x0c, 0xf9, 0x31, 0x24, 0x19, 0xe6, 0x78, 0x57,
	0xd4, 0x8e, 0xde, 0x2d, 0x68, 0x51, 0x4b, 0x51, 0x34, 0x6b, 0x42, 0xf6, 0x61, 0x39, 0x6e, 0x30,
	0xcd, 0xa2, 0xc6, 0xa2, 0xbd, 0xe7, 0x50, 0xcb, 0x58, 0x16, 0x24, 0xd8, 0xcb, 0xbf, 0x25, 0xc1,
	0x4e, 0xb6, 0x65, 0x9e, 0xbe, 0x94, 0xa6, 0x68, 0x79, 0x59, 0xfd, 0x18, 0xaa, 0xc9, 0x28, 0x90,
	0x4d, 0x50, 0x0a, 0xc8, 0x4d, 0x15, 0x16, 0x7b, 0xa7, 0xe6, 0xc0, 0x54, 0x4a, 0xea, 0x33, 0xd8,
	0xb9, 0x25, 0x35, 0xf3, 0x75, 0x12, 0xef, 0xd9, 0xa4, 0x78, 0x39, 0x97, 0x14, 0xe7, 0xa7, 0x62,
	0x3d, 0x97, 0xa4, 0xe1, 0xfe, 0x96, 0x2f, 0xa9, 0x89, 0x1d, 0x44, 0x37, 0x56, 0xe8, 0x7e, 0xc5,
	0xd2, 0x67, 0x2e, 0x5e, 0x8f, 0x0b, 0xfb, 0xee, 0x57, 0xe8, 0x95, 0xc7, 0xf6, 0x9b, 0x2c, 0xaa,
	0x2c, 0x51, 0xf6, 0x9b, 0x14, 0xf5, 0x43, 0xb8, 0x13, 0x4e, 0x27, 0x13, 0x3f, 0x88, 0x42, 0x2b,
	0x43, 0x1e, 0x39, 0x2b, 0x65, 0xa1, 0xb8, 0x9d, 0x58, 0xa1, 0xbb, 0x31, 0x44, 0x4b, 0x10, 0x54,
	0x00, 0xd4, 0xbf, 0xad, 0xc2, 0xc1, 0x5b, 0x93, 0x3e, 0xe4, 0x39, 0x34, 0xd8, 0x2b, 0xbc, 0xc1,
	0x8b, 0xdf, 0xeb, 0x95, 0x72, 0xf7, 0x8b, 0x6f, 0x33, 0x3e, 0xd4, 0xb9, 0x65, 0x4b, 0x1a, 0xd2,
	0x3a, 0xcb, 0x16, 0xc9, 0x1d, 0xa8, 0x8a, 0x9a, 0xf9, 0xea, 0x96, 0x7c, 0x00, 0x05, 0xe7, 0xc1,
	0x88, 0x1c, 0xc3, 0x12, 0xf3, 0x22, 0x37, 0xba, 0x91, 0x97, 0x14, 0x0f, 0xbe, 0x56, 0x73, 0x68,
	0x41, 0xa5, 0xe5, 0x9e, 0x03, 0xcd, 0x1e, 0xde, 0x13, 0x1b, 0x0e, 0x97, 0x5c, 0xba, 0xc2, 0xab,
	0xe0, 0x67, 0xbd, 0x07, 0xab, 0x01, 0x1b, 0xb1, 0x57, 0xb6, 0x6c, 0xbf, 0x84, 0x4c, 0xa3, 0x16,
	0xcb, 0x78, 0x17, 0x3e, 0x84, 0xc6, 0x78, 0x1a, 0xba, 0xc3, 0x8b, 0xc0, 0x76, 0xbd, 0xaf, 0xd2,
	0xa9, 0xad, 0x67, 0xa4, 0x86, 0xb3, 0xf7, 0x97, 0x8b, 0xb0, 0x24, 0x1a, 0x96, 0x01, 0x4f, 0x29,
	0x09, 0x78, 0x8a, 0x1c, 0xb6, 0xdc, 0xcd, 0x95, 0x74, 0x37, 0x3f, 0x85, 0x9a, 0xe8, 0xb0, 0x70,
	0x9d, 0x82, 0xce, 0x7c, 0xf6, 0xf5, 0xbf, 0x57, 0xfe, 0x27, 0xd2, 0x99, 0x2c, 0xf9, 0x9d, 0xa9,
	0x37, 0xf0, 0x47, 0x4c, 0x06, 0xb2, 0xdf, 0xbc, 0x5e, 0xea, 0x8f, 0x92, 0x7a, 0xf9, 0x6f, 0xf2,
	0x15, 0xec, 0xc9, 0x0b, 0x79, 0x37, 0x37, 0xae, 0x22, 0x9f, 0x28, 0x4e, 0x8a, 0x1f, 0x7c, 0x9d,
	0x66, 0x6e, 0x9b, 0x1c, 0xda, 0x9c, 0xdc, 0xa2, 0x51, 0xff, 0xbc, 0x04, 0x90, 0x7e, 0x2e, 0xb9,
	0x03, 0x3b, 0x7a, 0x77, 0x60, 0x0c, 0x5e, 0x14, 0x85, 0x2e, 0xbb, 0xb0, 0x95, 0x55, 0xf6, 0x74,
	0x7a, 0x62, 0xd2, 0x33, 0x8c, 0x61, 0xb6, 0x81, 0xe4, 0x54, 0x1d, 0xed, 0x85, 0x4e, 0xc5, 0x7b,
	0x90, 0xac, 0xbc, 0x65, 0x76, 0x5b, 0x3a, 0x1d, 0x88, 0x1c, 0x55, 0x85, 0x1c, 0xc0, 0x6e, 0x56,
	0xdb, 0xef, 0x99, 0x74, 0xd0, 0xb7, 0xfa, 0x3a, 0x35, 0x30, 0xc8, 0xd9, 0x04, 0x65, 0xb6, 0x52,
	0x65, 0x91, 0x93, 0x40, 0x48, 0x07, 0x32, 0xd3, 0x63, 0x6a, 0x76, 0x6e, 0xef, 0x31, 0x2a, 0x4f,
	0x75, 0xad, 0xdd, 0x31, 0xba, 0xd8, 0xe3, 0x19, 0x55, 0x9c, 0xe8, 0xe3, 0x9d, 0x9e, 0xb5, 0x32,
	0xcf, 0x74, 0x6b, 0xa0, 0x6b, 0x67, 0x4a, 0x65, 0x56, 0xa5, 0x3d, 0xd3, 0x5e, 0x08, 0xd5, 0x82,
	0xfa, 0x9b, 0x12, 0xd4, 0x73, 0xdb, 0x93, 0xbc, 0x0b, 0x7b, 0x22, 0x61, 0xd7, 0xd2, 0x06, 0xfa,
	0x63, 0x93, 0xbe, 0x98, 0x7f, 0xdb, 0x32, 0xa3, 0x97, 0xe3, 0x23, 0xbb, 0x97, 0xd7, 0x89, 0xd1,
	0x51, 0xca, 0x05, 0x66, 0x83, 0x53, 0x5d, 0x1b, 0x50, 0x1e, 0x27, 0xf2, 0xd1, 0xc8, 0xeb, 0xf4,
	0xe7, 0xa7, 0xc6, 0xb1, 0x31, 0xe0, 0xe3, 0x79, 0x1f, 0x3e, 0x98, 0x51, 0x3e, 0x33, 0xe9, 0x93,
	0xfe, 0xa9, 0xd9, 0xeb, 0x5b, 0x5a, 0xb7, 0x6d, 0xb5, 0x3a, 0x5a, 0xbf, 0xaf, 0xf7, 0x95, 0x45,
	0xf5, 0xef, 0x4a, 0xb0, 0x3b, 0x78, 0x4b, 0xf2, 0x16, 0xae, 0xdd, 0xab, 0xeb, 0x91, 0x7b, 0x75,
	0x1d, 0x85, 0x92, 0x25, 0xe4, 0x82, 0xfa, 0x54, 0xcb, 0xb1, 0xae, 0x37, 0x1c, 0x4d, 0x43, 0x7c,
	0x4a, 0x57, 0x9e, 0xc7, 0xa6, 0x5a, 0x8e, 0x65, 0x6f, 0x12, 0x6c, 0x65, 0x1e, 0x9b, 0x6a, 0xc9,
	0xb7, 0xa0, 0x3a, 0x9e, 0x86, 0x91, 0xf5, 0xd2, 0xf3, 0x5f, 0x37, 0x17, 0xe6, 0xa0, 0x2b, 0x5c,
	0xf9, 0xc4, 0xf3, 0x5f, 0xab, 0x3f, 0x81, 0x25, 0x91, 0x29, 0xce, 0x27, 0x1b, 0x4b, 0x71, 0x8a,
	0xe2, 0x01, 0xac, 0x8b, 0xa7, 0xf2, 0xf8, 0x0e, 0x03, 0x91, 0x22, 0x98, 0x5d, 0xa0, 0x6b, 0x42,
	0x61, 0x5e, 0x8a, 0x0a, 0x42, 0xf5, 0x0f, 0x4a, 0xa0, 0x68, 0xaf, 0x6c, 0x77, 0x64, 0x5f, 0xc4,
	0xe1, 0xc1, 0x37, 0xbf, 0x76, 0xed, 0xc0, 0x66, 0x72, 0xb7, 0x91, 0xa9, 0x4b, 0x8e, 0x4d, 0xfe,
	0x1a, 0x26, 0xdb, 0x18, 0xdd, 0x08, 0xe7, 0x85, 0xea, 0xaf, 0x2a, 0xb0, 0x51, 0x00, 0x26, 0x5f,
	0x40, 0x33, 0xa5, 0x54, 0xf8, 0x16, 0x3f, 0x4d, 0x63, 0x08, 0x72, 0xb5, 0x1d, 0xc6, 0x5c, 0x0a,
	0xd5, 0x71, 0x2a, 0x83, 0x7c, 0x17, 0xb6, 0xe3, 0xe4, 0xe4, 0x8c, 0x9d, 0x08, 0x9e, 0x37, 0x99,
	0x48, 0x49, 0xe6, 0xad, 0x1e, 0xc2, 0x66, 0xe6, 0x5e, 0x38, 0xb5, 0x91, 0x2f, 0x1a, 0xd2, 0x0b,
	0xe2, 0xc4, 0xe2, 0x10, 0x36, 0xd2, 0x8b, 0xe2, 0xd4, 0x40, 0x50, 0xeb, 0xf5, 0xe4, 0xc6, 0x38,
	0xc1, 0x1f, 0xc1, 0x56, 0x42, 0x1a, 0x63, 0x34, 0x72, 0x45, 0xf1, 0x74, 0x70, 0x23, 0x56, 0xc6,
	0x06, 0x9c, 0x21, 0xfe, 0x10, 0x83, 0x60, 0x7f, 0x1a, 0x0c, 0x59, 0x98, 0x4d, 0xe3, 0x64, 0xae,
	0xe5, 0x68, 0xac, 0xc7, 0xa8, 0x58, 0xfe, 0x8c, 0xdb, 0xfc, 0x1e, 0xac, 0xe6, 0xe6, 0x68, 0x31,
	0x7b, 0x7f, 0x95, 0x9b, 0x9c, 0x1c, 0x4e, 0xfd, 0x3d, 0x80, 0xd5, 0xdc, 0x74, 0xfc, 0x77, 0xaf,
	0xcd, 0xef, 0x40, 0x55, 0x4c, 0x27, 0xff, 0xe0, 0x8a, 0x78, 0x4a, 0x86, 0x02, 0xfe, 0x95, 0xef,
	0xc1, 0x6a, 0xee, 0xad, 0xa2, 0xf8, 0x7b, 0x8c, 0x9a, 0x93, 0x79, 0xa6, 0x78, 0x17, 0x6a, 0xe1,
	0xc4, 0x8f, 0x42, 0x0b, 0xff, 0xca, 0x03, 0x8f, 0xae, 0x0a, 0x05, 0x14, 0x0d, 0xb8, 0x04, 0xdb,
	0x47, 0x80, 0x3f, 0x61, 0x22, 0x3a, 0xa9, 0xd0, 0x2a, 0x4a, 0xcc, 0x09, 0xf3, 0xc8, 0xff, 0x02,
	0x25, 0xfb, 0x81, 0x98, 0xdc, 0x5f, 0x16, 0x8f, 0x56, 0xb3, 0xf2, 0x81, 0x7d, 0x45, 0xbe, 0x03,
	0xd5, 0x64, 0x20, 0xf3, 0xaf, 0x35, 0xd3, 0xa1, 0x4e, 0x11, 0xc5, 0xf7, 0xb0, 0xd5, 0xe2, 0x7b,
	0xd8, 0xff, 0x0d, 0x10, 0x30, 0x79, 0xed, 0xc0, 0xe4, 0xdf, 0x0b, 0x1c, 0xcc, 0x4f, 0xc6, 0x21,
	0x4d, 0x40, 0x34, 0x63, 0x40, 0xfa, 0x40, 0x42, 0x91, 0x6f, 0x66, 0x16, 0x7b, 0x33, 0x64, 0xd9,
	0x3f, 0x17, 0xf8, 0xa0, 0xa0, 0x1a, 0x99, 0x9c, 0x66, 0x7a, 0x8c, 0xa5, 0xeb, 0xe1, 0xac, 0x28,
	0x7b, 0x37, 0xbc, 0xfa, 0x4d, 0xee, 0x86, 0xeb, 0xbf, 0xeb, 0xdd, 0x70, 0xe3, 0x1b, 0xdf, 0x0d,
	0xcf, 0xe7, 0x23, 0xd6, 0x70, 0x7c, 0xf3, 0xf9, 0x88, 0x4b, 0xd8, 0x0d, 0x93, 0x6c, 0x3c, 0xde,
	0x8c, 0x5a, 0xfe, 0x2b, 0x16, 0x04, 0xae, 0xc3, 0xe2, 0x3f, 0x19, 0x78, 0x70, 0xfb, 0x20, 0xc9,
	0x0c, 0xbe, 0x19, 0x5b, 0xd0, 0x9d, 0xb0, 0x58, 0x41, 0x7a, 0xb0, 0x8e, 0x7f, 0x0b, 0x11, 0x3f,
	0xb2, 0x1b, 0xfb, 0x0e, 0x6b, 0xae, 0xe3, 0x47, 0xbd, 0x5f, 0x50, 0x7f, 0x2b, 0x83, 0x3d, 0xf3,
	0x1d, 0x46, 0x95, 0xe1, 0x8c, 0x64, 0xef, 0x4b, 0x80, 0x74, 0xc6, 0xc9, 0x7d, 0x1e, 0xc9, 0x4e,
	0x98, 0x1d, 0x59, 0x53, 0x2f, 0x72, 0x47, 0x99, 0x70, 0xb2, 0x21, 0xe4, 0xe7, 0x5c, 0xcc, 0x37,
	0x45, 0x8a, 0x64, 0x98, 0xb6, 0x8a, 0x13, 0x84, 0x8b, 0x31, 0x52, 0xe7, 0xe2, 0x3e, 0x1b, 0xee,
	0xb5, 0x60, 0x7d, 0x6e, 0x31, 0x90, 0x43, 0x00, 0x8c, 0x57, 0x03, 0xdb, 0x4b, 0x12, 0x4f, 0x73,
	0x8f, 0x8b, 0xab, 0x51, 0xfc, 0x73, 0x2f, 0x84, 0x9d, 0x5b, 0x06, 0x8b, 0x6f, 0x82, 0x91, 0x1d,
	0x46, 0x78, 0x15, 0x60, 0x5f, 0x8c, 0xb2, 0x31, 0xf0, 0x1a, 0x57, 0x1c, 0x4b, 0x39, 0xef, 0xf5,
	0xc7, 0x20, 0x12, 0xac, 0x79, 0xb0, 0xf0, 0xcd, 0x0a, 0x6a, 0x32, 0x68, 0xf5, 0xff, 0x82, 0x32,
	0x3b, 0x82, 0xe4, 0x3d, 0x38, 0x68, 0x99, 0xdd, 0x13, 0x23, 0x7e, 0x28, 0x76, 0x66, 0xb6, 0x67,
	0x89, 0x53, 0x21, 0xa4, 0xff, 0xa2, 0xdb, 0x3a, 0xa5, 0x66, 0xd7, 0x3c, 0xef, 0x2b, 0x25, 0xa2,
	0xc2, 0xbb, 0xf3, 0x10, 0x2d, 0x8b, 0x29, 0xab, 0x7f, 0x5c, 0x82, 0x6a, 0xb2, 0xeb, 0x79, 0x50,
	0x17, 0x46, 0xf6, 0xe5, 0x65, 0x26, 0x13, 0x83, 0x65, 0xe9, 0xfe, 0x50, 0x95, 0x7d, 0xe9, 0x84,
	0x12, 0x7c, 0xdb, 0xb3, 0x03, 0xcb, 0x81, 0xef, 0x8f, 0xd3, 0x27, 0x72, 0x4b, 0xbc, 0x28, 0xfc,
	0x22, 0x2a, 0xd0, 0x4c, 0x1c, 0x1d, 0x2b, 0x5c, 0x80, 0x56, 0x07, 0x00, 0x99, 0x68, 0x6f, 0x11,
	0x67, 0xb6, 0x3a, 0x89, 0x43, 0xbd, 0x07, 0x3f, 0x83, 0x8d, 0x82, 0x47, 0x38, 0xe4, 0x03, 0xb8,
	0xd7, 0xa3, 0x46, 0x4b, 0xb7, 0x8c, 0xee, 0x40, 0xa7, 0x3d, 0xaa, 0x0f, 0x34, 0xf9, 0x90, 0x79,
	0x26, 0x8d, 0xaf, 0x3f, 0xd7, 0x5a, 0x03, 0x4b, 0x3b, 0x33, 0xcf, 0xbb, 0x03, 0x91, 0xc6, 0xef,
	0x0f, 0x34, 0x4e, 0x60, 0xb5, 0x81, 0x52, 0x7e, 0xf0, 0x08, 0xaa, 0x49, 0x4a, 0x97, 0xd3, 0xe3,
	0x13, 0xe3, 0xb9, 0xde, 0xb6, 0xa8, 0x36, 0xd0, 0xad, 0xb6, 0x7e, 0xa2, 0x9d, 0x77, 0x06, 0xca,
	0x3b, 0xa4, 0x01, 0xd0, 0xd3, 0x29, 0x67, 0xd2, 0x7d, 0xb3, 0xab, 0x94, 0x1e, 0xfc, 0x12, 0xd6,
	0xe7, 0x76, 0x34, 0x79, 0x1f, 0xee, 0xca, 0x6b, 0x6a, 0x2b, 0xfb, 0x37, 0x12, 0x73, 0xd7, 0xcd,
	0x45, 0xa0, 0x96, 0xd9, 0x6d, 0x1b, 0xf2, 0x52, 0x1b, 0xaf, 0x9b, 0x8b, 0x40, 0x5a, 0xe7, 0x99,
	0xf6, 0xa2, 0xaf, 0x94, 0x1f, 0xfc, 0x59, 0x49, 0x3c, 0xd0, 0x4e, 0xf3, 0xbd, 0xf1, 0x03, 0x6d,
	0xb3, 0xcb, 0xe9, 0xf7, 0x80, 0xf3, 0xfd, 0xf9, 0x86, 0x67, 0x01, 0xcf, 0xf4, 0x63, 0x4b, 0xeb,
	0xf5, 0x3a, 0x46, 0x2b, 0x73, 0xcf, 0x3d, 0x0b, 0x3a, 0x33, 0x8f, 0x8d, 0x8e, 0xce, 0xb1, 0x4a,
	0x39, 0x7e, 0xc9, 0x9d, 0xd5, 0x6b, 0xdd, 0x36, 0x35, 0x8d, 0xb6, 0x52, 0x21, 0x3b, 0xb0, 0x31,
	0xab, 0x34, 0xcc, 0xbe, 0xb2, 0xf0, 0xc0, 0x85, 0xd5, 0x6c, 0x26, 0x8c, 0x87, 0x13, 0xc9, 0xcd,
	0x47, 0x41, 0xf8, 0xb2, 0x09, 0xca, 0x53, 0xa3, 0x6f, 0x0c, 0xf4, 0xb6, 0x15, 0xc3, 0xc4, 0x23,
	0x46, 0x9c, 0xb6, 0x54, 0x56, 0xc6, 0xc9, 0xed, 0x66, 0x50, 0x95, 0x07, 0x37, 0xb0, 0x36, 0xf3,
	0xd8, 0x82, 0xdc, 0x83, 0x7d, 0xbe, 0x42, 0x1e, 0xd3, 0x5b, 0x1b, 0xbc, 0x0b, 0x77, 0xe6, 0x10,
	0xbc, 0xde, 0x81, 0xc9, 0xff, 0x53, 0x4a, 0x7c, 0xec, 0xe6, 0x00, 0x46, 0x97, 0x53, 0x74, 0x4e,
	0xce, 0xf1, 0x95, 0x65, 0xf9, 0x62, 0x09, 0xff, 0xa0, 0xf4, 0xd1, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xeb, 0x79, 0x8e, 0x20, 0x5f, 0x3a, 0x00, 0x00,
}
